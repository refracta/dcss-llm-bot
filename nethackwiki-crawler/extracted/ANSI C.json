{"title":"ANSI C","url":"https://nethackwiki.com/wiki/ANSI_C","type":"markdown","data":"[![Wikipedia](/images/thumb/f/f8/Fair-use-wikipedia-logo.png/50px-Fair-use-wikipedia-logo.png)](/wiki/File:Fair-use-wikipedia-logo.png \"Wikipedia\")\n\n[Wikipedia](http://en.wikipedia.org/wiki/Main_Page \"wikipedia:Main Page\") has an article about:\n\n***[C (programming language)](http://en.wikipedia.org/wiki/C_\\(programming_language\\) \"wikipedia:C (programming language)\")***\n\nIn computer programming, **ANSI C** (or *ISO C*, or *C89*) is a specification for the C language and an update to the original K\\&R version of C. Programs written in the ANSI C language have access to a few extra features inspired by [C++](http://en.wikipedia.org/wiki/C_plus_plus \"wikipedia:C plus plus\"); the main difference between old C and ANSI C seems to be in declarations of function parameters. These days, ANSI C is routine and C programmers almost always use it.\n\nHowever, *[NetHack](/wiki/NetHack \"NetHack\")* was a very old program dating from before ANSI C's first spec in 1989. Today's version can take advantage of certain ANSI C features, and code for this is in [tradstdc.h](/wiki/Tradstdc.h \"Tradstdc.h\"). Is NetHack written in ANSI C? Yes and no, depending on what tradstdc.h decides to do.\n\nWith the release of [3.6.1](/wiki/3.6.1 \"3.6.1\"), the [DevTeam](/wiki/DevTeam \"DevTeam\") has [announced](https://nethack.org/devel/deprecation.html#361) that most pre-ANSI syntax in the program is deprecated.\n\n[ ]\n\n## Contents\n\n- [1 The void type](#The_void_type)\n\n- [2 void pointers, null pointers](#void_pointers.2C_null_pointers)\n\n- [3 Enumerated types](#Enumerated_types)\n\n- [4 Function declarations in ANSI C](#Function_declarations_in_ANSI_C)\n\n  - [4.1 Prototypes](#Prototypes)\n  - [4.2 Default promotions](#Default_promotions)\n  - [4.3 Variable parameter lists](#Variable_parameter_lists)\n\n- [5 Note for the ambitious newbie](#Note_for_the_ambitious_newbie)\n\n## The `void` type\n\nIn C, the `void` type indicates a function that does not return a value. The original C did not have a `void` type; programmers often declared functions to return `int` and discarded the value. (This is why compiling doesn't fail if you forget to return a value from a non-void function.)\n\nIt became common to `#define void int` to cosmetically declare a void function. (The preprocessor would change every `void` to `int` and the C compiler would have no concept of void.) Later, many C compiler vendors started including the `void` keyword. [C++](http://en.wikipedia.org/wiki/C_plus_plus \"wikipedia:C plus plus\") had a `void` keyword. So ANSI decided to include the `void` type in ANSI C.\n\nAnother common convention was to define a function without an explicit return type when no return was intended. The compiler would supply a return type of int. Older code is not consistent in this usage, and compilers did nothing to enforce it, but NetHack through [2.3e](/wiki/NetHack_2.3e \"NetHack 2.3e\") mostly adheres to it. (Implicit int is not permitted in C99, but most compilers accept it with a warning.)\n\nIf you find a void-free compiler to build *NetHack* with, then the procedure is to uncomment the `#define NOVOID` line at [config.h#line239](/wiki/Config.h#line239 \"Config.h\") so that [tradstdc.h#line23](/wiki/Tradstdc.h#line23 \"Tradstdc.h\") defines void.\n\n## `void` pointers, null pointers\n\nIn ANSI C, the data type pointer-to-void, written `void *`, can be used to hold the value of any other type of pointer, without requiring a \"cast\", or explicit type conversion. NetHack defines `genericptr_t` for this purpose.\n\nNetHack also does without the keyword `NULL`, which is defined in ANSI C as a pointer value that cannot be dereferenced and compares equal to a value of zero in integer or boolean types. The pre-ANSI equivalent is a constant zero value cast to a pointer type: `(char *)0`, `(genericptr_t)0` etc.\n\n## Enumerated types\n\nNetHack uses lists of symbolic constants to identify members of many sets: object and monster classes are probably the most frequent examples. Current practice in ANSI C is often to use [enumerations](http://en.wikipedia.org/wiki/Enumerated_type#C_and_syntactically_similar_languages \"wikipedia:Enumerated type\") instead. In either case, each element of the list is distinguished by a unique numeric value, but enumerations have a distinct advantage for developers: the debugger shows the program symbol for the value, i. e. a human-readable word, when stepping through the program. Symbolic constants on the other hand are preprocessor macros, and are not available except as numbers in the compiled code.\n\n## Function declarations in ANSI C\n\n### Prototypes\n\nAn old style declaration gives only the return type:\n\n```\nchar *xname();\n```\n\nwhile a prototype gives the types of the parameters:\n\n```\nchar *xname(struct obj *optr);\n```\n\nThe name of the parameter, `optr` in the example above, is optional; and NetHack usually omits it in forward declarations.\n\nThe `NDECL`, `FDECL` and `VDECL` macros create either prototypes or old-style declarations. `NDECL` is used if there are no parameters, `FDECL` for a fixed parameter list of at least one parameter, and `VDECL` for a variable parameter list. Separate macros are used to support building with overlays on [MS-DOS](/wiki/MS-DOS \"MS-DOS\") (which is not officially supported, and [barely practical](https://groups.google.com/forum/?fromgroups=#!topic/rec.games.roguelike.nethack/4U8k5tRzV34) today).\n\n### Default promotions\n\nWith the functions defined in the old style, integer types smaller than int are promoted to int or unsigned int, preserving their signedness. If a prototype is present, on most compilers the parameters must match the promoted types. A few older compilers will match a prototype to an unpromoted parameter type.\n\n[global.h](/wiki/Global.h \"Global.h\") defines seven types to be used in prototypes where the function has a type with a default promotion. The types are `CHAR_P`, `SCHAR_P`, `UCHAR_P`, `XCHAR_P`, `SHORT_P`, `BOOLEAN_P` and `ALIGNTYP_P`, and they correspond to `char`, `schar`, `uchar`, `xchar`, `short`, `boolean` and `aligntyp`. The [X11](/wiki/X11 \"X11\") interface defines a `DIMENSION_P` type, corresponding to `Dimension`. (Not all of those types are ANSI C keywords: some are defined in library or other headers.)\n\n### Variable parameter lists\n\nThe first C compilers used barely-portable hacks to support variadic functions such as `pline`. The symbol `USE_OLDARGS` enables these in NetHack. Here is an abridgement of pline from [NetHack 2.3e](/wiki/NetHack_2.3e \"NetHack 2.3e\"):\n\n```\npline(line,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)\nchar *line,*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9;\n{\n    char pbuf[BUFSZ];\n    sprintf(pbuf,line,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);\n    /* do stuff with pbuf */\n}\n```\n\nLater pre-ANSI compilers provided a header, varargs.h, to support variadic functions. `USE_VARARGS` enables this system in NetHack, and it looks like this:\n\n```\n#include <varargs.h>\nvoid\npline(va_alist)\nva_dcl /* no semicolon */\n{\n    char pbuf[BUFSZ];\n    va_list the_args;\n    char *format;\n\n    va_start(the_args);\n    format = va_arg(the_args, char *);\n    vsprintf(pbuf, format, the_args);\n    va_end(the_args);\n    /* do stuff with pbuf */\n}\n```\n\nThe macro `va_arg` extracts an argument from the list. NetHack calls it via the macro VA\\_INIT, defined in tradstdc.h, if varargs.h is in use (but not if stdarg.h is in use). The fixed arguments could also have been named explicitly in the function header.\n\nThis usage could not be made compatible with prototypes, and so ANSI C uses a different system. `USE_STDARG` enables it in NetHack:\n\n```\n#include <stdarg.h>\nvoid\npline(const char *format, ...)\n{\n    char pbuf[BUFSZ];\n    va_list the_args;\n\n    va_start(the_args, format); /* use the last parameter before the ... */\n    vsprintf(pbuf, format, the_args);\n    va_end(the_args);\n    /* do stuff with pbuf */\n}\n```\n\nThe source code for the variadic functions in NetHack is ugly, to say the least.\n\n## Note for the ambitious newbie\n\nIn case you consider creating a project of your own, be it a Rogue-like game or some other application, consider using a more modern language than C. Nowadays there are lots of platform-independent, high-level alternatives like [Java](http://en.wikipedia.org/wiki/Java_\\(programming_language\\) \"wikipedia:Java (programming language)\"), [Python](http://en.wikipedia.org/wiki/Python_\\(programming_language\\) \"wikipedia:Python (programming language)\") or [Perl](http://en.wikipedia.org/wiki/Perl \"wikipedia:Perl\") just to mention a few. Such an application would be far easier to debug and maintain than its counterpart written in C. If you feel an urge to squeeze a bit more power out of the machine for your advanced ANSI-graphics and its pixelshading algorithms, at least consider using [C++](http://en.wikipedia.org/wiki/C_plus_plus \"wikipedia:C plus plus\"). If you, despite every sane thought, decide that C is the language you want to use, use the latest version of C, [C17](http://en.wikipedia.org/wiki/C_\\(programming_language\\)#C17 \"wikipedia:C (programming language)\"). The latest version contains many corrections and improvements and will cause you less trouble.\n\nIf you choose to develop your code in C or C++, and are using something like gcc to compile, use the options `-Wall -ansi -pedantic`. You can also use `-std=c17` for the 2017 version of ISO C.\n\nVanilla NetHack continues to use C because of inertia (a 150,000+ line program is non-trivial to translate) and because of its stated goal: to get the game working on as many different types of hardware and under as many different operating systems as is practical.\n","html":"<!DOCTYPE html>\n<html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>ANSI C - NetHack Wiki</title>\n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"ANSI_C\",\"wgTitle\":\"ANSI C\",\"wgCurRevisionId\":172541,\"wgRevisionId\":172541,\"wgArticleId\":2507,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[\"Development\"],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"ANSI_C\",\"wgRelevantArticleId\":2507,\"wgRequestId\":\"456fd5243dc674d20426e6dc\",\"wgCSPNonce\":false,\"wgIsProbablyEditable\":false,\"wgRelevantPageIsProbablyEditable\":false,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"wgWikiEditorEnabledModules\":[],\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.state({\"site.styles\":\"ready\",\"noscript\":\"ready\",\"user.styles\":\"ready\",\"user\":\"ready\",\"user.options\":\"ready\",\"user.tokens\":\"loading\",\"mediawiki.legacy.shared\":\"ready\",\"mediawiki.legacy.commonPrint\":\"ready\",\"mediawiki.toc.styles\":\"ready\",\"mediawiki.skinning.interface\":\"ready\",\"skins.vector.styles\":\"ready\"});mw.loader.implement(\"user.tokens@0tffind\",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\",\"csrfToken\":\"+\\\\\"});\n});RLPAGEMODULES=[\"site\",\"mediawiki.page.startup\",\"mediawiki.user\",\"mediawiki.page.ready\",\"mediawiki.toc\",\"mediawiki.searchSuggest\",\"skins.vector.js\"];mw.loader.load(RLPAGEMODULES);});</script>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\"/>\n<script async=\"\" src=\"/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>\n<meta name=\"ResourceLoaderDynamicStyles\" content=\"\"/>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector\"/>\n<meta name=\"generator\" content=\"MediaWiki 1.32.5\"/>\n<meta name=\"description\" content=\"In computer programming, ANSI C (or ISO C, or C89) is a specification for the C language and an update to the original K&amp;amp;amp;R version of C. Programs written in the ANSI C language have access to a few extra features inspired by C++; the main difference between old C and ANSI C seems to be in declarations of function parameters. These days, ANSI C is routine and C programmers almost always use it.\"/>\n<link rel=\"image_src\" href=\"/images/6/65/Nethackwiki-logo.png\"/>\n<link rel=\"shortcut icon\" href=\"/images/6/64/Favicon.ico\"/>\n<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch_desc.php\" title=\"NetHackWiki\"/>\n<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://nethackwiki.com/api.php?action=rsd\"/>\n<link rel=\"canonical\" href=\"/wiki/ANSI_C\"/>\n<!--[if lt IE 9]><script src=\"/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1\"></script><![endif]-->\n</head>\n<body class=\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-ANSI_C rootpage-ANSI_C skin-vector action-view\">\t\t<div id=\"mw-page-base\" class=\"noprint\"></div>\n\t\t<div id=\"mw-head-base\" class=\"noprint\"></div>\n\t\t<div id=\"content\" class=\"mw-body\" role=\"main\">\n\t\t\t<a id=\"top\"></a>\n\t\t\t<div class=\"mw-indicators mw-body-content\">\n</div>\n<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">ANSI C</h1>\t\t\t<div id=\"bodyContent\" class=\"mw-body-content\">\n\t\t\t\t<div id=\"siteSub\" class=\"noprint\">From NetHackWiki</div>\t\t\t\t<div id=\"contentSub\"></div>\n\t\t\t\t<div id=\"jump-to-nav\"></div>\t\t\t\t<a class=\"mw-jump-link\" href=\"#mw-head\">Jump to navigation</a>\n\t\t\t\t<a class=\"mw-jump-link\" href=\"#p-search\">Jump to search</a>\n\t\t\t\t<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div class=\"mw-parser-output\"><div class=\"noprint sidebox\">\n<div style=\"float: left;\"><div class=\"floatnone\"><a href=\"/wiki/File:Fair-use-wikipedia-logo.png\" class=\"image\" title=\"Wikipedia\"><img alt=\"Wikipedia\" src=\"/images/thumb/f/f8/Fair-use-wikipedia-logo.png/50px-Fair-use-wikipedia-logo.png\" width=\"50\" height=\"50\" srcset=\"/images/f/f8/Fair-use-wikipedia-logo.png 1.5x\" /></a></div></div>\n<div style=\"margin-left: 60px;\"><a href=\"http://en.wikipedia.org/wiki/Main_Page\" class=\"extiw\" title=\"wikipedia:Main Page\">Wikipedia</a> has an article about:\n<div style=\"margin-left: 10px;\"><i><b><a href=\"http://en.wikipedia.org/wiki/C_(programming_language)\" class=\"extiw\" title=\"wikipedia:C (programming language)\">C (programming language)</a></b></i></div>\n</div>\n</div>\n<p>In computer programming, <b>ANSI C</b> (or <i>ISO C</i>, or <i>C89</i>) is a specification for the C language and an update to the original K&amp;R version of C. Programs written in the ANSI C language have access to a few extra features inspired by <a href=\"http://en.wikipedia.org/wiki/C_plus_plus\" class=\"extiw\" title=\"wikipedia:C plus plus\">C++</a>; the main difference between old C and ANSI C seems to be in declarations of function parameters. These days, ANSI C is routine and C programmers almost always use it.\n</p><p>However, <i><a href=\"/wiki/NetHack\" title=\"NetHack\">NetHack</a></i> was a very old program dating from before ANSI C's first spec in 1989. Today's version can take advantage of certain ANSI C features, and code for this is in <a href=\"/wiki/Tradstdc.h\" class=\"mw-redirect\" title=\"Tradstdc.h\">tradstdc.h</a>. Is NetHack written in ANSI C? Yes and no, depending on what tradstdc.h decides to do.\n</p><p>With the release of <a href=\"/wiki/3.6.1\" class=\"mw-redirect\" title=\"3.6.1\">3.6.1</a>, the <a href=\"/wiki/DevTeam\" title=\"DevTeam\">DevTeam</a> has <a class=\"external text\" href=\"https://nethack.org/devel/deprecation.html#361\">announced</a> that most pre-ANSI syntax in the program is deprecated. \n</p>\n<div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#The_void_type\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">The void type</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#void_pointers.2C_null_pointers\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">void pointers, null pointers</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Enumerated_types\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Enumerated types</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#Function_declarations_in_ANSI_C\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Function declarations in ANSI C</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#Prototypes\"><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">Prototypes</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#Default_promotions\"><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">Default promotions</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#Variable_parameter_lists\"><span class=\"tocnumber\">4.3</span> <span class=\"toctext\">Variable parameter lists</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#Note_for_the_ambitious_newbie\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Note for the ambitious newbie</span></a></li>\n</ul>\n</div>\n\n<h2><span class=\"mw-headline\" id=\"The_void_type\">The <code>void</code> type</span></h2>\n<p>In C, the <code>void</code> type indicates a function that does not return a value. The original C did not have a <code>void</code> type; programmers often declared functions to return <code>int</code> and discarded the value. (This is why compiling doesn't fail if you forget to return a value from a non-void function.)\n</p><p>It became common to <code>#define void int</code> to cosmetically declare a void function. (The preprocessor would change every <code>void</code> to <code>int</code> and the C compiler would have no concept of void.) Later, many C compiler vendors started including the <code>void</code> keyword. <a href=\"http://en.wikipedia.org/wiki/C_plus_plus\" class=\"extiw\" title=\"wikipedia:C plus plus\">C++</a> had a <code>void</code> keyword. So ANSI decided to include the <code>void</code> type in ANSI C.\n</p><p>Another common convention was to define a function without an explicit return type when no return was intended.  The compiler would supply a return type of int.  Older code is not consistent in this usage, and compilers did nothing to enforce it, but NetHack through <a href=\"/wiki/NetHack_2.3e\" title=\"NetHack 2.3e\">2.3e</a> mostly adheres to it.  (Implicit int is not permitted in C99, but most compilers accept it with a warning.)\n</p><p>If you find a void-free compiler to build <i>NetHack</i> with, then the procedure is to uncomment the <code>#define NOVOID</code> line at <a href=\"/wiki/Config.h#line239\" class=\"mw-redirect\" title=\"Config.h\">config.h#line239</a> so that <a href=\"/wiki/Tradstdc.h#line23\" class=\"mw-redirect\" title=\"Tradstdc.h\">tradstdc.h#line23</a> defines void.\n</p>\n<h2><span id=\"void_pointers,_null_pointers\"></span><span class=\"mw-headline\" id=\"void_pointers.2C_null_pointers\"><code>void</code> pointers, null pointers</span></h2>\n<p>In ANSI C, the data type pointer-to-void, written <code>void *</code>, can be used to hold the value of any other type of pointer, without requiring a \"cast\", or explicit type conversion. NetHack defines <code>genericptr_t</code> for this purpose.\n</p><p>NetHack also does without the keyword <code>NULL</code>, which is defined in ANSI C as a pointer value that cannot be dereferenced and compares equal to a value of zero in integer or boolean types. The pre-ANSI equivalent is a constant zero value cast to a pointer type: <code>(char *)0</code>, <code>(genericptr_t)0</code> etc.\n</p>\n<h2><span class=\"mw-headline\" id=\"Enumerated_types\">Enumerated types</span></h2>\n<p>NetHack uses lists of symbolic constants to identify members of many sets: object and monster classes are probably the most frequent examples. Current practice in ANSI C is often to use <a href=\"http://en.wikipedia.org/wiki/Enumerated_type#C_and_syntactically_similar_languages\" class=\"extiw\" title=\"wikipedia:Enumerated type\">enumerations</a> instead. In either case, each element of the list is distinguished by a unique numeric value, but enumerations have a distinct advantage for developers: the debugger shows the program symbol for the value, i. e. a human-readable word, when stepping through the program. Symbolic constants on the other hand are preprocessor macros, and are not available except as numbers in the compiled code.\n</p>\n<h2><span class=\"mw-headline\" id=\"Function_declarations_in_ANSI_C\">Function declarations in ANSI C</span></h2>\n<h3><span class=\"mw-headline\" id=\"Prototypes\">Prototypes</span></h3>\n<p>An old style declaration gives only the return type:\n</p>\n<pre>char *xname();\n</pre>\n<p>while a prototype gives the types of the parameters:\n</p>\n<pre>char *xname(struct obj *optr);\n</pre>\n<p>The name of the parameter, <code>optr</code> in the example above, is optional; and NetHack usually omits it in forward declarations.\n</p><p>The <code>NDECL</code>, <code>FDECL</code> and <code>VDECL</code> macros create either prototypes or old-style declarations.  <code>NDECL</code> is used if there are no parameters, <code>FDECL</code> for a fixed parameter list of at least one parameter, and <code>VDECL</code> for a variable parameter list. Separate macros are used to support building with overlays on <a href=\"/wiki/MS-DOS\" title=\"MS-DOS\">MS-DOS</a> (which is not officially supported, and <a class=\"external text\" href=\"https://groups.google.com/forum/?fromgroups=#!topic/rec.games.roguelike.nethack/4U8k5tRzV34\">barely practical</a> today).\n</p>\n<h3><span class=\"mw-headline\" id=\"Default_promotions\">Default promotions</span></h3>\n<p>With the functions defined in the old style, integer types smaller than int are promoted to int or unsigned int, preserving their signedness.  If a prototype is present, on most compilers the parameters must match the promoted types.  A few older compilers will match a prototype to an unpromoted parameter type.\n</p><p><a href=\"/wiki/Global.h\" class=\"mw-redirect\" title=\"Global.h\">global.h</a> defines seven types to be used in prototypes where the function has a type with a default promotion.  The types are <code>CHAR_P</code>, <code>SCHAR_P</code>, <code>UCHAR_P</code>, <code>XCHAR_P</code>, <code>SHORT_P</code>, <code>BOOLEAN_P</code> and <code>ALIGNTYP_P</code>, and they correspond to <code>char</code>, <code>schar</code>, <code>uchar</code>, <code>xchar</code>, <code>short</code>, <code>boolean</code> and <code>aligntyp</code>.  The <a href=\"/wiki/X11\" title=\"X11\">X11</a> interface defines a <code>DIMENSION_P</code> type, corresponding to <code>Dimension</code>. (Not all of those types are ANSI C keywords: some are defined in library or other headers.)\n</p>\n<h3><span class=\"mw-headline\" id=\"Variable_parameter_lists\">Variable parameter lists</span></h3>\n<p>The first C compilers used barely-portable hacks to support variadic functions such as <tt>pline</tt>.  The symbol <code>USE_OLDARGS</code> enables these in NetHack.  Here is an abridgement of pline from <a href=\"/wiki/NetHack_2.3e\" title=\"NetHack 2.3e\">NetHack 2.3e</a>:\n</p>\n<pre>pline(line,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)\nchar *line,*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9;\n{\n    char pbuf[BUFSZ];\n    sprintf(pbuf,line,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);\n    /* do stuff with pbuf */\n}\n</pre>\n<p>Later pre-ANSI compilers provided a header, varargs.h, to support variadic functions.  <code>USE_VARARGS</code> enables this system in NetHack, and it looks like this:\n</p>\n<pre>#include &lt;varargs.h&gt;\nvoid\npline(va_alist)\nva_dcl /* no semicolon */\n{\n    char pbuf[BUFSZ];\n    va_list the_args;\n    char *format;\n\n    va_start(the_args);\n    format = va_arg(the_args, char *);\n    vsprintf(pbuf, format, the_args);\n    va_end(the_args);\n    /* do stuff with pbuf */\n}\n</pre>\n<p>The macro <code>va_arg</code> extracts an argument from the list. NetHack calls it via the macro VA_INIT, defined in tradstdc.h, if varargs.h is in use (but not if stdarg.h is in use).  The fixed arguments could also have been named explicitly in the function header.\n</p><p>This usage could not be made compatible with prototypes, and so ANSI C uses a different system. <code>USE_STDARG</code> enables it in NetHack:\n</p>\n<pre>#include &lt;stdarg.h&gt;\nvoid\npline(const char *format, ...)\n{\n    char pbuf[BUFSZ];\n    va_list the_args;\n\n    va_start(the_args, format); /* use the last parameter before the ... */\n    vsprintf(pbuf, format, the_args);\n    va_end(the_args);\n    /* do stuff with pbuf */\n}\n</pre>\n<p>The source code for the variadic functions in NetHack is ugly, to say the least.\n</p>\n<h2><span class=\"mw-headline\" id=\"Note_for_the_ambitious_newbie\">Note for the ambitious newbie</span></h2>\n<p>In case you consider creating a project of your own, be it a Rogue-like game or some other application, consider using a more modern language than C. Nowadays there are lots of platform-independent, high-level alternatives like <a href=\"http://en.wikipedia.org/wiki/Java_(programming_language)\" class=\"extiw\" title=\"wikipedia:Java (programming language)\">Java</a>, <a href=\"http://en.wikipedia.org/wiki/Python_(programming_language)\" class=\"extiw\" title=\"wikipedia:Python (programming language)\">Python</a> or <a href=\"http://en.wikipedia.org/wiki/Perl\" class=\"extiw\" title=\"wikipedia:Perl\">Perl</a> just to mention a few. Such an application would\nbe far easier to debug and maintain than its counterpart written in C. If you feel an urge to squeeze a bit more power out of the machine for your advanced ANSI-graphics and its pixelshading algorithms, at least consider using <a href=\"http://en.wikipedia.org/wiki/C_plus_plus\" class=\"extiw\" title=\"wikipedia:C plus plus\">C++</a>. If you, despite every sane thought, decide that C is the language you want to use, use the latest version of C, <a href=\"http://en.wikipedia.org/wiki/C_(programming_language)#C17\" class=\"extiw\" title=\"wikipedia:C (programming language)\">C17</a>. The latest version contains\nmany corrections and improvements and will cause you less trouble.\n</p><p>If you choose to develop your code in C or C++, and are using something like gcc to compile, use the options <code>-Wall -ansi -pedantic</code>. You can also use <code>-std=c17</code> for the 2017 version of ISO C.\n</p><p>Vanilla NetHack continues to use C because of inertia (a 150,000+ line program is non-trivial to translate) and because of its stated goal:  to get the game working on as many different types of hardware and under as many different operating systems as is practical.\n</p>\n<!-- \nNewPP limit report\nCached time: 20240926182200\nCache expiry: 604800\nDynamic content: false\nCPU time usage: 0.012 seconds\nReal time usage: 0.020 seconds\nPreprocessor visited node count: 55/1000000\nPreprocessor generated node count: 142/1000000\nPost‐expand include size: 666/2097152 bytes\nTemplate argument size: 202/2097152 bytes\nHighest expansion depth: 4/40\nExpensive parser function count: 0/100\nUnstrip recursion depth: 0/20\nUnstrip post‐expand size: 0/5000000 bytes\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%    7.139      1 -total\n100.00%    7.139      1 Template:Wikipedia\n 77.99%    5.568      1 Template:Generic_project_link\n-->\n\n<!-- Saved in parser cache with key wikihackdb:pcache:idhash:2507-0!canonical and timestamp 20240926182200 and revision id 172541\n -->\n</div></div>\t\t\t\t\t<div class=\"printfooter\">\n\t\t\t\t\t\tRetrieved from \"<a dir=\"ltr\" href=\"https://nethackwiki.com/index.php?title=ANSI_C&amp;oldid=172541\">https://nethackwiki.com/index.php?title=ANSI_C&amp;oldid=172541</a>\"\t\t\t\t\t</div>\n\t\t\t\t<div id=\"catlinks\" class=\"catlinks\" data-mw=\"interface\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/wiki/Special:Categories\" title=\"Special:Categories\">Category</a>: <ul><li><a href=\"/wiki/Category:Development\" title=\"Category:Development\">Development</a></li></ul></div></div>\t\t\t\t<div class=\"visualClear\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"mw-navigation\">\n\t\t\t<h2>Navigation menu</h2>\n\t\t\t<div id=\"mw-head\">\n\t\t\t\t\t\t\t\t\t<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">\n\t\t\t\t\t\t<h3 id=\"p-personal-label\">Personal tools</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"pt-createaccount\"><a href=\"/index.php?title=Special:CreateAccount&amp;returnto=ANSI+C\" title=\"You are encouraged to create an account and log in; however, it is not mandatory\">Create account</a></li><li id=\"pt-login\"><a href=\"/index.php?title=Special:UserLogin&amp;returnto=ANSI+C\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div id=\"left-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">\n\t\t\t\t\t\t<h3 id=\"p-namespaces-label\">Namespaces</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/wiki/ANSI_C\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li><li id=\"ca-talk\"><span><a href=\"/wiki/Talk:ANSI_C\" rel=\"discussion\" title=\"Discussion about the content page [t]\" accesskey=\"t\">Discussion</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-variants-label\" />\n\t\t\t\t\t\t<h3 id=\"p-variants-label\">\n\t\t\t\t\t\t\t<span>Variants</span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t<div id=\"right-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">\n\t\t\t\t\t\t<h3 id=\"p-views-label\">Views</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-view\" class=\"collapsible selected\"><span><a href=\"/wiki/ANSI_C\">Read</a></span></li><li id=\"ca-viewsource\" class=\"collapsible\"><span><a href=\"/index.php?title=ANSI_C&amp;action=edit\" title=\"This page is protected.&#10;You can view its source [e]\" accesskey=\"e\">View source</a></span></li><li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/index.php?title=ANSI_C&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-cactions-label\" />\n\t\t\t\t\t\t<h3 id=\"p-cactions-label\"><span>More</span></h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-search\" role=\"search\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t<label for=\"searchInput\">Search</label>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<form action=\"/index.php\" id=\"searchform\">\n\t\t\t\t\t\t\t<div id=\"simpleSearch\">\n\t\t\t\t\t\t\t\t<input type=\"search\" name=\"search\" placeholder=\"Search NetHackWiki\" title=\"Search NetHackWiki [f]\" accesskey=\"f\" id=\"searchInput\"/><input type=\"hidden\" value=\"Special:Search\" name=\"title\"/><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"/><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\"/>\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"mw-panel\">\n\t\t\t\t<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/wiki/Main_Page\"  title=\"Visit the main page\"></a></div>\n\t\t\t\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">\n\t\t\t<h3 id=\"p-navigation-label\">Navigation</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-NetHack-Wiki\"><a href=\"/wiki/Main_Page\">NetHack Wiki</a></li><li id=\"n-Forum\"><a href=\"/wiki/Forum:Watercooler\">Forum</a></li><li id=\"n-portal\"><a href=\"/wiki/NetHackWiki:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li><li id=\"n-recentchanges\"><a href=\"/wiki/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/wiki/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-Popular_pages\" aria-labelledby=\"p-Popular_pages-label\">\n\t\t\t<h3 id=\"p-Popular_pages-label\">Popular pages</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Dungeon-features\"><a href=\"/wiki/Dungeon_feature\">Dungeon features</a></li><li id=\"n-Monsters\"><a href=\"/wiki/Monster#Canonical_list_of_monsters\">Monsters</a></li><li id=\"n-In.2FExtrinsics\"><a href=\"/wiki/Property#Intrinsic_properties\">In/Extrinsics</a></li><li id=\"n-Items\"><a href=\"/wiki/Item\">Items</a></li><li id=\"n-Spells\"><a href=\"/wiki/Spellbook#List_of_spellbooks\">Spells</a></li><li id=\"n-Game-options\"><a href=\"/wiki/Options\">Game options</a></li><li id=\"n-Websites\"><a href=\"/wiki/Websites\">Websites</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-contributing\" aria-labelledby=\"p-contributing-label\">\n\t\t\t<h3 id=\"p-contributing-label\">Contributing</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Style-guide\"><a href=\"/wiki/NetHackWiki:Style_guide\">Style guide</a></li><li id=\"n-help\"><a href=\"/wiki/NetHackWiki:How_to_help\" title=\"The place to find out\">How to help</a></li><li id=\"n-Current-projects\"><a href=\"/wiki/NetHackWiki:Current_projects\">Current projects</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">\n\t\t\t<h3 id=\"p-tb-label\">Tools</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"t-whatlinkshere\"><a href=\"/wiki/Special:WhatLinksHere/ANSI_C\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/wiki/Special:RecentChangesLinked/ANSI_C\" rel=\"nofollow\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-specialpages\"><a href=\"/wiki/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-print\"><a href=\"/index.php?title=ANSI_C&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li><li id=\"t-permalink\"><a href=\"/index.php?title=ANSI_C&amp;oldid=172541\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/index.php?title=ANSI_C&amp;action=info\" title=\"More information about this page\">Page information</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t<div id=\"footer\" role=\"contentinfo\">\n\t\t\t\t\t\t<ul id=\"footer-info\">\n\t\t\t\t\t\t\t\t<li id=\"footer-info-lastmod\"> This page was last edited on 28 June 2024, at 10:59.</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<ul id=\"footer-places\">\n\t\t\t\t\t\t\t\t<li id=\"footer-places-about\"><a href=\"/wiki/NetHackWiki:About\" title=\"NetHackWiki:About\">About NetHackWiki</a></li>\n\t\t\t\t\t\t\t\t<li id=\"footer-places-disclaimer\"><a href=\"/wiki/NetHackWiki:General_disclaimer\" title=\"NetHackWiki:General disclaimer\">Disclaimers</a></li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t<ul id=\"footer-icons\" class=\"noprint\">\n\t\t\t\t\t\t\t\t\t\t<li id=\"footer-poweredbyico\">\n\t\t\t\t\t\t<a href=\"//www.mediawiki.org/\"><img src=\"/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"/></a>\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div style=\"clear: both;\"></div>\n\t\t</div>\n\t\t\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.012\",\"walltime\":\"0.020\",\"ppvisitednodes\":{\"value\":55,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":142,\"limit\":1000000},\"postexpandincludesize\":{\"value\":666,\"limit\":2097152},\"templateargumentsize\":{\"value\":202,\"limit\":2097152},\"expansiondepth\":{\"value\":4,\"limit\":40},\"expensivefunctioncount\":{\"value\":0,\"limit\":100},\"unstrip-depth\":{\"value\":0,\"limit\":20},\"unstrip-size\":{\"value\":0,\"limit\":5000000},\"timingprofile\":[\"100.00%    7.139      1 -total\",\"100.00%    7.139      1 Template:Wikipedia\",\" 77.99%    5.568      1 Template:Generic_project_link\"]},\"cachereport\":{\"timestamp\":\"20240926182200\",\"ttl\":604800,\"transientcontent\":false}}});mw.config.set({\"wgBackendResponseTime\":64});});</script>\n\t</body>\n</html>\n","rawPage":"{{wikipedia|C (programming language)}}\n\nIn computer programming, '''ANSI C''' (or ''ISO C'', or ''C89'') is a specification for the C language and an update to the original K&R version of C. Programs written in the ANSI C language have access to a few extra features inspired by [[Wikipedia:C plus plus|C++]]; the main difference between old C and ANSI C seems to be in declarations of function parameters. These days, ANSI C is routine and C programmers almost always use it.\n\nHowever, ''[[NetHack]]'' was a very old program dating from before ANSI C's first spec in 1989. Today's version can take advantage of certain ANSI C features, and code for this is in [[tradstdc.h]]. Is NetHack written in ANSI C? Yes and no, depending on what tradstdc.h decides to do.\n\nWith the release of [[3.6.1]], the [[DevTeam]] has [https://nethack.org/devel/deprecation.html#361 announced] that most pre-ANSI syntax in the program is deprecated. \n\n== The <code>void</code> type ==\nIn C, the <code>void</code> type indicates a function that does not return a value. The original C did not have a <code>void</code> type; programmers often declared functions to return <code>int</code> and discarded the value. (This is why compiling doesn't fail if you forget to return a value from a non-void function.)\n\nIt became common to <code>#define void int</code> to cosmetically declare a void function. (The preprocessor would change every <code>void</code> to <code>int</code> and the C compiler would have no concept of void.) Later, many C compiler vendors started including the <code>void</code> keyword. [[Wikipedia:C plus plus|C++]] had a <code>void</code> keyword. So ANSI decided to include the <code>void</code> type in ANSI C.\n\nAnother common convention was to define a function without an explicit return type when no return was intended.  The compiler would supply a return type of int.  Older code is not consistent in this usage, and compilers did nothing to enforce it, but NetHack through [[NetHack 2.3e|2.3e]] mostly adheres to it.  (Implicit int is not permitted in C99, but most compilers accept it with a warning.)\n\nIf you find a void-free compiler to build ''NetHack'' with, then the procedure is to uncomment the <code>#define NOVOID</code> line at [[config.h#line239]] so that [[tradstdc.h#line23]] defines void.\n\n== <code>void</code> pointers, null pointers==\nIn ANSI C, the data type pointer-to-void, written <code>void *</code>, can be used to hold the value of any other type of pointer, without requiring a \"cast\", or explicit type conversion. NetHack defines <code>genericptr_t</code> for this purpose.\n\nNetHack also does without the keyword <code>NULL</code>, which is defined in ANSI C as a pointer value that cannot be dereferenced and compares equal to a value of zero in integer or boolean types. The pre-ANSI equivalent is a constant zero value cast to a pointer type: <code>(char *)0</code>, <code>(genericptr_t)0</code> etc.\n\n== Enumerated types ==\nNetHack uses lists of symbolic constants to identify members of many sets: object and monster classes are probably the most frequent examples. Current practice in ANSI C is often to use [[Wikipedia:Enumerated_type#C_and_syntactically_similar_languages|enumerations]] instead. In either case, each element of the list is distinguished by a unique numeric value, but enumerations have a distinct advantage for developers: the debugger shows the program symbol for the value, i. e. a human-readable word, when stepping through the program. Symbolic constants on the other hand are preprocessor macros, and are not available except as numbers in the compiled code.\n\n== Function declarations in ANSI C ==\n\n=== Prototypes ===\nAn old style declaration gives only the return type:\n\n char *xname();\n\nwhile a prototype gives the types of the parameters:\n\n char *xname(struct obj *optr);\n\nThe name of the parameter, <code>optr</code> in the example above, is optional; and NetHack usually omits it in forward declarations.\n\nThe <code>NDECL</code>, <code>FDECL</code> and <code>VDECL</code> macros create either prototypes or old-style declarations.  <code>NDECL</code> is used if there are no parameters, <code>FDECL</code> for a fixed parameter list of at least one parameter, and <code>VDECL</code> for a variable parameter list. Separate macros are used to support building with overlays on [[MS-DOS]] (which is not officially supported, and [https://groups.google.com/forum/?fromgroups=#!topic/rec.games.roguelike.nethack/4U8k5tRzV34 barely practical] today).\n\n=== Default promotions ===\n\nWith the functions defined in the old style, integer types smaller than int are promoted to int or unsigned int, preserving their signedness.  If a prototype is present, on most compilers the parameters must match the promoted types.  A few older compilers will match a prototype to an unpromoted parameter type.\n\n[[global.h]] defines seven types to be used in prototypes where the function has a type with a default promotion.  The types are <code>CHAR_P</code>, <code>SCHAR_P</code>, <code>UCHAR_P</code>, <code>XCHAR_P</code>, <code>SHORT_P</code>, <code>BOOLEAN_P</code> and <code>ALIGNTYP_P</code>, and they correspond to <code>char</code>, <code>schar</code>, <code>uchar</code>, <code>xchar</code>, <code>short</code>, <code>boolean</code> and <code>aligntyp</code>.  The [[X11]] interface defines a <code>DIMENSION_P</code> type, corresponding to <code>Dimension</code>. (Not all of those types are ANSI C keywords: some are defined in library or other headers.)\n\n=== Variable parameter lists ===\n\nThe first C compilers used barely-portable hacks to support variadic functions such as <tt>pline</tt>.  The symbol <code>USE_OLDARGS</code> enables these in NetHack.  Here is an abridgement of pline from [[NetHack 2.3e]]:\n\n pline(line,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9)\n char *line,*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9;\n {\n     char pbuf[BUFSZ];\n     sprintf(pbuf,line,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);\n     /* do stuff with pbuf */\n }\n\nLater pre-ANSI compilers provided a header, varargs.h, to support variadic functions.  <code>USE_VARARGS</code> enables this system in NetHack, and it looks like this:\n\n #include <varargs.h>\n void\n pline(va_alist)\n va_dcl /* no semicolon */\n {\n     char pbuf[BUFSZ];\n     va_list the_args;\n     char *format;\n \n     va_start(the_args);\n     format = va_arg(the_args, char *);\n     vsprintf(pbuf, format, the_args);\n     va_end(the_args);\n     /* do stuff with pbuf */\n }\n\nThe macro <code>va_arg</code> extracts an argument from the list. NetHack calls it via the macro VA_INIT, defined in tradstdc.h, if varargs.h is in use (but not if stdarg.h is in use).  The fixed arguments could also have been named explicitly in the function header.\n\nThis usage could not be made compatible with prototypes, and so ANSI C uses a different system. <code>USE_STDARG</code> enables it in NetHack:\n\n #include <stdarg.h>\n void\n pline(const char *format, ...)\n {\n     char pbuf[BUFSZ];\n     va_list the_args;\n \n     va_start(the_args, format); /* use the last parameter before the ... */\n     vsprintf(pbuf, format, the_args);\n     va_end(the_args);\n     /* do stuff with pbuf */\n }\n\nThe source code for the variadic functions in NetHack is ugly, to say the least.\n\n== Note for the ambitious newbie ==\nIn case you consider creating a project of your own, be it a Rogue-like game or some other application, consider using a more modern language than C. Nowadays there are lots of platform-independent, high-level alternatives like [[Wikipedia:Java (programming language)|Java]], [[Wikipedia:Python (programming language)|Python]] or [[Wikipedia:Perl|Perl]] just to mention a few. Such an application would\nbe far easier to debug and maintain than its counterpart written in C. If you feel an urge to squeeze a bit more power out of the machine for your advanced ANSI-graphics and its pixelshading algorithms, at least consider using [[Wikipedia:C plus plus|C++]]. If you, despite every sane thought, decide that C is the language you want to use, use the latest version of C, [[Wikipedia:C (programming language)#C17|C17]]. The latest version contains\nmany corrections and improvements and will cause you less trouble.\n\nIf you choose to develop your code in C or C++, and are using something like gcc to compile, use the options <code>-Wall -ansi -pedantic</code>. You can also use <code>-std=c17</code> for the 2017 version of ISO C.\n\nVanilla NetHack continues to use C because of inertia (a 150,000+ line program is non-trivial to translate) and because of its stated goal:  to get the game working on as many different types of hardware and under as many different operating systems as is practical.\n[[Category:Development]]"}
{"title":"NetHack 4 Network Protocol","url":"https://nethackwiki.com/wiki/NetHack_4_Network_Protocol","type":"markdown","data":"This is a description of the [NetHack 4](/wiki/NetHack_4 \"NetHack 4\") networking protocol.\n\nNote: This page tends to get out of date quickly. A much more up-to-date version can be found [here](http://trac.nethack4.org/browser/doc/server_protocol.txt).\n\nThe protocol is based on JSON. Each client command and each server response is a single, valid JSON object in UTF8 encoding.\n\n[ ]\n\n## Contents\n\n- [1 Basics](#Basics)\n\n- [2 Interaction](#Interaction)\n\n- [3 Client commands](#Client_commands)\n\n  - [3.1 auth](#auth)\n  - [3.2 register](#register)\n  - [3.3 describe\\_pos](#describe_pos)\n  - [3.4 exit\\_game](#exit_game)\n  - [3.5 get\\_commands](#get_commands)\n  - [3.6 get\\_obj\\_commands](#get_obj_commands)\n  - [3.7 get\\_drawing\\_info](#get_drawing_info)\n  - [3.8 get\\_options](#get_options)\n  - [3.9 set\\_option](#set_option)\n  - [3.10 get\\_roles](#get_roles)\n  - [3.11 get\\_topten](#get_topten)\n  - [3.12 list\\_games](#list_games)\n  - [3.13 create\\_game](#create_game)\n  - [3.14 play\\_game](#play_game)\n  - [3.15 set\\_email](#set_email)\n  - [3.16 set\\_password](#set_password)\n  - [3.17 shutdown](#shutdown)\n\n- [4 Server requests](#Server_requests)\n\n  - [4.1 server\\_cancel](#server_cancel)\n  - [4.2 request\\_command](#request_command)\n  - [4.3 display\\_menu](#display_menu)\n  - [4.4 display\\_objects](#display_objects)\n  - [4.5 getdir](#getdir)\n  - [4.6 getline](#getline)\n  - [4.7 getpos](#getpos)\n  - [4.8 query\\_key](#query_key)\n  - [4.9 yn](#yn)\n  - [4.10 load\\_progress](#load_progress)\n  - [4.11 server\\_error](#server_error)\n\n- [5 Display elements](#Display_elements)\n\n  - [5.1 delay\\_output](#delay_output)\n  - [5.2 display\\_buffer](#display_buffer)\n  - [5.3 level\\_changed](#level_changed)\n  - [5.4 list\\_items](#list_items)\n  - [5.5 outrip](#outrip)\n  - [5.6 pause](#pause)\n  - [5.7 print\\_message](#print_message)\n  - [5.8 print\\_message\\_nonblocking](#print_message_nonblocking)\n  - [5.9 raw\\_print](#raw_print)\n  - [5.10 update\\_screen](#update_screen)\n  - [5.11 update\\_status](#update_status)\n\n## Basics\n\nThe protocol is based on JSON. Each command and each response is a single, valid JSON object in UTF8 encoding. The server will insert a NUL character between each command it sends, to allow clients to easily determine where one ends and the next starts (NUL cannot appear in a JSON encoding). The client does not currently insert such NULs. (TODO: It probably should, and the server should probably respect them, in case the client needs to send \\`exit\\_game\\` immediately after another command, without waiting for a response in between.)\n\nThe server protocol is an enhancement of the protocol used by a window port to connect to a local game; the two are very similar, and so this documentation may also be consulted to gain some amount of understanding of the behaviour of a windowport. There are a few commands that are specific to server use, though, such as \\`auth\\`, and the API for map updates is different. For a full explanation of the various protocols in use, see \\`doc/mainloop.txt\\`.\n\nThe following types are all special cases of integers:\n\n- All enumerated types\n- bitflags\n- boolean\n- charcode\n- connid\n- coordinate\n- gameid\n\n## Interaction\n\nOnce the client has connected to the server, it must send either an \\`auth\\` or a \\`register\\` command. If the client sends a successful \\`register\\` command, a following \\`auth\\` command is not necessary. When the client is authenticated any other command may be sent to the server.\n\nNormal flow is driven by the client and/or server sending commands and receiving responses to them; a command can be sent from the client to the server, or (more rarely) the other way round. (Server commands are sent if the server needs more information to fulfil a client command, or to inform the client of unusual conditions, such as a retroactive cancel of a command in progress.) Server commands and responses can also carry an attached \\`display\\` element with map updates (see later in this document).\n\nIn general, a command might be sent/received by the client and/or server at any point after the authentication. It is thus incorrect for a client to block on user input, because it might have to handle a server command that arrives unexpectedly.\n\nIt is also incorrect to block on the response to a command, because a command might be followed up by another command rather than a response. It is acceptable, however, for the client to ignore user input after sending a command, until either a command or a response is received; whenever a command is sent, the client can assume that the server will react to it in some way, either via responding or via sending a followup command. 70 Commands and responses are always well-nested; if a response is sent, it will be to the most recent unresponded command sent by the other end of the connection. Additionally, messages usually alternate between client and server. Currently, the only exception to this is the \\`cancel\\_server\\_request\\` command that the server uses to countermand a server request; it can be sent by the server even if the previous message was also sent by the server.\n\n## Client commands\n\nThese commands are sent by the client, expecting a response from the server.\n\n### auth\n\nEither \\`auth\\` or \\`register\\` must always be the first command sent, and no other commands may be sent until the original \\`auth\\` or \\`register\\` command receives a response.\n\nThis command is specific to client/server communication, and is not used for local play. It specifies which user is making the connection.\n\nUpon creating a new connection, there will be no game loaded: \\`play\\_game\\` will need to be used before commands that require a game to be loaded will work (and those commands can only be given to follow up server requests that follow up the \\`play\\_game\\` call).\n\nCommand arguments:\n\n- \\`string username\\`: the username of the user who is making the connection\n- \\`string password\\`: the password of the user who is making the connection\n\nResponse arguments:\n\n- \\`enum authresult return\\`: whether the connection succeeded:\n- \\[\\`NO\\_CONNECTION\\` = 0: not sent by the server, simulated by the client\n\nlibrary if the connection fails]\n\n- \\`AUTH\\_FAILED\\_UNKNOWN\\_USER\\` = 1: the given user does not exist\n- \\`AUTH\\_FAILED\\_BAD\\_PASSWORD\\` = 2: the given password is wrong\n- \\`AUTH\\_SUCCESS\\_NEW\\` = 3: a new connection was created\n- \\`int\\[3] version\\`: the version number of the server\n- \\[0] The major version number (if it's not 4, this document is probably\n\ninaccurate)\n\n- \\[1] The minor version number (changes when save compatibility breaks)\n- \\[2] The patchlevel version number (changes when a release is made that\n\ndoes not break save compatibility)\n\nTODO: What happens if this command is sent when a connection already exists?\n\n### register\n\nLike \\`auth\\`, except it requires a nonexistent rather than existing username, and will create an account. This cannot re-establish an existing connection, for obvious reasons.\n\nCommand arguments:\n\n- \\`string username\\`: the username for the new account\n- \\`string password\\`: the password to register the account with\n- \\`string email\\`: (optional) an email address to store in the database; the\n\nserver admin can use this for password reset requests, etc.\n\nResponse arguments: same as \\`auth\\`, except \\`AUTH\\_FAILED\\_UNKNOWN\\_USER\\` means that the user account already exists.\n\n### describe\\_pos\n\nReturns farlook information for a given map square. This command may only be meaningfully sent while a game is running, and corresponds to the \\`nh\\_describe\\_pos\\` API call in libnethack. If the game is not running, all string values in the response will be the null string, \\`objcount\\` will be -1, and \\`in\\` will be false.\n\nCommand arguments:\n\n- \\`boolean is\\_in\\`: Whether to return the \\`in\\` element in the response\n- \\`coordinate x\\`: x coordinate of the map square to farlook\n- \\`coordinate y\\`: y coordinate of the map square to farlook\n\nResponse arguments:\n\n- \\`string bgdesc\\`: a description of the background\n- \\`boolean feature\\_described\\`: true if \\`bgdesc\\` is redundant to other fields\n- \\`string effectdesc\\`: a description of an effect\n- \\`boolean in\\`: true if an object is \"in\" rather than \"on\" the background\n- \\`string invisdesc\\`: a description of a remembered invisible monster\n- \\`string mondesc\\`: a description of a monster\n- \\`int objcount\\`: the number of object stacks on the square\n- \\`string objdesc\\`: a description of an object\n- \\`string trapdesc\\`: a description of a trap\n\nStrings in the response are zero-length if they would describe something that does not exist on the map square given by (x,y) (or that the character is unaware of), e.g. \\`trapdesc\\` for a square with no known trap. Otherwise, they describe the map square given by (x,y).\n\n### exit\\_game\n\nCauses the game to stop running, either via saving/suspending it, or via quitting it. \\`EXIT\\_SAVE\\` is equivalent to just dropping the connection in terms of its user-visible effect, but is kinder on server resources than dropping the connection would be. This command can be sent if there is no running game, but does nothing but return true in that situation. It corresponds to the \\`nh\\_exit\\_game\\` API call in libnethack. 178 If the game is running, this API call will typically return via \\`play\\_game\\` response (see the documentation for \\`play\\_game\\`) rather than directly (especially if it needs to get out of multiple nested contexts; it can be sent at any time while the game is running and there is some server request pending that the client could respond to). Obviously, it must return directly if there is no game running.\n\nCommand arguments:\n\n- \\`enum nh\\_exit\\_types exit\\_type\\`: what sort of exit to perform\n- \\`EXIT\\_SAVE\\` = 0: detach from the game and drop the connection; the\n\nsave file remains intact\n\n- \\`EXIT\\_QUIT\\` = 1: delete the game's save file and enter the game over\n\nsequence\n\n- \\`EXIT\\_PANIC\\` = 2: like \\`EXIT\\_SAVE\\`, but record that there was a\n\nproblem in the panic log\n\n- \\`EXIT\\_RESTART\\` = 3: like \\`EXIT\\_SAVE\\`, but the client will be told to\n\nimmediately reload the game (\\`CLIENT\\_RESTART\\`); clients use this to change between play, watch and replay modes\n\nResponse arguments:\n\n- \\`boolean return\\`: true if the game exited (whether due to a save, to a\n\nquit, or to the process being panicked), or if no game was running; false if the user cancelled the exit; true is rarely going to be observable except in error conditions or if no game is running.\n\n### get\\_commands\n\nThis command lists which commands exist and can be used in a \\`request\\_command\\` response, and corresponds to the \\`nh\\_get\\_commands\\` API call in libnethack.\n\nIn addition to information about the commands, it also returns default keybindings for them; clients can choose to respect or ignore these. This means that minor changes to the game's commands can be made without needing to alter clients.\n\nThis command can be used even when the game is not running; whether there is a running game or not, it will return all commands that can be used by the user, including debug mode commands. The client may want to hide debug mode commands from non-debug-mode games.\n\nCommand arguments: none\n\nResponse arguments:\n\n- \\`struct nh\\_cmd\\_desc\\[] cmdlist\\`: a list of the commands that exist:\n- \\`string name\\`: the name of the command (\\`command\\` in\n\n\\`request\\_command\\`);\n\n- \\`string desc\\`: a human-readable description of the command;\n- \\`unsigned flags\\`: information about the command, a bitmask of:\n- \\`CMD\\_ARG\\_DIR\\` = 1: the command can accept a direction argument;\n- \\`CMD\\_ARG\\_POS\\` = 2: the command can accept a position argument;\n- \\`CMD\\_ARG\\_OBJ\\` = 4: the command can accept an inventory object\n\nargument;\n\n- \\`CMD\\_ARG\\_STR\\` = 8: the command can accept a string argument;\n- \\`CMD\\_ARG\\_SPELL\\` = 16: the command can accept a spell argument;\n- \\`CMD\\_ARG\\_LIMIT\\` = 32: the command can accept a numeric argument\n\nthat specifies a reduced maximum for things like multishot or item stack size;\n\n- \\`CMD\\_EXT\\` = 1024: it is recommended that by default, this command\n\nshould be available as an extended command (via \\`#\\`);\n\n- \\`CMD\\_MOVE\\` = 2048: this is a movement command (and thus it is not\n\nunreasonable to be able to keybind to individual direction arguments to this command);\n\n- \\`CMD\\_HELP\\` = 4096: it is recommended that by default, this command\n\nshould be available via the help menu on \\`?\\`;\n\n- \\`CMD\\_NOTIME\\` = 8192: this command makes no changes to the\n\ngamestate, and thus can be used while watching or replaying a game;\n\n- \\`CMD\\_DEBUG\\` = 16384: this command is only available in debug mode;\n- \\`CMD\\_INTERNAL\\` = 32768: although commands with this flag set exist,\n\nthey are never returned from \\`nh\\_get\\_commands\\`.\n\n- \\`charcode def\\`: a default keybinding for this command (ASCII,\n\ncontrol-ASCII, meta-ASCII);\n\n- \\`charcode alt\\`: another, lower-priority, default keybinding for this\n\ncommand\n\n### get\\_obj\\_commands\n\nRequests a list of reasonable commands for use with a specified inventory item. (TODO: This is missing a check on whether the game is running.) This command is intended for use in response to an item being selected from the inventory menu, itemactions-style; it will give more specific explanations of what the commands do than \\`get\\_commands\\` does, because it is specialised to one object.\n\nCommand arguments:\n\n- \\`charcode invlet\\`: The inventory letter of the item to get commands for.\n\nResponse arguments: the same as \\`get\\_commands\\`.\n\nNote that unlike \\`get\\_commands\\`, which can recommend control- or meta-modified keys for its keybindings, \\`get\\_obj\\_commands\\` favours capital and lowercase letters only, so that its keybindings can easily be placed in a menu. This means that the recommended keybindings may not be identical to those produced via \\`get\\_commands\\`.\n\n### get\\_drawing\\_info\n\nRequests information about what drawable entities exist in the game: most code that communicates display information will return indexes into lists, and this function returns those lists. It contains both API names, and default ASCII representations (these need to be available to the server anyway so that it can produce dumplogs, so it may as well communicate these to the client in case it wants to use them). It is reasonable to call this even when the game is not running. This command corresponds to the \\`nh\\_get\\_drawing\\_info\\` API call in libnethack.\n\nTODO: Sending an array and its length separately over JSON is always a bad idea; what if they don't match? There's currently a \\`int num\\_\\*\\` for each \\`struct nh\\_symdef\\[]\\` in the response arguments, but I removed the documentation for them in preparation for fixing this rather major issue.\n\nCommand arguments: none\n\nResponse arguments:\n\n- \\`int feature\\_offset\\`:\n- \\`struct nh\\_symdef\\[] bgelements\\`: Backgrounds.\n- \\`struct nh\\_symdef\\[] effects\\`: Effects.\n- \\`struct nh\\_symdef\\[] explsyms\\`: Explosion shape/locations.\n- \\`struct nh\\_symdef\\[] expltypes\\`: Explosion appearances.\n- \\`struct nh\\_symdef\\[] invis\\`: Memory of invisible monsters.\n- \\`struct nh\\_symdef\\[] monsters\\`: Monsters.\n- \\`struct nh\\_symdef\\[] objects\\`: Items.\n- \\`struct nh\\_symdef\\[] swallowsyms\\`: The inside of an engulfing monster.\n- \\`struct nh\\_symdef\\[] traps\\`: Traps.\n- \\`struct nh\\_symdef\\[] warnings\\`: Warning symbols.\n- \\`struct nh\\_symdef\\[] zapsyms\\`: Zap shape/locations.\n- \\`struct nh\\_symdef\\[] zaptypes\\`: Zap appearances.\n\nwhere \\`struct nh\\_symdef\\[]\\` is defined as follows (and sent as an array, with its fields in this order):\n\n- \\`string name\\`: The API name of a drawable entity. Explosions and zaps\n\nhave two API names; one for the shape and location within the shape (the \\`\\*syms\\` list), one for the appearance (the \\`\\*types\\` list). Other drawable entities have just the one API name. Clients should feel free to hardcode overrides for specific API names. (Note that an API name is not always the same as a tile name; use the functions in tilesequence.c if you need to convert, e.g. to discover a tile number for a given API name.)\n\n- \\`charcode character\\`: A recommended ASCII representation of this drawable\n\nentity. Clients can use this as a fallback if they encounter an unrecognised API name.\n\n- \\`colourcode colour\\`: A recommended color for this drawable entity.\n\nWhen using the recommended ASCII representations, for explosions and zaps (which have two API names), the character should be taken from the shape/location field, and the color from the appearance field.\n\n### get\\_options\n\nCurrently under revision. TODO: When we decide what the API call actually does, document it properly.\n\nCommand arguments:\n\n- \\`enum nh\\_option\\_list list\\`: what sort of options to list\n- (values, semantics under revision)\n\nResponse arguments:\n\n- \\`struct nh\\_option\\_desc\\[] options\\`:\n- \\`string name\\`: short name of the option\n- \\`string helptxt\\`: long desription of the option\n- \\`enum nh\\_opttype type\\`: what type of values the option takes:\n- \\`OPTTYPE\\_BOOL\\` = 0: booleans;\n- \\`OPTTYPE\\_INT\\` = 1: integers;\n- \\`OPTTYPE\\_ENUM\\` = 2: a fixed list of possibilities;\n- \\`OPTTYPE\\_STRING\\` = 3: strings;\n- \\`OPTTYPE\\_AUTOPICKUP\\_RULES\\` = 4: lists of autopickup rules\n- \\`union nh\\_optvalue value\\`: the value (or default value? under revision)\n\nof the option\n\n- \\`union \\_ desc\\`: the legal values for the option:\n- \\`nil\\` for \\`OPTTYPE\\_BOOL\\`;\n- \\`struct {int min, int max}\\` for \\`OPTTYPE\\_INT\\`;\n- list of strings for \\`OPTTYPE\\_ENUM\\`;\n- an integer for strings (reflecting the maximum length);\n- list of strings for autopickup rules (TODO: figure out what format\n\nthese are in)\n\nAn autopickup rule has the following structure:\n\n- \\`enum autopickup action\\`: what action to take upon encountering this item:\n- \\`AP\\_GRAB\\` = 0: pick it up regardless of \\`pickup\\_types\\`;\n- \\`AP\\_LEAVE\\` = 1: leave it on the ground regardless of \\`pickup\\_types\\`.\n- \\`enum nh\\_bucstatus buc\\`: a filter against beatitude:\n- \\`B\\_UNKNOWN\\` = 0: match only items with unknown beatitude;\n- \\`B\\_BLESSED\\` = 1: match only blessed items;\n- \\`B\\_UNCURSED\\` = 2: match only non-blessed non-cursed items;\n- \\`B\\_CURSED\\` = 3: match only cursed items;\n- \\`B\\_DONT\\_CARE\\` = 4: do not filter items based on beatitude\n- \\`int oclass\\`: an object class of items to match\n- \\`string pattern\\`: a regular expression that matches items\n\n### set\\_option\n\nChanges a (non-interface) option on the server. This corresponds to the \\`nh\\_set\\_option\\` API call in libnethack. TODO: This command should only be runnable if a followup to \\`request\\_command\\` is legal, except possibly for setting birth options; this needs more thought.\n\nCommand arguments:\n\n- \\`boolean isstr\\`: if true, allows sending the option value as a string\n\nregardless of the option's actual type (the server will parse it into an appropriate value for the option); if false, the client has already parsed the option\n\n- \\`string name\\`: the name of the option to set\n- \\`union nh\\_optvalue value\\`: the value for the option, in a format depending\n\non the option's type and whether \\`isstr\\` is set (a string, integer, or list of autopickup rules).\n\nResponse arguments:\n\n- \\`struct nh\\_option\\_desc option\\`: TODO: work out if we need this and what\n\nits semantics are\n\n- \\`int return\\`: an integer treated as a boolean; nonzero if the option value\n\ngiven was reasonable, zero if it was unreasonable (and thus the server did not try to set it)\n\n### get\\_roles\n\nRequests information on what roles, races, genders, and alignments exist in the game, and what combinations of them are legal. This command corresponds to the \\`nh\\_get\\_roles\\` API call in libnethack.\n\nTODO: This API is inherently prone to buffer length mismatches. There should not be separate \\`num\\_\\` fields.\n\nCommand arguments: none\n\nResponse arguments:\n\n- \\`string\\[] alignnames\\`: the list of alignments that exist\n- \\`string\\[] gendnames\\`: the list of genders that exist\n- \\`string\\[] racenames\\`: the list of races that exist\n- \\`string\\[] rolenames\\_f\\`: the list of roles that exist, using female names\n\nsuch as \"Cavewoman\" (TODO: if a role has no separate female name, are these a copy of the male name, or NULL?)\n\n- \\`string\\[] rolenames\\_m\\`: the list of roles that exit, using male names such\n\nas \"Caveman\"\n\n- \\`int\\[] matrix\\`: Information on which combinations of role, race, gender,\n\nand alignment are legal; each possible combination (legal or illegal) has an entry in the list, at an index that can be calculated via the macro \\`nh\\_cm\\_idx()\\`\n\n- \\`int num\\_aligns\\`: length of \\`alignnames\\`\n- \\`int num\\_genders\\`: length of \\`gendnames\\`\n- \\`int num\\_races\\`: length of \\`racenames\\`\n- \\`int num\\_roles\\`: length of \\`rolenames\\_\\[f,m]\\`\n\n### get\\_topten\n\nRequests entries from the high score table.\n\nCommand arguments:\n\n- \\`int around\\`: if there has been at least one game previously on this\n\nconnection (even if it was re-established), and the most recent such game has since reached game over (death/quit/escape/ascension), and \\`player\\` was playing, list this many games near that game on the high score table; otherwise this value is ignored\n\n- \\`boolean own\\`: whether to list all games of the given \\`player\\` name or not\n- \\`string player\\`: the player name for \\`own\\` and \\`around\\`; a null string\n\nwill automatically pick the appropriate player for the most recent game for use with \\`around\\`\n\n- \\`int top\\`: list this many games at the top of the table\n\nResponse arguments:\n\n- \\`string msg\\`: an appropriate heading for the high score table; if \\`around\\`\n\nmatches, this will talk about the most recent game (e.g. telling the player what position on the list they are, or explaining that wizard mode games are not eligible for the high score table); otherwise, this will be an error message (if any), or else the null string\n\n- \\`struct nh\\_topten\\_entry\\[] toplist\\`: the requested high score table\n- \\`int birthdate\\`: seconds since the epoch that the game started (TODO:\n\nY2038 issue!)\n\n- \\`string death\\`: the reason that the player died\n- \\`int deathdate\\`: seconds since the epoch that the game ended\n- \\`int deaths\\`: the number of times the player lifesaved, plus one if they\n\neventually died permanently\n\n- \\`int end\\_how\\`: an internal code for the basic cause of death (drowning,\n\nstarving, etc.); this is currently not in any publicly accessible header (TODO: which is probably a mistake), but is in libnethack's hack.h\n\n- \\`string entrytxt\\`: a formatted representation of this high score entry\n\nthat can be output directly in a fixed-width font\n\n- \\`boolean highlight\\`: true if this entry is the one that \\`around\\` is\n\nmeasuring around\n\n- \\`int hp\\`: the character's current hitpoints at death\n- \\`int maxhp\\`: the character's maximum hitpoints at death\n- \\`int maxlvl\\`: the deepest dungeon level the character reached\n- \\`int moves\\`: the number of turns the charater spent\n- \\`string name\\`: the name of the character\n- \\`string plalign\\`: the character's alignment\n- \\`string plgend\\`: the character's gender\n- \\`string plrace\\`: the character's race\n- \\`string plrole\\`: the character's role\n- \\`int points\\`: the number of points the game scored\n- \\`int rank\\`: the position of this game within the high score table (1 for\n\nfirst place, 2 for second place, etc.); can be 0 or negative for games that are disqualified from the high score table (due to, for instance, playing in debug mode)\n\n- \\`int ver\\_major\\`: the major version number of the engine this game was\n\nplayed on\n\n- \\`int ver\\_minor\\`: the minor version number of the engine this game was\n\nplayed on\n\n- \\`int patchlevel\\`: the patchlevel version number of the engine this game\n\nwas played on\n\n### list\\_games\n\nLists current and/or completed games on the server.\n\nTODO: what format are plgend, etc., in? Abbreviation? Full name?\n\nCommand arguments:\n\n- \\`boolean completed\\`: list only completed games if true, only current games\n\nif false\n\n- \\`int limit\\`: the maximum number of games to list\n- \\`boolean show\\_all\\`: if true, list games for which user who authenticated\n\nthis connection has read but not write access; if false, only list games to which the user has write access\n\nResponse arguments:\n\n- \\`struct nhnet\\_game\\[] games\\`: the information about the games selected by\n\nthe arguments:\n\n- \\`int gameid\\`: a value that can be given to \\`play\\_game\\` to connect to\n\nthis game\n\n- \\`enum nh\\_game\\_modes playmode\\`: any special rules that might apply to\n\nthis game:\n\n- \\`MODE\\_NORMAL\\` = 0: there is nothing special about this game;\n- \\`MODE\\_EXPLORE\\` = 1: this game is in non-scoring discovery mode;\n- \\`MODE\\_WIZARD\\` = 2: this game is in debug mode.\n- \\`string plname\\`: the name of this game's player\n- \\`string game\\_status\\`: a textual description of the current state of\n\nthe game (death reason for a completed game, location of the character in the dungeon for an incomplete game)\n\n- \\`string plalign\\`: the alignment of this game's character\n- \\`string plgend\\`: the gender of this game's character\n- \\`string plrace\\`: the race of this game's character\n- \\`string plrole\\`: the role of this game's character\n- \\`enum nh\\_log\\_status status\\`: the status of this game's save file:\n- \\`LS\\_SAVED\\` = 0: an ordinary save file, nobody playing/replaying\n- \\`LS\\_DONE\\` = 1: game over: quit, died, ascended, etc.\n- \\`LS\\_IN\\_PROGRESS\\` = 2: someone is playing/watching/replaying this\n\ngame\n\n- \\`LS\\_INVALID\\` = -1: something is badly wrong with the save file\n- \\`LS\\_CRASHED\\` = -2: the save file needs manual recovery\n\n### create\\_game\n\nCreates a new save file, that can subsequently be opened with \\`play\\_game\\` in order to start a new game. This mostly corresponds to the \\`nh\\_create\\_game\\` API call in libnethack (although it has a slightly different calling convention).\n\nCommand arguments:\n\n- \\`struct nh\\_option\\_desc\\[] options\\`: the options this game should initially\n\nbe created with (including game mode, character, and character name); any options omitted wil be filled in with defaults\n\nResponse arguments:\n\n- \\`int gameid\\`: The game ID, for use with future \\`play\\_game\\` calls; if this\n\nis -1, the game creation failed\n\n### play\\_game\n\nAttaches to a game, causing that game to be loaded if it isn't already. If the game allows read access for the user the connection is authenticated as, and the game is not completed, the user will be able to play, watch, and/or replay the game. Otherwise, the user will only be able to watch and replay the game. The \\`play\\_game\\` call does not respond until the gameplay is over (or immediately, if an error happens); rather, the server will respond with a number of followup commands to handle the user interaction side of the gameplay itself.\n\nThis corresponds to the \\`nh\\_play\\_game\\` API call in libnethack.\n\nNote that a \\`play\\_game\\` response may happen at any time after a unresponded \\`play\\_game\\` command, even if there are unresponded requests in the meantime. (This corresponds to a \\`longjmp\\` back to \\`nh\\_play\\_game\\` in the libnethack API.) The unresponded requests simply vanish, and the client should act as though they never happened (removing menus that they opened from the screen, forgetting messages, etc.). This can happen in a few different situations:\n\n- If the client requests a save or quit (via \\`exit\\_game\\`), perhaps while a\n\nprompt is open;\n\n- If something goes wrong and the server needs to rewind the save file\n\nmid-turn;\n\n- During network play, if the network connection breaks or times out on the\n\nserver, the client API code simulates this to transparently reconnect the connection, even though it isn't actually sent over the network.\n\nCommand arguments:\n\n- \\`int gameid\\`: A value returned from \\`list\\_games\\` or \\`create\\_game\\`\n\nrepresenting a game to attach to\n\n- \\`enum followmode followmode\\`: How to load the game:\n- \\`FM\\_PLAY\\` = 0: play the game\n- \\`FM\\_WATCH\\` = 1: watch a game (like playing, but read-only)\n- \\`FM\\_REPLAY\\` = 2: replay the game from the start (also read-only)\n- (\\`FM\\_RECOVERQUIT\\` = 3: go through the game over sequence of a completed\n\ngame again (leaving bones, xlogfile entries, etc.); this is disallowed in network play for security reasons, but exists in the local API)\n\nResponse arguments:\n\n- \\`enum nh\\_play\\_status return\\`: what happen in the attempt to restore the game:\n- \\`GAME\\_DETACHED\\` = 0: the game was restored successfully; eventually,\n\nthe client requested to stop playing, and the game still exists\n\n- \\`GAME\\_OVER\\` = 1: the game was restored successfully; eventually, the\n\ngame ended through the death of the character or some similarly permanent means; this return value is only sent to one process (the one that sent the input causing the game to end)\n\n- \\`GAME\\_ALREADY\\_OVER\\` = 2: the game was restored successfully, but\n\neither it had already ended (and thus was loaded in replay mode), or else it ended while attached but some other process sent the input that caused the game to end\n\n- \\`RESTART\\_PLAY\\` = 3: something happened that forced the server to jump\n\nback to \\`play\\_game\\`; the client should in most cases immediately call \\`play\\_game\\` with the same argument\n\n- \\`CLIENT\\_RESTART\\` = 4: ditto, but on the request of the client, which\n\ncan react to it how it likes\n\n- \\`REPLAY\\_FINISHED\\` = 5: the game is still going, but cannot continue in\n\nreplay mode because the end was reached; a client can reconnect in play or watch mode if it likes\n\n- \\`ERR\\_BAD\\_ARGS\\` = 6: the game did not start because the given game ID\n\ndoes not exist\n\n- \\`ERR\\_BAD\\_FILE\\` = 7: the game did not start because the given game ID\n\ncorresponds to a file on disk that cannot be read\n\n- \\`ERR\\_IN\\_PROGRESS\\` = 8: it is impossible to attach to the game due to\n\nlocking issues; on POSIXy OSes, this should only happen if the file is being recovered manually, but on some OSes this may happen if anyone else is currently playing the game\n\n- \\`ERR\\_RESTORE\\_FAILED\\` = 9: the game is completely corrupted and needs\n\nmanual recovery\n\n- \\`ERR\\_RECOVER\\_REFUSED\\` = 10: the game is partially corrupted, and the\n\nuser chose not to rewind it when prompted about whether to rewind it\n\n- (\\`ERR\\_NETWORK\\_ERROR\\` = 11: never sent over the network, but the\n\nclient library simulates this return value if it has to detach the game due to network issues and cannot subsequently re-attach it, thus clients using the client library may see it)\n\n### set\\_email\n\nChange the email address associated with the authenticated user. (This address is not used by the game, but is available to server admins in case they need to verify a user's identity, e.g. for a password reset request.)\n\nCommand arguments:\n\n- \\`string email\\`: the new email address\n\nResponse arguments:\n\n- \\`boolean return\\`: true if the email address change succeeded\n\n### set\\_password\n\nChange the password associated with the authenticated user. The same password will be required by future \\`auth\\` requests.\n\nCommand arguments:\n\n- \\`string password\\`: the new password (sent in plaintext, unless the\n\nconnection is encrypted some other way)\n\nResponse arguments:\n\n- \\`boolean return\\`: true if the password change succeeded\n\n### shutdown\n\nExits the server process responsible for dealing with this client process and closes the connection. (If there is an active game, the server will attempt to save it before exiting).\n\nCommand arguments: none\n\nResponse arguments:\n\n- \\`int return\\`: Always 1.\n\n## Server requests\n\nThese requests are sent by the server, expecting a response from the client. Normally they will only be sent as followups to a response from the client; the only exceptions are \\`server\\_error\\` and \\`server\\_cancel\\`, which can be sent at any time (except to interrupt the request half of a server request or response half of a server response, in which case they will be delayed until the server is done sending its current request/response).\n\n### server\\_cancel\n\nSending an \\`nh\\_play\\_game\\` response can be used by the server to retroactively wipe out the state of a connection, e.g. to handle save file recovery, or a mid-turn save. However, sometimes the server only wants to countermand one request; the typical example is when watching a game which opened a menu, and then the player being watched makes a selection from the menu (in which case the server needs to, effectively, undo the opening of the menu).\n\nIn this case, the server will send a \\`server\\_cancel\\` request. The client should treat any response-requiring server request it is currently processing, or the next such request if it is not currently processing such a request, as being cancelled by the server, and should thus give the appropriate \"cancelled by server\" response to that request.\n\nIn the local API (rather than the network API), in which \\`libnethack\\` links directly against an interface, the \\`server\\_cancel\\` request can be sent at absolutely any time at all; this includes such inconvenient times as \"in the middle of allocating memory\", or \"in the middle of another request\"; this is \"async-signal\" timing. Doing this over the network would be impossible to parse (the closest equivalent would be TCP urgent data, which can interrupt an existing data stream in such a way that both can be distinguishd, but is limited to one byte and thus hard to fit JSON in). Instead, the network API will delay making a \\`server\\_cancel\\` request until it has finished sending any current request, if possible. Clients nonetheless need to make arrangements to handle this request in the middle of accepting input from the user (which is its entire purpose); for instance, if blocking on the keyboard because their interface wants a keypress in order to handle whatever input request is being made at the time, they will need to block on a network socket at the same time in order to be able to handle a possible cancel.\n\nBe aware of possible race conditions: if the client finishes processing a request just as the server tries to cancel it, then the server will end up accidentally cancelling its next request instead. This is why \"client cancelled\" and \"server cancelled\" responses look different: so if the server spuriously cancels a request, it can just send the request again, rather than interpreting the client as having cancelled the request intentionally.\n\nNo response to the \\`server\\_cancel\\` call should be sent; the server has no use for it, and is not equipped for arbitrarily inconveniently timed responses.\n\nRequest arguments: none\n\nResponse arguments: no response\n\n### request\\_command\n\nThis request is sent by the server when the player's character is able to send a new command. The client should respond with a game command, possibly following up with network API command in order to help decide which command to respond with.\n\nRequest arguments:\n\n- \\`boolean debug\\`: whether debug-mode commands are a reasonable response to\n\nthe prompt\n\n- \\`boolean completed\\`: false if the client is in the middle of a multi-turn\n\ncommand (whether it was interrupted by a monster or the like, or whether the server's just giving the client the chance to interrupt); true if the previous command completed or there was no previous command\n\n- \\`boolean interrupted\\`: true if the character is aware of danger that might\n\ncause a player to want to abort their current action (or not repeat a repeated action); this is independent of \\`completed\\`\n\nResponse arguments:\n\n- \\`string command\\`: what the player wants to tell their character to do;\n\nthis should be a string returned by \\`get\\_commands\\`, or else one of the following internal-use commands:\n\n- \\`\"welcome\"\\`: Display the \"Welcome \\[back] to NetHack!\" message; this\n\nshould be sent spontaneously by the client as the first command if the game was restored due to player action (rather than due to a network timeout or the like), rather than in response to user input\n\n- \\`\"repeat\"\\`: Continue a multiple-turn command, or repeat the last\n\ncommand in other circumstances; clients will typically want to send this without further user interaction if \\`completed\\` and \\`interrupted\\` are both false, but may allow the user to override this if they wish\n\n- \\`\"servercancel\"\\`: Sent as a response if the server cancelled the API\n\ncall using a \\`server\\_cancel\\` call\n\n- \\`struct nh\\_cmd\\_arg arg\\`: a set of arguments to the command (any subset of\n\nthe arguments that \\`nh\\_get\\_command\\` specified were acceptable)\n\n- \\`enum nh\\_direction d\\`: \\[optional] a direction argument\n- \\`DIR\\_W\\` = 0: west (\\`h\\`, \\`4\\`)\n- \\`DIR\\_NW\\` = 1: northwest (\\`y\\`, \\`7\\`)\n- \\`DIR\\_N\\` = 2: north (\\`k\\`, \\`8\\`)\n- \\`DIR\\_NE\\` = 3: northeast (\\`u\\`, \\`9\\`)\n- \\`DIR\\_E\\` = 4: east (\\`l\\`, \\`6\\`)\n- \\`DIR\\_SE\\` = 5: southeast (\\`n\\`, \\`3\\`)\n- \\`DIR\\_S\\` = 6: south (\\`j\\`, \\`2\\`)\n- \\`DIR\\_SW\\` = 7: southwest (\\`b\\`, \\`1\\`)\n- \\`DIR\\_UP\\` = 8: up (\\`<\\`)\n- \\`DIR\\_DOWN\\` = 9: down (\\`>\\`)\n- \\`DIR\\_SELF\\` = 10: at self (\\`.\\` or \\`s\\`)\n- \\`charcode invlet\\`: \\[optional] an inventory letter\n- \\`coordinate x\\`: \\[optional] an x coordinate\n- \\`coordinate y\\`: \\[optional] a y coordinate\n- \\`string str\\`: \\[optional] a string\n- \\`charcode spelllet\\`: \\[optional] a spell letter\n- \\`int limit\\`: \\[optional] the amount to limit the command to\n\n### display\\_menu\n\nRequests the client to display a menu to the user (either simply for display, or to allow them to make a selection), until the user makes a selection or the server cancels the request using a \\`play\\_game\\` response.\n\nRequest arguments:\n\n- \\`enum nh\\_pick\\_type how\\`: a specification of how many items the user can\n\nchoose from the menu:\n\n- \\`PICK\\_NONE\\` = 0: the user cannot select items, the menu is purely used\n\nto present information to the user;\n\n- \\`PICK\\_ONE\\` = 1: the user can pick one item from the menu;\n- \\`PICK\\_ANY\\` = 2: the user can pick zero or more items from the menu\n- \\`struct nh\\_menuitem\\[] items\\`: the menu items:\n- \\`charcode accel\\`: a recommended accelerator for this menu entry\n- \\`string caption\\`: the text of the menu entry\n- \\`charcode group\\_accel\\`: a secondary recommended accelerator (which may\n\napply to more than one entry; if it does, a \\`PICK\\_ANY\\` menu should toggle all entries with the \\`group\\_accel\\` if the user presses it)\n\n- \\`int id\\`: a value to return in the \\`display\\_menu\\` response; if \\`id\\`\n\nand \\`accel\\` are both 0, then the item is unselectable\n\n- \\`enum nh\\_menuitem\\_role role\\`: what sort of entry this is:\n- \\`MI\\_TEXT\\`: a line of text that is logically grouped together even\n\nif it runs across multiple menu entries;\n\n- \\`MI\\_NORMAL\\`: a normal menu item;\n- \\`MI\\_HEADING\\`: a heading\n- \\`boolean selected\\`: whether this menu item should be selected by\n\ndefault (in a \\`PICK\\_ANY\\` menu, where choosing an item does not close the menu, choosing an item should toggle its selection state)\n\n- \\`enum placement\\_hint plhint\\`: a suggestion for a sensibleplcae on the\n\nscreen to place this menu, and styling for the menu (TODO: many of these are unimplemented in nhcurses):\n\n- \\`PLHINT\\_ANYWHERE\\` = 0: no suggested location;\n- \\`PLHINT\\_LEFT\\` = 1: towards the left side of the screen;\n- \\`PLHINT\\_RIGHT\\` = 2: towards the right side of the screen;\n- \\`PLHINT\\_URGENT\\` = 3: appropriate styling for an important message;\n- \\`PLHINT\\_INFO\\` = 4: appropriate styling for an informational message;\n- \\`PLHINT\\_ONELINER\\` = 5: in the message area;\n- \\`PLHINT\\_CONTAINER\\` = 6: an appropriate location for container\n\ncontents;\n\n- \\`PLHINT\\_INVENTORY\\` = 7: over the inventory area (if any)\n- \\`string title\\`: the title of the menu\n\nResponse arguments:\n\n- \\`int\\[] results\\`: a list of the \\`id\\` of all selected items after the menu\n\nwas closed; this should be empty for \\`PICK\\_NONE\\` or if the menu was cancelled via server or client, empty or a single element for \\`PICK\\_ONE\\`, and any subset of elements for \\`PICK\\_ANY\\`,\n\n- \\`enum nh\\_client\\_response howclosed\\`: an explanation of how the menu was\n\nclosed:\n\n- \\`NHCR\\_ACCEPTED\\` = 0: pressing Return (or similar), scrolling off the\n\nend, or (for \\`PICK\\_ONE\\`) selecting an item;\n\n- \\`NHCR\\_CLIENT\\_CANCEL\\` = 1: pressing Escape (or similar)\n- \\`NHCR\\_SERVER\\_CANCEL\\` = 5: by a \\`server\\_cancel\\` request\n\n### display\\_objects\n\nA variant of \\`display\\_menu\\` specialised for inventory menus. It provides extra information and allows the user to specify partial stacks of items in addition to full stacks.\n\nRequest arguments: same as \\`display\\_menu\\`, except for \\`items\\`:\n\n- \\`struct nh\\_objitem\\[] items\\`: the menu items (sent as an array, not an\n\nobject, with elements in the order shown here):\n\n- \\`string caption\\`: as in \\`display\\_menu\\`\n- \\`int id\\`: as in \\`display\\_menu\\`\n- \\`enum nh\\_menuitem\\_role role\\`: as in \\`display\\_menu\\`\n- \\`int count\\`: the number of objects in the stack\n- \\`int otype\\`: the obfuscated object type; I think this is an index into\n\nthe \\`objects\\[]\\` returned from \\`get\\_drawing\\_info\\`, but I'm not sure\n\n- \\`int oclass\\`: the object class (are these listed anywhere public?)\n- \\`int weight\\`: the object's weight, negative numbers means unknown\n- \\`enum nh\\_bucstatus buc\\`: the object's beatitude:\n- \\`B\\_UNKNOWN\\` = 0: unknown beatitude;\n- \\`B\\_BLESSED\\` = 1: blessed;\n- \\`B\\_UNCURSED\\` = 2: neither blessed nor cursed;\n- \\`B\\_CURSED\\` = 3: cursed\n- \\`charcode accel\\`: as in \\`display\\_menu\\`\n- \\`charcode group\\_accel\\`: as in \\`display\\_menu\\`\n- \\`boolean worn\\`: true if the object is equipped\n\nResponse arguments:\n\n- \\`struct nh\\_objresult\\[] pick\\_list\\`: a list of all selected items after the\n\nmenu ws closed, as with \\`display\\_menu\\`, but with more information:\n\n- \\`int id\\`: the \\`id\\` specified for this item in the request\n- \\`int count\\`: the size of a partial stack specified for this item, or\n\n-1 to select the entire stack; should be -1, or between 1 and the stack size minus 1\n\n- \\`enum nh\\_client\\_response howclosed\\`: as in \\`display\\_menu\\`\n\n### getdir\n\nRequests a direction from the user (can be cancelled by the user, or the server via a \\`play\\_game\\` response).\n\nRequest arguments:\n\n- \\`string query\\`: a message to print along with the direction request (the\n\ngeneric message is along the lines of \"In which direction?\", but the message is often more specific, similar to \"Zap your wand in which direction?\").\n\n- \\`boolean restricted\\`: if true, the client should act as though diagonal\n\ndirections do not exist for the purpose of its help text (applies when the player is polymorphed into a grid bug)\n\nResponse arguments:\n\n- \\`enum nh\\_direction return\\`: The selected direction:\n- \\`DIR\\_W\\` = 0: west (\\`h\\`, \\`4\\`)\n- \\`DIR\\_NW\\` = 1: northwest (\\`y\\`, \\`7\\`)\n- \\`DIR\\_N\\` = 2: north (\\`k\\`, \\`8\\`)\n- \\`DIR\\_NE\\` = 3: northeast (\\`u\\`, \\`9\\`)\n- \\`DIR\\_E\\` = 4: east (\\`l\\`, \\`6\\`)\n- \\`DIR\\_SE\\` = 5: southeast (\\`n\\`, \\`3\\`)\n- \\`DIR\\_S\\` = 6: south (\\`j\\`, \\`2\\`)\n- \\`DIR\\_SW\\` = 7: southwest (\\`b\\`, \\`1\\`)\n- \\`DIR\\_UP\\` = 8: up (\\`<\\`)\n- \\`DIR\\_DOWN\\` = 9: down (\\`>\\`)\n- \\`DIR\\_SELF\\` = 10: at self (\\`.\\` or \\`s\\`)\n- \\`DIR\\_NONE\\` = -1: the user cancelled the prompt\n- \\`DIR\\_SERVERCANCEL\\` = -2: the server cancelled the prompt\n\n### getline\n\nRequests a line of input from the user (can be cancelled by the user, or the server via a \\`play\\_game\\` response).\n\nRequest arguments:\n\n- \\`string query\\`: The prompt to display along with the request for a line.\n\nResponse arguments:\n\n- \\`string line\\`: The line of input from the user. Is the null string if the\n\nnull string was entered, a single ESC character (hex 1B) if the user cancelled the prompt, a single ASCII 28 character (hex 1C) if the server cancelled the prompt, or otherwise the user's input.\n\n### getpos\n\nRequests a map location from the user (can be cancelled by the user, or the server via a \\`play\\_game\\` response).\n\nRequest arguments:\n\n- \\`boolean force\\`: if true, the client should make it difficult for the user\n\nto cancel the prompt (TODO: the idea behind thies option is bad)\n\n- \\`string goal\\`: a description of what the user is supposd to select\n- \\`coordinate x\\`: the x coordinate to originally place the cursor at\n- \\`coordinate y\\`: the y coordinate to originally place the cursor at\n\nResponse arguments:\n\n- \\`enum nh\\_client\\_response return\\`: information on how the prompt was closed:\n- \\`NHCR\\_ACCEPTED\\` = 0: the user accepted the location using the most\n\nordinary input (usually \\`.\\`);\n\n- \\`NHCR\\_CLIENT\\_CANCEL\\` = 1: the user cancelled the location prompt\n\n(e.g. via ESC);\n\n- \\`NHCR\\_CONTINUE\\` = 2: the user accepted the location, requesting to\n\ncontinue choosing locations (normally accomplished via \\`,\\`);\n\n- \\`NHCR\\_MOREINFO\\` = 3: the user accepted the location, requesting more\n\ninformation about it (normally accomplished via \\`:\\`);\n\n- \\`NHCR\\_MOREINFO\\_CONTINUE\\` = 4: a combination of the two previous cases\n\n(normally accomplished via \\`;\\`);\n\n- \\`NHCR\\_SERVER\\_CANCEL\\` = 5: the server cancelled the prompt.\n- \\`coordinate x\\`: the x coordinate chosen by the user\n- \\`coordinate y\\`: the y coordinate chosen by the user\n\n### query\\_key\n\nInputs one ASCII code from the user, potentially with a repeat count beforehand. This is used for inventory queries, and in a few other cases. As always, can be cancelled by the user or the server.\n\nRequest arguments:\n\n- \\`boolean allow\\_count\\`: whether to allow a repeat count\n- \\`enum nh\\_query\\_key\\_flags flags\\`: information about the reason for the\n\nquery:\n\n- \\`NQKF\\_INVENTORY\\_ITEM\\` = 0: an item from inventory\n- \\`NQKF\\_INVENTORY\\_ITEM\\_NULLABLE\\` = 1: an item from inventory or \"-\" to\n\nmean bare hands, no item, etc.\n\n- \\`NQKF\\_INVENTORY\\_OR\\_FLOOR\\` = 2: an item from inventory or \",\" to mean an\n\nitem on the floor\n\n- \\`NQKF\\_SYMBOL\\` = 3: an object or monster symbol\n- \\`NQKF\\_LETTER\\_REASSIGNMENT\\` = 4: a new inventory or spell letter\n- \\`string query\\`: what prompt to display to the user\n\nResponse arguments:\n\n- \\`int count\\`: the repeat count, -1 if none was given; this is supplied\n\neven if \\`allow\\_count\\` is false, but is always -1 in that case and should be ignored\n\n- \\`charcode return\\`: the key the user pressed; this is ESC if cancelled by\n\nthe user, ASCII 28 if cancelled by the server\n\n### yn\n\nRequests the user to choose from a short list of choices represented by ASCII characters. As always, can be cancelled by the user or the server.\n\nRequest arguments:\n\n- \\`string query\\`: the prompt to print to the user\n- \\`string set\\`: a list of appropriate responses; if ESC is included in the\n\nlist, it does not mean that ESC is an appropriate response, but rather, it means that all responses after the ESC should be hidden from the user\n\n- \\`charcode def\\`: the default value to return in the case of a user cancel\n\n(this will be shown to the user in many interfaces)\n\nResponse arguments:\n\n- \\`charcode return\\`: the choice the user chose; this is \\`def\\` if cancelled\n\nby the user, ASCII 28 if cancelled by the server\n\n### load\\_progress\n\nSent by the server periodically during time-consuming background operations in order to prevent the connection dropping. This will never have a display list attached.\n\nRequest arguments:\n\n- \\`int progress\\`: a number from 0 to 10000, proportional to the estimated\n\nlength of the background operation\n\nResponse arguments: no response is sent for this message\n\n### server\\_error\n\nCalled by the server if something goes unrecoverably wrong. The server closes the connection immediately after sending this, so sending a response is futile and not particularly useful. (For the same sort of message directed in the opposite direction, see \\`exit\\_game\\`.)\n\nRequest arguments:\n\n- \\`boolean error\\`: true if the error is caused by something that the client\n\ndid, false if the error is internal to the server\n\n- \\`string message\\`: a description of what went wrong, which can be displayed\n\nto the user\n\nNo response.\n\n## Display elements\n\nAny message sent by the server, whether as a request or a response, might have a \\`display\\` element attached, which specifies updates to the map. The exceptions are \\`auth\\`, \\`register\\`, and \\`cancel\\_server\\_request\\`, which never carry map data. The \\`display\\` element is an array of elements to draw; each element can be one of the below types.\n\n### delay\\_output\n\nSpecifies that the client should wait for a short time at this point before doing any further rendering.\n\nArguments: \\`nil\\`.\n\n### display\\_buffer\n\nSpecifies that the client should display text to the user. (The text may be quite long, and should be word-wrapped and tab-expanded.)\n\nArguments: an object:\n\n- \\`string buf\\`: the text to display\n- \\`boolean trymove\\`: appears to be unused\n\n### level\\_changed\n\nSpecifies that the client should change its level display mode.\n\nTODO: make this an enum.\n\nArguments: an integer:\n\n- \\`LDM\\_DEFAULT\\` = 0: normal display;\n- \\`LDM\\_HELL\\` = 1: display appropriate for Gehennom;\n- \\`LDM\\_QUEST\\` = 2: display appropriate for the Quest;\n- \\`LDM\\_MINES\\` = 3: display appropriate for the Mines;\n- \\`LDM\\_SOKOBAN\\` = 4: display appropriate for Sokoban;\n- \\`LDM\\_ROGUE\\` = 5: display appropriate for the Rogue level;\n- \\`LDM\\_KNOX\\` = 6: display appropriate for Fort Ludios\n\n### list\\_items\n\nSpecifies a list of items in inventory or on the floor.\n\nTODO: The API of this is vulnerable to length mismatches.\n\nArguments: an object:\n\n- \\`int icount\\`: length of \\`items\\`\n- \\`boolean invent\\`: true means that this list is the player's inventory;\n\nfalse means that this list is the list of items on the ground\n\n- \\`struct nh\\_objitem\\[] items\\`: the list of items about which the client is\n\nbeing informed\n\n### outrip\n\nShows an appropriate message to reflect character death (and similar game-over situations like ascension).\n\nTODO: The API of this is vulnerable to length mismatches.\n\nArguments: an object:\n\n- \\`int gold\\`: amount of gold upon death\n- \\`int how\\`: as \\`end\\_how\\` in \\`get\\_topten\\`\n- \\`int icount\\`: length of \\`items\\`\n- \\`struct nh\\_menuitem\\[] items\\`: list of messages to print; only the\n\n\\`caption\\` field is used. TODO: There has to be a better API for this!\n\n- \\`string killbuf\\`: the cause of the game over\n- \\`string name\\`: the name of the character whose game ended\n- \\`boolean tombstone\\`: true to request the drawing of a tombstone graphic;\n\nfalse presents the information entirely as text\n\n- \\`int year\\`: a year to draw on the tombstone\n\n### pause\n\nWait for user input in order to give the user a chance to read messages or look at the map.\n\nTODO: This has a pretty weird interaction with server cancel requests. It should probably be made a server request, not a display element.\n\nArguments: an \\`enum nh\\_pause\\_reason\\`:\n\n- \\`P\\_MESSAGE\\` = 0: give the user a chance to read the message area\n- \\`P\\_MAP\\` = 1: give the user a chance to look at the map\n\n### print\\_message\n\nPrint a message in the message area.\n\nTODO: This API is badly designed and has caused several bugs.\n\nArguments: an object:\n\n- \\`string msg\\`: the message to print\n- \\`int turn\\`: the turn on which the message was sent\n\n### print\\_message\\_nonblocking\n\nPrint a message in the message area. This message is not important enough to ensure that the user sees it, and the client should aim to prevent this forcing a --More-- or similar.\n\nArguments: as print\\_message\n\n### raw\\_print\n\nDisplay a message to the user, attempting to bypass the standard rendering and just displaying the message directly on a console, perhaps after the program exits. (This is typically used to make a record of error messages.)\n\nArguments: a string, the message to print\n\n### update\\_screen\n\nChange what is displayed at a particular map location.\n\nArguments: an object:\n\n- \\`mapdelta dbuf\\`: the map delta, in compressed form (see below)\n- \\`coordinate ux\\`: the character's x location\n- \\`coordinate uy\\`: the character's y location\n\nA map delta can be an integer 0 if nothing at all has changed. Otherwise it is a list of column deltas. A column delta of 0 means that column is empty, and 1 means it is unchanged since last time. Otherwise a column delta is a list of cell deltas. Again, 0 means empty, 1 means unchanged. Otherwise the cell delta is an \\`int\\[10]\\`, mostly of indexes into the arrays returned by \\`get\\_drawing\\_info\\`:\n\n- \\[0] encoded effect number: the encoding is quite complex, see \\`draw\\_map\\`\n\nin \\`libnethack/src/map.c\\` for an example on how to decode it; it eventually decodes into offsets into \\`effects\\`, \\`zapsyms\\`, \\`zaptypes\\`, \\`swallowsyms\\`, \\`explsyms\\`, and/or \\`expltypes\\`\n\n- \\[1] index into \\`bgelements\\`\n- \\[2] index into \\`traps\\`\n- \\[3] index into \\`objects\\`\n- \\[4] index into \\`monsters\\`, representing the monster associated with an\n\nobject (e.g. \"lichen\" for \"lichen corpse\")\n\n- \\[5] index into \\`monsters\\`, representing a monster on that square\n- \\[6] a bitmask that represents details of a monster on the square:\n- \\`MON\\_TAME\\` = 1: the monster is tame\n- \\`MON\\_RIDDEN\\` = 2: this monster has the player riding it\n- \\`MON\\_DETECTED\\` = 4: this monster is seen via monster detection\n- \\`MON\\_WARNING\\` = 8: this is a warning symbol, not a monster\n- \\`MON\\_PEACEFUL\\` = 16: the monster is peaceful\n- \\[7] a bitmask that represents any branding of the square:\n- \\`NH\\_BRANDING\\_STEPPED\\` = 1: the player has stepped on the square\n- \\`NH\\_BRANDING\\_LOCKED\\` = 2: the player knows this door is locked\n- \\`NH\\_BRANDING\\_UNLOCKED\\` = 4: the player knows this door is unlocked\n- \\`NH\\_BRANDING\\_TRAPPED\\` = 8: the player knows this square is trapped\n- \\`NH\\_BRANDING\\_UNTRAPPED\\` = 16: the player knows this door is untrapped\n- \\[8] index into \\`invis\\`\n- \\[9] a boolean, not an int; true if the character can see this square\n\nIndexes have 1 added to them, so that 0 can represent the lack of the appropriate sort of drawable entity on the square.\n\n### update\\_status\n\nUpdates the character's status information.\n\nArguments: an object:\n\n- \\`int ac\\`: the character's AC (10 = unarmored, lower is better)\n- \\`int align\\`: the character's alignment (TODO: what format?)\n- \\`boolean can\\_enhance\\`: true if the #enhance command is usable\n- \\`int ch\\`: the character's Charisma stat\n- \\`int co\\`: the character's Constitution stat\n- \\`charcode coinsym\\`: the character to use to represent money\n- \\`int cur\\_monnum\\`: the species the character is polymorphed into (an index\n\ninto \\`monsters\\` returned from \\`get\\_drawing\\_info\\`)\n\n- \\`int dx\\`: the character's Dexterity stat\n- \\`int en\\`: the character's current Pw\n- \\`int enmax\\`: the character's maximum Pw\n- \\`int gold\\`: the character's gold in open inventory\n- \\`int hp\\`: the character's current HP\n- \\`int hpmax\\`: the character's maximum HP\n- \\`int in\\`: the character's Intelligence stat\n- \\`int level\\`: the character's experience level\n- \\`string level\\_desc\\`: a textual description of the character's current\n\ndungeon level\n\n- \\`int max\\_rank\\_sz\\`: the maximum possible width of a character's\n\nprofessional title, given their role, even if they change gender or level\n\n- \\`int monnum\\`: the species that the character is naturally (an index\n\ninto \\`monsters\\` returned from \\`get\\_drawing\\_info\\`)\n\n- \\`int moves\\`: the number of turns this game has lasted (1 for the first\n\nturn)\n\n- \\`int plname\\`: the character's name\n- \\`string rank\\`: the character's professional title\n- \\`string racename\\`: the character's unpolymorphed race (\\`human\\`, \\`dwarf\\`,\n\netc.)\n\n- \\`string gender\\`: the character's unpolymorphed gender (\\`male\\`, \\`female\\`,\n\n\\`neuter\\`); this is affected by permanent gender changes, but not by polymorphing into a male/female-only monster\n\n- \\`string rolename\\`: the character's current role (\\`Archaeologist\\`, etc.)\n- \\`int score\\`: the character's current score\n- \\`int st\\`: the integer part of the character's Strength stat\n- \\`int st\\_extra\\`: the fractional part of the character's Strength stat\n- \\`string\\[] statusitems\\`: a list of status lights currently affecting the\n\ncharacter\n\n- \\`int wi\\`: the character's Wisdom stat\n- \\`int x\\`: the character's x coordinate\n- \\`int xp\\`: the character's total number of gained experience points (minus\n\nany lost to level drain)\n\n- \\`int y\\`: the character's y coordinate\n- \\`int z\\`: the character's z coordinate\n\n[![This article describes a 3.4.3-based variant of NetHack. Click here for more information.](/images/5/5d/Nh343var-icon.png)](/wiki/NetHackWiki:Next_version \"This article describes a 3.4.3-based variant of NetHack. Click here for more information.\")\n","html":"<!DOCTYPE html>\n<html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>NetHack 4 Network Protocol - NetHack Wiki</title>\n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"NetHack_4_Network_Protocol\",\"wgTitle\":\"NetHack 4 Network Protocol\",\"wgCurRevisionId\":94526,\"wgRevisionId\":94526,\"wgArticleId\":20841,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[\"Variant-343 articles\",\"Annotations\",\"Variants\"],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"NetHack_4_Network_Protocol\",\"wgRelevantArticleId\":20841,\"wgRequestId\":\"b4d76282aa565106361a323f\",\"wgCSPNonce\":false,\"wgIsProbablyEditable\":false,\"wgRelevantPageIsProbablyEditable\":false,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"wgWikiEditorEnabledModules\":[],\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.state({\"site.styles\":\"ready\",\"noscript\":\"ready\",\"user.styles\":\"ready\",\"user\":\"ready\",\"user.options\":\"ready\",\"user.tokens\":\"loading\",\"mediawiki.legacy.shared\":\"ready\",\"mediawiki.legacy.commonPrint\":\"ready\",\"mediawiki.toc.styles\":\"ready\",\"mediawiki.skinning.interface\":\"ready\",\"skins.vector.styles\":\"ready\"});mw.loader.implement(\"user.tokens@0tffind\",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\",\"csrfToken\":\"+\\\\\"});\n});RLPAGEMODULES=[\"site\",\"mediawiki.page.startup\",\"mediawiki.user\",\"mediawiki.page.ready\",\"mediawiki.toc\",\"mediawiki.searchSuggest\",\"skins.vector.js\"];mw.loader.load(RLPAGEMODULES);});</script>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\"/>\n<script async=\"\" src=\"/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>\n<meta name=\"ResourceLoaderDynamicStyles\" content=\"\"/>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector\"/>\n<meta name=\"generator\" content=\"MediaWiki 1.32.5\"/>\n<meta name=\"description\" content=\"The protocol is based on JSON.  Each command and each response is a single, valid JSON object in UTF8 encoding. The server will insert a NUL character between each command it sends, to allow clients to easily determine where one ends and the next starts (NUL cannot appear in a JSON encoding). The client does not currently insert such NULs. (TODO: It probably should, and the server should probably respect them, in case the client needs to send `exit_game` immediately after another command, without waiting for a response in between.)\"/>\n<link rel=\"image_src\" href=\"/images/6/65/Nethackwiki-logo.png\"/>\n<link rel=\"shortcut icon\" href=\"/images/6/64/Favicon.ico\"/>\n<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch_desc.php\" title=\"NetHackWiki\"/>\n<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://nethackwiki.com/api.php?action=rsd\"/>\n<link rel=\"canonical\" href=\"/wiki/NetHack_4_Network_Protocol\"/>\n<!--[if lt IE 9]><script src=\"/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1\"></script><![endif]-->\n</head>\n<body class=\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-NetHack_4_Network_Protocol rootpage-NetHack_4_Network_Protocol skin-vector action-view\">\t\t<div id=\"mw-page-base\" class=\"noprint\"></div>\n\t\t<div id=\"mw-head-base\" class=\"noprint\"></div>\n\t\t<div id=\"content\" class=\"mw-body\" role=\"main\">\n\t\t\t<a id=\"top\"></a>\n\t\t\t<div class=\"mw-indicators mw-body-content\">\n</div>\n<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">NetHack 4 Network Protocol</h1>\t\t\t<div id=\"bodyContent\" class=\"mw-body-content\">\n\t\t\t\t<div id=\"siteSub\" class=\"noprint\">From NetHackWiki</div>\t\t\t\t<div id=\"contentSub\"></div>\n\t\t\t\t<div id=\"jump-to-nav\"></div>\t\t\t\t<a class=\"mw-jump-link\" href=\"#mw-head\">Jump to navigation</a>\n\t\t\t\t<a class=\"mw-jump-link\" href=\"#p-search\">Jump to search</a>\n\t\t\t\t<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div class=\"mw-parser-output\"><p>This is a description of the <a href=\"/wiki/NetHack_4\" title=\"NetHack 4\">NetHack 4</a> networking protocol.\n</p><p>Note: This page tends to get out of date quickly. A much more up-to-date version can be found <a class=\"external text\" href=\"http://trac.nethack4.org/browser/doc/server_protocol.txt\">here</a>.\n</p><p>The protocol is based on JSON. Each client command and each server response is a single, valid JSON object in UTF8 encoding.\n</p><p><br />\n</p>\n<div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Basics\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Basics</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Interaction\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Interaction</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Client_commands\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Client commands</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#auth\"><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">auth</span></a></li>\n<li class=\"toclevel-2 tocsection-5\"><a href=\"#register\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">register</span></a></li>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#describe_pos\"><span class=\"tocnumber\">3.3</span> <span class=\"toctext\">describe_pos</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#exit_game\"><span class=\"tocnumber\">3.4</span> <span class=\"toctext\">exit_game</span></a></li>\n<li class=\"toclevel-2 tocsection-8\"><a href=\"#get_commands\"><span class=\"tocnumber\">3.5</span> <span class=\"toctext\">get_commands</span></a></li>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"#get_obj_commands\"><span class=\"tocnumber\">3.6</span> <span class=\"toctext\">get_obj_commands</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#get_drawing_info\"><span class=\"tocnumber\">3.7</span> <span class=\"toctext\">get_drawing_info</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"><a href=\"#get_options\"><span class=\"tocnumber\">3.8</span> <span class=\"toctext\">get_options</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"#set_option\"><span class=\"tocnumber\">3.9</span> <span class=\"toctext\">set_option</span></a></li>\n<li class=\"toclevel-2 tocsection-13\"><a href=\"#get_roles\"><span class=\"tocnumber\">3.10</span> <span class=\"toctext\">get_roles</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"#get_topten\"><span class=\"tocnumber\">3.11</span> <span class=\"toctext\">get_topten</span></a></li>\n<li class=\"toclevel-2 tocsection-15\"><a href=\"#list_games\"><span class=\"tocnumber\">3.12</span> <span class=\"toctext\">list_games</span></a></li>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"#create_game\"><span class=\"tocnumber\">3.13</span> <span class=\"toctext\">create_game</span></a></li>\n<li class=\"toclevel-2 tocsection-17\"><a href=\"#play_game\"><span class=\"tocnumber\">3.14</span> <span class=\"toctext\">play_game</span></a></li>\n<li class=\"toclevel-2 tocsection-18\"><a href=\"#set_email\"><span class=\"tocnumber\">3.15</span> <span class=\"toctext\">set_email</span></a></li>\n<li class=\"toclevel-2 tocsection-19\"><a href=\"#set_password\"><span class=\"tocnumber\">3.16</span> <span class=\"toctext\">set_password</span></a></li>\n<li class=\"toclevel-2 tocsection-20\"><a href=\"#shutdown\"><span class=\"tocnumber\">3.17</span> <span class=\"toctext\">shutdown</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-21\"><a href=\"#Server_requests\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Server requests</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-22\"><a href=\"#server_cancel\"><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">server_cancel</span></a></li>\n<li class=\"toclevel-2 tocsection-23\"><a href=\"#request_command\"><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">request_command</span></a></li>\n<li class=\"toclevel-2 tocsection-24\"><a href=\"#display_menu\"><span class=\"tocnumber\">4.3</span> <span class=\"toctext\">display_menu</span></a></li>\n<li class=\"toclevel-2 tocsection-25\"><a href=\"#display_objects\"><span class=\"tocnumber\">4.4</span> <span class=\"toctext\">display_objects</span></a></li>\n<li class=\"toclevel-2 tocsection-26\"><a href=\"#getdir\"><span class=\"tocnumber\">4.5</span> <span class=\"toctext\">getdir</span></a></li>\n<li class=\"toclevel-2 tocsection-27\"><a href=\"#getline\"><span class=\"tocnumber\">4.6</span> <span class=\"toctext\">getline</span></a></li>\n<li class=\"toclevel-2 tocsection-28\"><a href=\"#getpos\"><span class=\"tocnumber\">4.7</span> <span class=\"toctext\">getpos</span></a></li>\n<li class=\"toclevel-2 tocsection-29\"><a href=\"#query_key\"><span class=\"tocnumber\">4.8</span> <span class=\"toctext\">query_key</span></a></li>\n<li class=\"toclevel-2 tocsection-30\"><a href=\"#yn\"><span class=\"tocnumber\">4.9</span> <span class=\"toctext\">yn</span></a></li>\n<li class=\"toclevel-2 tocsection-31\"><a href=\"#load_progress\"><span class=\"tocnumber\">4.10</span> <span class=\"toctext\">load_progress</span></a></li>\n<li class=\"toclevel-2 tocsection-32\"><a href=\"#server_error\"><span class=\"tocnumber\">4.11</span> <span class=\"toctext\">server_error</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-33\"><a href=\"#Display_elements\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Display elements</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-34\"><a href=\"#delay_output\"><span class=\"tocnumber\">5.1</span> <span class=\"toctext\">delay_output</span></a></li>\n<li class=\"toclevel-2 tocsection-35\"><a href=\"#display_buffer\"><span class=\"tocnumber\">5.2</span> <span class=\"toctext\">display_buffer</span></a></li>\n<li class=\"toclevel-2 tocsection-36\"><a href=\"#level_changed\"><span class=\"tocnumber\">5.3</span> <span class=\"toctext\">level_changed</span></a></li>\n<li class=\"toclevel-2 tocsection-37\"><a href=\"#list_items\"><span class=\"tocnumber\">5.4</span> <span class=\"toctext\">list_items</span></a></li>\n<li class=\"toclevel-2 tocsection-38\"><a href=\"#outrip\"><span class=\"tocnumber\">5.5</span> <span class=\"toctext\">outrip</span></a></li>\n<li class=\"toclevel-2 tocsection-39\"><a href=\"#pause\"><span class=\"tocnumber\">5.6</span> <span class=\"toctext\">pause</span></a></li>\n<li class=\"toclevel-2 tocsection-40\"><a href=\"#print_message\"><span class=\"tocnumber\">5.7</span> <span class=\"toctext\">print_message</span></a></li>\n<li class=\"toclevel-2 tocsection-41\"><a href=\"#print_message_nonblocking\"><span class=\"tocnumber\">5.8</span> <span class=\"toctext\">print_message_nonblocking</span></a></li>\n<li class=\"toclevel-2 tocsection-42\"><a href=\"#raw_print\"><span class=\"tocnumber\">5.9</span> <span class=\"toctext\">raw_print</span></a></li>\n<li class=\"toclevel-2 tocsection-43\"><a href=\"#update_screen\"><span class=\"tocnumber\">5.10</span> <span class=\"toctext\">update_screen</span></a></li>\n<li class=\"toclevel-2 tocsection-44\"><a href=\"#update_status\"><span class=\"tocnumber\">5.11</span> <span class=\"toctext\">update_status</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n\n<h2><span class=\"mw-headline\" id=\"Basics\">Basics</span></h2>\n<p>The protocol is based on JSON.  Each command and each response is a single,\nvalid JSON object in UTF8 encoding. The server will insert a NUL character\nbetween each command it sends, to allow clients to easily determine where one\nends and the next starts (NUL cannot appear in a JSON encoding). The client\ndoes not currently insert such NULs. (TODO: It probably should, and the server\nshould probably respect them, in case the client needs to send `exit_game`\nimmediately after another command, without waiting for a response in between.)\n</p><p>The server protocol is an enhancement of the protocol used by a window port to\nconnect to a local game; the two are very similar, and so this documentation\nmay also be consulted to gain some amount of understanding of the behaviour of\na windowport.  There are a few commands that are specific to server use,\nthough, such as `auth`, and the API for map updates is different.  For a full\nexplanation of the various protocols in use, see `doc/mainloop.txt`.\n</p><p>The following types are all special cases of integers:\n</p>\n<ul><li>All enumerated types</li>\n<li>bitflags</li>\n<li>boolean</li>\n<li>charcode</li>\n<li>connid</li>\n<li>coordinate</li>\n<li>gameid</li></ul>\n<p><br />\n</p>\n<h2><span class=\"mw-headline\" id=\"Interaction\">Interaction</span></h2>\n<p>Once the client has connected to the server, it must send either an `auth` or\na `register` command.  If the client sends a successful `register` command, a\nfollowing `auth` command is not necessary.  When the client is authenticated\nany other command may be sent to the server.\n</p><p>Normal flow is driven by the client and/or server sending commands and\nreceiving responses to them; a command can be sent from the client to the\nserver, or (more rarely) the other way round.  (Server commands are sent if\nthe server needs more information to fulfil a client command, or to inform the\nclient of unusual conditions, such as a retroactive cancel of a command in\nprogress.)  Server commands and responses can also carry an attached `display`\nelement with map updates (see later in this document).\n</p><p>In general, a command might be sent/received by the client and/or server at\nany point after the authentication.  It is thus incorrect for a client to\nblock on user input, because it might have to handle a server command that\narrives unexpectedly.\n</p><p>It is also incorrect to block on the response to a command, because a command\nmight be followed up by another command rather than a response.  It is\nacceptable, however, for the client to ignore user input after sending a\ncommand, until either a command or a response is received; whenever a command\nis sent, the client can assume that the server will react to it in some way,\neither via responding or via sending a followup command.\n70\tCommands and responses are always well-nested; if a response is sent, it will\nbe to the most recent unresponded command sent by the other end of the\nconnection.  Additionally, messages usually alternate between client and\nserver.  Currently, the only exception to this is the `cancel_server_request`\ncommand that the server uses to countermand a server request; it can be sent\nby the server even if the previous message was also sent by the server.\n</p><p><br />\n</p>\n<h2><span class=\"mw-headline\" id=\"Client_commands\">Client commands</span></h2>\n<p>These commands are sent by the client, expecting a response from the server.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"auth\">auth</span></h3>\n<p>Either `auth` or `register` must always be the first command sent, and no\nother commands may be sent until the original `auth` or `register` command\nreceives a response.\n</p><p>This command is specific to client/server communication, and is not used for\nlocal play.  It specifies which user is making the connection.\n</p><p>Upon creating a new connection, there will be no game loaded: `play_game` will\nneed to be used before commands that require a game to be loaded will work\n(and those commands can only be given to follow up server requests that follow\nup the `play_game` call).\n</p><p>Command arguments:\n</p>\n<ul><li>`string username`: the username of the user who is making the connection</li>\n<li>`string password`: the password of the user who is making the connection</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`enum authresult return`: whether the connection succeeded:</li>\n<li>[`NO_CONNECTION` = 0: not sent by the server, simulated by the client</li></ul>\n<p>library if the connection fails]\n</p>\n<ul><li>`AUTH_FAILED_UNKNOWN_USER` = 1: the given user does not exist</li>\n<li>`AUTH_FAILED_BAD_PASSWORD` = 2: the given password is wrong</li>\n<li>`AUTH_SUCCESS_NEW` = 3: a new connection was created</li>\n<li>`int[3] version`: the version number of the server</li>\n<li>[0] The major version number (if it's not 4, this document is probably</li></ul>\n<p>inaccurate)\n</p>\n<ul><li>[1] The minor version number (changes when save compatibility breaks)</li>\n<li>[2] The patchlevel version number (changes when a release is made that</li></ul>\n<p>does not break save compatibility)\n</p><p>TODO: What happens if this command is sent when a connection already exists?\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"register\">register</span></h3>\n<p>Like `auth`, except it requires a nonexistent rather than existing username,\nand will create an account.  This cannot re-establish an existing connection,\nfor obvious reasons.\n</p><p>Command arguments:\n</p>\n<ul><li>`string username`: the username for the new account</li>\n<li>`string password`: the password to register the account with</li>\n<li>`string email`: (optional) an email address to store in the database; the</li></ul>\n<p>server admin can use this for password reset requests, etc.\n</p><p>Response arguments: same as `auth`, except `AUTH_FAILED_UNKNOWN_USER` means\nthat the user account already exists.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"describe_pos\">describe_pos</span></h3>\n<p>Returns farlook information for a given map square.  This command may only be\nmeaningfully sent while a game is running, and corresponds to the\n`nh_describe_pos` API call in libnethack.  If the game is not running, all\nstring values in the response will be the null string, `objcount` will be -1,\nand `in` will be false.\n</p><p>Command arguments:\n</p>\n<ul><li>`boolean is_in`: Whether to return the `in` element in the response</li>\n<li>`coordinate x`: x coordinate of the map square to farlook</li>\n<li>`coordinate y`: y coordinate of the map square to farlook</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`string bgdesc`: a description of the background</li>\n<li>`boolean feature_described`: true if `bgdesc` is redundant to other fields</li>\n<li>`string effectdesc`: a description of an effect</li>\n<li>`boolean in`: true if an object is \"in\" rather than \"on\" the background</li>\n<li>`string invisdesc`: a description of a remembered invisible monster</li>\n<li>`string mondesc`: a description of a monster</li>\n<li>`int objcount`: the number of object stacks on the square</li>\n<li>`string objdesc`: a description of an object</li>\n<li>`string trapdesc`: a description of a trap</li></ul>\n<p>Strings in the response are zero-length if they would describe something that\ndoes not exist on the map square given by (x,y) (or that the character is\nunaware of), e.g. `trapdesc` for a square with no known trap.  Otherwise, they\ndescribe the map square given by (x,y).\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"exit_game\">exit_game</span></h3>\n<p>Causes the game to stop running, either via saving/suspending it, or via\nquitting it.  `EXIT_SAVE` is equivalent to just dropping the connection in\nterms of its user-visible effect, but is kinder on server resources than\ndropping the connection would be.  This command can be sent if there is no\nrunning game, but does nothing but return true in that situation.  It\ncorresponds to the `nh_exit_game` API call in libnethack.\n178\tIf the game is running, this API call will typically return via `play_game`\nresponse (see the documentation for `play_game`) rather than directly\n(especially if it needs to get out of multiple nested contexts; it can be sent\nat any time while the game is running and there is some server request pending\nthat the client could respond to).  Obviously, it must return directly if\nthere is no game running.\n</p><p>Command arguments:\n</p>\n<ul><li>`enum nh_exit_types exit_type`: what sort of exit to perform</li>\n<li>`EXIT_SAVE` = 0: detach from the game and drop the connection; the</li></ul>\n<p>save file remains intact\n</p>\n<ul><li>`EXIT_QUIT` = 1: delete the game's save file and enter the game over</li></ul>\n<p>sequence\n</p>\n<ul><li>`EXIT_PANIC` = 2: like `EXIT_SAVE`, but record that there was a</li></ul>\n<p>problem in the panic log\n</p>\n<ul><li>`EXIT_RESTART` = 3: like `EXIT_SAVE`, but the client will be told to</li></ul>\n<p>immediately reload the game (`CLIENT_RESTART`); clients use this to\nchange between play, watch and replay modes\n</p><p>Response arguments:\n</p>\n<ul><li>`boolean return`: true if the game exited (whether due to a save, to a</li></ul>\n<p>quit, or to the process being panicked), or if no game was running; false\nif the user cancelled the exit; true is rarely going to be observable\nexcept in error conditions or if no game is running.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"get_commands\">get_commands</span></h3>\n<p>This command lists which commands exist and can be used in a `request_command`\nresponse, and corresponds to the `nh_get_commands` API call in libnethack.\n</p><p>In addition to information about the commands, it also returns default\nkeybindings for them; clients can choose to respect or ignore these.  This\nmeans that minor changes to the game's commands can be made without needing to\nalter clients.\n</p><p>This command can be used even when the game is not running; whether there is a\nrunning game or not, it will return all commands that can be used by the user,\nincluding debug mode commands. The client may want to hide debug mode commands\nfrom non-debug-mode games.\n</p><p>Command arguments: none\n</p><p>Response arguments:\n</p>\n<ul><li>`struct nh_cmd_desc[] cmdlist`: a list of the commands that exist:</li>\n<li>`string name`: the name of the command (`command` in</li></ul>\n<p>`request_command`);\n</p>\n<ul><li>`string desc`: a human-readable description of the command;</li>\n<li>`unsigned flags`: information about the command, a bitmask of:</li>\n<li>`CMD_ARG_DIR` = 1: the command can accept a direction argument;</li>\n<li>`CMD_ARG_POS` = 2: the command can accept a position argument;</li>\n<li>`CMD_ARG_OBJ` = 4: the command can accept an inventory object</li></ul>\n<p>argument;\n</p>\n<ul><li>`CMD_ARG_STR` = 8: the command can accept a string argument;</li>\n<li>`CMD_ARG_SPELL` = 16: the command can accept a spell argument;</li>\n<li>`CMD_ARG_LIMIT` = 32: the command can accept a numeric argument</li></ul>\n<p>that specifies a reduced maximum for things like multishot or item\nstack size;\n</p>\n<ul><li>`CMD_EXT` = 1024: it is recommended that by default, this command</li></ul>\n<p>should be available as an extended command (via `#`);\n</p>\n<ul><li>`CMD_MOVE` = 2048: this is a movement command (and thus it is not</li></ul>\n<p>unreasonable to be able to keybind to individual direction\narguments to this command);\n</p>\n<ul><li>`CMD_HELP` = 4096: it is recommended that by default, this command</li></ul>\n<p>should be available via the help menu on `?`;\n</p>\n<ul><li>`CMD_NOTIME` = 8192: this command makes no changes to the</li></ul>\n<p>gamestate, and thus can be used while watching or replaying a\ngame;\n</p>\n<ul><li>`CMD_DEBUG` = 16384: this command is only available in debug mode;</li>\n<li>`CMD_INTERNAL` = 32768: although commands with this flag set exist,</li></ul>\n<p>they are never returned from `nh_get_commands`.\n</p>\n<ul><li>`charcode def`: a default keybinding for this command (ASCII,</li></ul>\n<p>control-ASCII, meta-ASCII);\n</p>\n<ul><li>`charcode alt`: another, lower-priority, default keybinding for this</li></ul>\n<p>command\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"get_obj_commands\">get_obj_commands</span></h3>\n<p>Requests a list of reasonable commands for use with a specified inventory\nitem.  (TODO: This is missing a check on whether the game is running.)  This\ncommand is intended for use in response to an item being selected from the\ninventory menu, itemactions-style; it will give more specific explanations of\nwhat the commands do than `get_commands` does, because it is specialised to\none object.\n</p><p>Command arguments:\n</p>\n<ul><li>`charcode invlet`: The inventory letter of the item to get commands for.</li></ul>\n<p>Response arguments: the same as `get_commands`.\n</p><p>Note that unlike `get_commands`, which can recommend control- or meta-modified\nkeys for its keybindings, `get_obj_commands` favours capital and lowercase\nletters only, so that its keybindings can easily be placed in a menu.  This\nmeans that the recommended keybindings may not be identical to those produced\nvia `get_commands`.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"get_drawing_info\">get_drawing_info</span></h3>\n<p>Requests information about what drawable entities exist in the game: most code\nthat communicates display information will return indexes into lists, and this\nfunction returns those lists.  It contains both API names, and default ASCII\nrepresentations (these need to be available to the server anyway so that it\ncan produce dumplogs, so it may as well communicate these to the client in\ncase it wants to use them).  It is reasonable to call this even when the game\nis not running.  This command corresponds to the `nh_get_drawing_info` API\ncall in libnethack.\n</p><p>TODO: Sending an array and its length separately over JSON is always a bad\nidea; what if they don't match? There's currently a `int num_*` for each\n`struct nh_symdef[]` in the response arguments, but I removed the\ndocumentation for them in preparation for fixing this rather major issue.\n</p><p>Command arguments: none\n</p><p>Response arguments:\n</p>\n<ul><li>`int feature_offset`:</li>\n<li>`struct nh_symdef[] bgelements`: Backgrounds.</li>\n<li>`struct nh_symdef[] effects`: Effects.</li>\n<li>`struct nh_symdef[] explsyms`: Explosion shape/locations.</li>\n<li>`struct nh_symdef[] expltypes`: Explosion appearances.</li>\n<li>`struct nh_symdef[] invis`: Memory of invisible monsters.</li>\n<li>`struct nh_symdef[] monsters`: Monsters.</li>\n<li>`struct nh_symdef[] objects`: Items.</li>\n<li>`struct nh_symdef[] swallowsyms`: The inside of an engulfing monster.</li>\n<li>`struct nh_symdef[] traps`: Traps.</li>\n<li>`struct nh_symdef[] warnings`: Warning symbols.</li>\n<li>`struct nh_symdef[] zapsyms`: Zap shape/locations.</li>\n<li>`struct nh_symdef[] zaptypes`: Zap appearances.</li></ul>\n<p>where `struct nh_symdef[]` is defined as follows (and sent as an array, with\nits fields in this order):\n</p>\n<ul><li>`string name`: The API name of a drawable entity.  Explosions and zaps</li></ul>\n<p>have two API names; one for the shape and location within the shape (the\n`*syms` list), one for the appearance (the `*types` list).  Other drawable\nentities have just the one API name.  Clients should feel free to hardcode\noverrides for specific API names.  (Note that an API name is not always\nthe same as a tile name; use the functions in tilesequence.c if you need\nto convert, e.g. to discover a tile number for a given API name.)\n</p>\n<ul><li>`charcode character`: A recommended ASCII representation of this drawable</li></ul>\n<p>entity.  Clients can use this as a fallback if they encounter an\nunrecognised API name.\n</p>\n<ul><li>`colourcode colour`: A recommended color for this drawable entity.</li></ul>\n<p>When using the recommended ASCII representations, for explosions and zaps\n(which have two API names), the character should be taken from the\nshape/location field, and the color from the appearance field.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"get_options\">get_options</span></h3>\n<p>Currently under revision.  TODO: When we decide what the API call actually\ndoes, document it properly.\n</p><p>Command arguments:\n</p>\n<ul><li>`enum nh_option_list list`: what sort of options to list</li>\n<li>(values, semantics under revision)</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`struct nh_option_desc[] options`:</li>\n<li>`string name`: short name of the option</li>\n<li>`string helptxt`: long desription of the option</li>\n<li>`enum nh_opttype type`: what type of values the option takes:</li>\n<li>`OPTTYPE_BOOL` = 0: booleans;</li>\n<li>`OPTTYPE_INT` = 1: integers;</li>\n<li>`OPTTYPE_ENUM` = 2: a fixed list of possibilities;</li>\n<li>`OPTTYPE_STRING` = 3: strings;</li>\n<li>`OPTTYPE_AUTOPICKUP_RULES` = 4: lists of autopickup rules</li>\n<li>`union nh_optvalue value`: the value (or default value? under revision)</li></ul>\n<p>of the option\n</p>\n<ul><li>`union _ desc`: the legal values for the option:</li>\n<li>`nil` for `OPTTYPE_BOOL`;</li>\n<li>`struct {int min, int max}` for `OPTTYPE_INT`;</li>\n<li>list of strings for `OPTTYPE_ENUM`;</li>\n<li>an integer for strings (reflecting the maximum length);</li>\n<li>list of strings for autopickup rules (TODO: figure out what format</li></ul>\n<p>these are in)\n</p><p>An autopickup rule has the following structure:\n</p>\n<ul><li>`enum autopickup action`: what action to take upon encountering this item:</li>\n<li>`AP_GRAB` = 0: pick it up regardless of `pickup_types`;</li>\n<li>`AP_LEAVE` = 1: leave it on the ground regardless of `pickup_types`.</li>\n<li>`enum nh_bucstatus buc`: a filter against beatitude:</li>\n<li>`B_UNKNOWN` = 0: match only items with unknown beatitude;</li>\n<li>`B_BLESSED` = 1: match only blessed items;</li>\n<li>`B_UNCURSED` = 2: match only non-blessed non-cursed items;</li>\n<li>`B_CURSED` = 3: match only cursed items;</li>\n<li>`B_DONT_CARE` = 4: do not filter items based on beatitude</li>\n<li>`int oclass`: an object class of items to match</li>\n<li>`string pattern`: a regular expression that matches items</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"set_option\">set_option</span></h3>\n<p>Changes a (non-interface) option on the server.  This corresponds to the\n`nh_set_option` API call in libnethack.  TODO: This command should only be\nrunnable if a followup to `request_command` is legal, except possibly for\nsetting birth options; this needs more thought.\n</p><p>Command arguments:\n</p>\n<ul><li>`boolean isstr`: if true, allows sending the option value as a string</li></ul>\n<p>regardless of the option's actual type (the server will parse it into an\nappropriate value for the option); if false, the client has already parsed\nthe option\n</p>\n<ul><li>`string name`: the name of the option to set</li>\n<li>`union nh_optvalue value`: the value for the option, in a format depending</li></ul>\n<p>on the option's type and whether `isstr` is set (a string, integer, or\nlist of autopickup rules).\n</p><p>Response arguments:\n</p>\n<ul><li>`struct nh_option_desc option`: TODO: work out if we need this and what</li></ul>\n<p>its semantics are\n</p>\n<ul><li>`int return`: an integer treated as a boolean; nonzero if the option value</li></ul>\n<p>given was reasonable, zero if it was unreasonable (and thus the server did\nnot try to set it)\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"get_roles\">get_roles</span></h3>\n<p>Requests information on what roles, races, genders, and alignments exist in\nthe game, and what combinations of them are legal.  This command corresponds to\nthe `nh_get_roles` API call in libnethack.\n</p><p>TODO: This API is inherently prone to buffer length mismatches.  There should\nnot be separate `num_` fields.\n</p><p>Command arguments: none\n</p><p>Response arguments:\n</p>\n<ul><li>`string[] alignnames`: the list of alignments that exist</li>\n<li>`string[] gendnames`: the list of genders that exist</li>\n<li>`string[] racenames`: the list of races that exist</li>\n<li>`string[] rolenames_f`: the list of roles that exist, using female names</li></ul>\n<p>such as \"Cavewoman\" (TODO: if a role has no separate female name, are\nthese a copy of the male name, or NULL?)\n</p>\n<ul><li>`string[] rolenames_m`: the list of roles that exit, using male names such</li></ul>\n<p>as \"Caveman\"\n</p>\n<ul><li>`int[] matrix`: Information on which combinations of role, race, gender,</li></ul>\n<p>and alignment are legal; each possible combination (legal or illegal) has\nan entry in the list, at an index that can be calculated via the macro\n`nh_cm_idx()`\n</p>\n<ul><li>`int num_aligns`: length of `alignnames`</li>\n<li>`int num_genders`: length of `gendnames`</li>\n<li>`int num_races`: length of `racenames`</li>\n<li>`int num_roles`: length of `rolenames_[f,m]`</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"get_topten\">get_topten</span></h3>\n<p>Requests entries from the high score table.\n</p><p>Command arguments:\n</p>\n<ul><li>`int around`: if there has been at least one game previously on this</li></ul>\n<p>connection (even if it was re-established), and the most recent such game\nhas since reached game over (death/quit/escape/ascension), and `player`\nwas playing, list this many games near that game on the high score table;\notherwise this value is ignored\n</p>\n<ul><li>`boolean own`: whether to list all games of the given `player` name or not</li>\n<li>`string player`: the player name for `own` and `around`; a null string</li></ul>\n<p>will automatically pick the appropriate player for the most recent game\nfor use with `around`\n</p>\n<ul><li>`int top`: list this many games at the top of the table</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`string msg`: an appropriate heading for the high score table; if `around`</li></ul>\n<p>matches, this will talk about the most recent game (e.g. telling the\nplayer what position on the list they are, or explaining that wizard mode\ngames are not eligible for the high score table); otherwise, this will be\nan error message (if any), or else the null string\n</p>\n<ul><li>`struct nh_topten_entry[] toplist`: the requested high score table</li>\n<li>`int birthdate`: seconds since the epoch that the game started (TODO:</li></ul>\n<p>Y2038 issue!)\n</p>\n<ul><li>`string death`: the reason that the player died</li>\n<li>`int deathdate`: seconds since the epoch that the game ended</li>\n<li>`int deaths`: the number of times the player lifesaved, plus one if they</li></ul>\n<p>eventually died permanently\n</p>\n<ul><li>`int end_how`: an internal code for the basic cause of death (drowning,</li></ul>\n<p>starving, etc.); this is currently not in any publicly accessible header\n(TODO: which is probably a mistake), but is in libnethack's hack.h\n</p>\n<ul><li>`string entrytxt`: a formatted representation of this high score entry</li></ul>\n<p>that can be output directly in a fixed-width font\n</p>\n<ul><li>`boolean highlight`: true if this entry is the one that `around` is</li></ul>\n<p>measuring around\n</p>\n<ul><li>`int hp`: the character's current hitpoints at death</li>\n<li>`int maxhp`: the character's maximum hitpoints at death</li>\n<li>`int maxlvl`: the deepest dungeon level the character reached</li>\n<li>`int moves`: the number of turns the charater spent</li>\n<li>`string name`: the name of the character</li>\n<li>`string plalign`: the character's alignment</li>\n<li>`string plgend`: the character's gender</li>\n<li>`string plrace`: the character's race</li>\n<li>`string plrole`: the character's role</li>\n<li>`int points`: the number of points the game scored</li>\n<li>`int rank`: the position of this game within the high score table (1 for</li></ul>\n<p>first place, 2 for second place, etc.); can be 0 or negative for games\nthat are disqualified from the high score table (due to, for instance,\nplaying in debug mode)\n</p>\n<ul><li>`int ver_major`: the major version number of the engine this game was</li></ul>\n<p>played on\n</p>\n<ul><li>`int ver_minor`: the minor version number of the engine this game was</li></ul>\n<p>played on\n</p>\n<ul><li>`int patchlevel`: the patchlevel version number of the engine this game</li></ul>\n<p>was played on\n</p>\n<h3><span class=\"mw-headline\" id=\"list_games\">list_games</span></h3>\n<p>Lists current and/or completed games on the server.\n</p><p>TODO: what format are plgend, etc., in? Abbreviation? Full name?\n</p><p>Command arguments:\n</p>\n<ul><li>`boolean completed`: list only completed games if true, only current games</li></ul>\n<p>if false\n</p>\n<ul><li>`int limit`: the maximum number of games to list</li>\n<li>`boolean show_all`: if true, list games for which user who authenticated</li></ul>\n<p>this connection has read but not write access; if false, only list games\nto which the user has write access\n</p><p>Response arguments:\n</p>\n<ul><li>`struct nhnet_game[] games`: the information about the games selected by</li></ul>\n<p>the arguments:\n</p>\n<ul><li>`int gameid`: a value that can be given to `play_game` to connect to</li></ul>\n<p>this game\n</p>\n<ul><li>`enum nh_game_modes playmode`: any special rules that might apply to</li></ul>\n<p>this game:\n</p>\n<ul><li>`MODE_NORMAL` = 0: there is nothing special about this game;</li>\n<li>`MODE_EXPLORE` = 1: this game is in non-scoring discovery mode;</li>\n<li>`MODE_WIZARD` = 2: this game is in debug mode.</li>\n<li>`string plname`: the name of this game's player</li>\n<li>`string game_status`: a textual description of the current state of</li></ul>\n<p>the game (death reason for a completed game, location of the character\nin the dungeon for an incomplete game)\n</p>\n<ul><li>`string plalign`: the alignment of this game's character</li>\n<li>`string plgend`: the gender of this game's character</li>\n<li>`string plrace`: the race of this game's character</li>\n<li>`string plrole`: the role of this game's character</li>\n<li>`enum nh_log_status status`: the status of this game's save file:</li>\n<li>`LS_SAVED` = 0: an ordinary save file, nobody playing/replaying</li>\n<li>`LS_DONE` = 1: game over: quit, died, ascended, etc.</li>\n<li>`LS_IN_PROGRESS` = 2: someone is playing/watching/replaying this</li></ul>\n<p>game\n</p>\n<ul><li>`LS_INVALID` = -1: something is badly wrong with the save file</li>\n<li>`LS_CRASHED` = -2: the save file needs manual recovery</li></ul>\n<h3><span class=\"mw-headline\" id=\"create_game\">create_game</span></h3>\n<p>Creates a new save file, that can subsequently be opened with `play_game` in\norder to start a new game.  This mostly corresponds to the `nh_create_game`\nAPI call in libnethack (although it has a slightly different calling\nconvention).\n</p><p>Command arguments:\n</p>\n<ul><li>`struct nh_option_desc[] options`: the options this game should initially</li></ul>\n<p>be created with (including game mode, character, and character name); any\noptions omitted wil be filled in with defaults\n</p><p>Response arguments:\n</p>\n<ul><li>`int gameid`: The game ID, for use with future `play_game` calls; if this</li></ul>\n<p>is -1, the game creation failed\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"play_game\">play_game</span></h3>\n<p>Attaches to a game, causing that game to be loaded if it isn't already.  If\nthe game allows read access for the user the connection is authenticated as,\nand the game is not completed, the user will be able to play, watch, and/or\nreplay the game.  Otherwise, the user will only be able to watch and replay\nthe game.  The `play_game` call does not respond until the gameplay is over\n(or immediately, if an error happens); rather, the server will respond with a\nnumber of followup commands to handle the user interaction side of the\ngameplay itself.\n</p><p>This corresponds to the `nh_play_game` API call in libnethack.\n</p><p>Note that a `play_game` response may happen at any time after a unresponded\n`play_game` command, even if there are unresponded requests in the meantime.\n(This corresponds to a `longjmp` back to `nh_play_game` in the libnethack\nAPI.)  The unresponded requests simply vanish, and the client should act as\nthough they never happened (removing menus that they opened from the screen,\nforgetting messages, etc.).  This can happen in a few different situations:\n</p>\n<ul><li>If the client requests a save or quit (via `exit_game`), perhaps while a</li></ul>\n<p>prompt is open;\n</p>\n<ul><li>If something goes wrong and the server needs to rewind the save file</li></ul>\n<p>mid-turn;\n</p>\n<ul><li>During network play, if the network connection breaks or times out on the</li></ul>\n<p>server, the client API code simulates this to transparently reconnect the\nconnection, even though it isn't actually sent over the network.\n</p><p>Command arguments:\n</p>\n<ul><li>`int gameid`: A value returned from `list_games` or `create_game`</li></ul>\n<p>representing a game to attach to\n</p>\n<ul><li>`enum followmode followmode`: How to load the game:</li>\n<li>`FM_PLAY` = 0: play the game</li>\n<li>`FM_WATCH` = 1: watch a game (like playing, but read-only)</li>\n<li>`FM_REPLAY` = 2: replay the game from the start (also read-only)</li>\n<li>(`FM_RECOVERQUIT` = 3: go through the game over sequence of a completed</li></ul>\n<p>game again (leaving bones, xlogfile entries, etc.); this is disallowed\nin network play for security reasons, but exists in the local API)\n</p><p>Response arguments:\n</p>\n<ul><li>`enum nh_play_status return`: what happen in the attempt to restore the game:</li>\n<li>`GAME_DETACHED` = 0: the game was restored successfully; eventually,</li></ul>\n<p>the client requested to stop playing, and the game still exists\n</p>\n<ul><li>`GAME_OVER` = 1: the game was restored successfully; eventually, the</li></ul>\n<p>game ended through the death of the character or some similarly\npermanent means; this return value is only sent to one process (the\none that sent the input causing the game to end)\n</p>\n<ul><li>`GAME_ALREADY_OVER` = 2: the game was restored successfully, but</li></ul>\n<p>either it had already ended (and thus was loaded in replay mode), or\nelse it ended while attached but some other process sent the input\nthat caused the game to end\n</p>\n<ul><li>`RESTART_PLAY` = 3: something happened that forced the server to jump</li></ul>\n<p>back to `play_game`; the client should in most cases immediately call\n`play_game` with the same argument\n</p>\n<ul><li>`CLIENT_RESTART` = 4: ditto, but on the request of the client, which</li></ul>\n<p>can react to it how it likes\n</p>\n<ul><li>`REPLAY_FINISHED` = 5: the game is still going, but cannot continue in</li></ul>\n<p>replay mode because the end was reached; a client can reconnect in\nplay or watch mode if it likes\n</p>\n<ul><li>`ERR_BAD_ARGS` = 6: the game did not start because the given game ID</li></ul>\n<p>does not exist\n</p>\n<ul><li>`ERR_BAD_FILE` = 7: the game did not start because the given game ID</li></ul>\n<p>corresponds to a file on disk that cannot be read\n</p>\n<ul><li>`ERR_IN_PROGRESS` = 8: it is impossible to attach to the game due to</li></ul>\n<p>locking issues; on POSIXy OSes, this should only happen if the file is\nbeing recovered manually, but on some OSes this may happen if anyone\nelse is currently playing the game\n</p>\n<ul><li>`ERR_RESTORE_FAILED` = 9: the game is completely corrupted and needs</li></ul>\n<p>manual recovery\n</p>\n<ul><li>`ERR_RECOVER_REFUSED` = 10: the game is partially corrupted, and the</li></ul>\n<p>user chose not to rewind it when prompted about whether to rewind it\n</p>\n<ul><li>(`ERR_NETWORK_ERROR` = 11: never sent over the network, but the</li></ul>\n<p>client library simulates this return value if it has to detach the\ngame due to network issues and cannot subsequently re-attach it, thus\nclients using the client library may see it)\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"set_email\">set_email</span></h3>\n<p>Change the email address associated with the authenticated user.  (This\naddress is not used by the game, but is available to server admins in case\nthey need to verify a user's identity, e.g. for a password reset request.)\n</p><p>Command arguments:\n</p>\n<ul><li>`string email`: the new email address</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`boolean return`: true if the email address change succeeded</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"set_password\">set_password</span></h3>\n<p>Change the password associated with the authenticated user.  The same password\nwill be required by future `auth` requests.\n</p><p>Command arguments:\n</p>\n<ul><li>`string password`: the new password (sent in plaintext, unless the</li></ul>\n<p>connection is encrypted some other way)\n</p><p>Response arguments:\n</p>\n<ul><li>`boolean return`: true if the password change succeeded</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"shutdown\">shutdown</span></h3>\n<p>Exits the server process responsible for dealing with this client process and\ncloses the connection.  (If there is an active game, the server will attempt\nto save it before exiting).\n</p><p>Command arguments: none\n</p><p>Response arguments:\n</p>\n<ul><li>`int return`: Always 1.</li></ul>\n<p><br />\n</p>\n<h2><span class=\"mw-headline\" id=\"Server_requests\">Server requests</span></h2>\n<p>These requests are sent by the server, expecting a response from the client.\nNormally they will only be sent as followups to a response from the client;\nthe only exceptions are `server_error` and `server_cancel`, which can be sent\nat any time (except to interrupt the request half of a server request or\nresponse half of a server response, in which case they will be delayed until\nthe server is done sending its current request/response).\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"server_cancel\">server_cancel</span></h3>\n<p>Sending an `nh_play_game` response can be used by the server to retroactively\nwipe out the state of a connection, e.g. to handle save file recovery, or a\nmid-turn save.  However, sometimes the server only wants to countermand one\nrequest; the typical example is when watching a game which opened a menu, and\nthen the player being watched makes a selection from the menu (in which case\nthe server needs to, effectively, undo the opening of the menu).\n</p><p>In this case, the server will send a `server_cancel` request.  The client\nshould treat any response-requiring server request it is currently processing,\nor the next such request if it is not currently processing such a request, as\nbeing cancelled by the server, and should thus give the appropriate\n\"cancelled by server\" response to that request.\n</p><p>In the local API (rather than the network API), in which `libnethack` links\ndirectly against an interface, the `server_cancel` request can be sent at\nabsolutely any time at all; this includes such inconvenient times as \"in the\nmiddle of allocating memory\", or \"in the middle of another request\"; this is\n\"async-signal\" timing.  Doing this over the network would be impossible to\nparse (the closest equivalent would be TCP urgent data, which can interrupt an\nexisting data stream in such a way that both can be distinguishd, but is\nlimited to one byte and thus hard to fit JSON in).  Instead, the network API\nwill delay making a `server_cancel` request until it has finished sending any\ncurrent request, if possible.  Clients nonetheless need to make arrangements\nto handle this request in the middle of accepting input from the user (which\nis its entire purpose); for instance, if blocking on the keyboard because\ntheir interface wants a keypress in order to handle whatever input request is\nbeing made at the time, they will need to block on a network socket at the\nsame time in order to be able to handle a possible cancel.\n</p><p>Be aware of possible race conditions: if the client finishes processing a\nrequest just as the server tries to cancel it, then the server will end up\naccidentally cancelling its next request instead.  This is why \"client\ncancelled\" and \"server cancelled\" responses look different: so if the server\nspuriously cancels a request, it can just send the request again, rather than\ninterpreting the client as having cancelled the request intentionally.\n</p><p>No response to the `server_cancel` call should be sent; the server has no use\nfor it, and is not equipped for arbitrarily inconveniently timed responses.\n</p><p>Request arguments: none\n</p><p>Response arguments: no response\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"request_command\">request_command</span></h3>\n<p>This request is sent by the server when the player's character is able to send\na new command.  The client should respond with a game command, possibly\nfollowing up with network API command in order to help decide which command to\nrespond with.\n</p><p>Request arguments:\n</p>\n<ul><li>`boolean debug`: whether debug-mode commands are a reasonable response to</li></ul>\n<p>the prompt\n</p>\n<ul><li>`boolean completed`: false if the client is in the middle of a multi-turn</li></ul>\n<p>command (whether it was interrupted by a monster or the like, or whether\nthe server's just giving the client the chance to interrupt); true if the\nprevious command completed or there was no previous command\n</p>\n<ul><li>`boolean interrupted`: true if the character is aware of danger that might</li></ul>\n<p>cause a player to want to abort their current action (or not repeat a\nrepeated action); this is independent of `completed`\n</p><p>Response arguments:\n</p>\n<ul><li>`string command`: what the player wants to tell their character to do;</li></ul>\n<p>this should be a string returned by `get_commands`, or else one of the\nfollowing internal-use commands:\n</p>\n<ul><li>`\"welcome\"`: Display the \"Welcome [back] to NetHack!\" message; this</li></ul>\n<p>should be sent spontaneously by the client as the first command if the\ngame was restored due to player action (rather than due to a network\ntimeout or the like), rather than in response to user input\n</p>\n<ul><li>`\"repeat\"`: Continue a multiple-turn command, or repeat the last</li></ul>\n<p>command in other circumstances; clients will typically want to send\nthis without further user interaction if `completed` and `interrupted`\nare both false, but may allow the user to override this if they wish\n</p>\n<ul><li>`\"servercancel\"`: Sent as a response if the server cancelled the API</li></ul>\n<p>call using a `server_cancel` call\n</p>\n<ul><li>`struct nh_cmd_arg arg`: a set of arguments to the command (any subset of</li></ul>\n<p>the arguments that `nh_get_command` specified were acceptable)\n</p>\n<ul><li>`enum nh_direction d`: [optional] a direction argument</li>\n<li>`DIR_W` = 0: west (`h`, `4`)</li>\n<li>`DIR_NW` = 1: northwest (`y`, `7`)</li>\n<li>`DIR_N` = 2: north (`k`, `8`)</li>\n<li>`DIR_NE` = 3: northeast (`u`, `9`)</li>\n<li>`DIR_E` = 4: east (`l`, `6`)</li>\n<li>`DIR_SE` = 5: southeast (`n`, `3`)</li>\n<li>`DIR_S` = 6: south (`j`, `2`)</li>\n<li>`DIR_SW` = 7: southwest (`b`, `1`)</li>\n<li>`DIR_UP` = 8: up (`&lt;`)</li>\n<li>`DIR_DOWN` = 9: down (`&gt;`)</li>\n<li>`DIR_SELF` = 10: at self (`.` or `s`)</li>\n<li>`charcode invlet`: [optional] an inventory letter</li>\n<li>`coordinate x`: [optional] an x coordinate</li>\n<li>`coordinate y`: [optional] a y coordinate</li>\n<li>`string str`: [optional] a string</li>\n<li>`charcode spelllet`: [optional] a spell letter</li>\n<li>`int limit`: [optional] the amount to limit the command to</li></ul>\n<h3><span class=\"mw-headline\" id=\"display_menu\">display_menu</span></h3>\n<p>Requests the client to display a menu to the user (either simply for display,\nor to allow them to make a selection), until the user makes a selection or the\nserver cancels the request using a `play_game` response.\n</p><p>Request arguments:\n</p>\n<ul><li>`enum nh_pick_type how`: a specification of how many items the user can</li></ul>\n<p>choose from the menu:     \n</p>\n<ul><li>`PICK_NONE` = 0: the user cannot select items, the menu is purely used</li></ul>\n<p>to present information to the user;\n</p>\n<ul><li>`PICK_ONE` = 1: the user can pick one item from the menu;</li>\n<li>`PICK_ANY` = 2: the user can pick zero or more items from the menu</li>\n<li>`struct nh_menuitem[] items`: the menu items:</li>\n<li>`charcode accel`: a recommended accelerator for this menu entry</li>\n<li>`string caption`: the text of the menu entry</li>\n<li>`charcode group_accel`: a secondary recommended accelerator (which may</li></ul>\n<p>apply to more than one entry; if it does, a `PICK_ANY` menu should\ntoggle all entries with the `group_accel` if the user presses it)\n</p>\n<ul><li>`int id`: a value to return in the `display_menu` response; if `id`</li></ul>\n<p>and `accel` are both 0, then the item is unselectable\n</p>\n<ul><li>`enum nh_menuitem_role role`: what sort of entry this is:</li>\n<li>`MI_TEXT`: a line of text that is logically grouped together even</li></ul>\n<p>if it runs across multiple menu entries;\n</p>\n<ul><li>`MI_NORMAL`: a normal menu item;</li>\n<li>`MI_HEADING`: a heading</li>\n<li>`boolean selected`: whether this menu item should be selected by</li></ul>\n<p>default (in a `PICK_ANY` menu, where choosing an item does not close\nthe menu, choosing an item should toggle its selection state)\n</p>\n<ul><li>`enum placement_hint plhint`: a suggestion for a sensibleplcae on the</li></ul>\n<p>screen to place this menu, and styling for the menu (TODO: many of these\nare unimplemented in nhcurses):\n</p>\n<ul><li>`PLHINT_ANYWHERE` = 0: no suggested location;</li>\n<li>`PLHINT_LEFT` = 1: towards the left side of the screen;</li>\n<li>`PLHINT_RIGHT` = 2: towards the right side of the screen;</li>\n<li>`PLHINT_URGENT` = 3: appropriate styling for an important message;</li>\n<li>`PLHINT_INFO` = 4: appropriate styling for an informational message;</li>\n<li>`PLHINT_ONELINER` = 5: in the message area;</li>\n<li>`PLHINT_CONTAINER` = 6: an appropriate location for container</li></ul>\n<p>contents;\n</p>\n<ul><li>`PLHINT_INVENTORY` = 7: over the inventory area (if any)</li>\n<li>`string title`: the title of the menu</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`int[] results`: a list of the `id` of all selected items after the menu</li></ul>\n<p>was closed; this should be empty for `PICK_NONE` or if the menu was\ncancelled via server or client, empty or a single element for `PICK_ONE`,\nand any subset of elements for `PICK_ANY`,\n</p>\n<ul><li>`enum nh_client_response howclosed`: an explanation of how the menu was</li></ul>\n<p>closed:\n</p>\n<ul><li>`NHCR_ACCEPTED` = 0: pressing Return (or similar), scrolling off the</li></ul>\n<p>end, or (for `PICK_ONE`) selecting an item;\n</p>\n<ul><li>`NHCR_CLIENT_CANCEL` = 1: pressing Escape (or similar)</li>\n<li>`NHCR_SERVER_CANCEL` = 5: by a `server_cancel` request</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"display_objects\">display_objects</span></h3>\n<p>A variant of `display_menu` specialised for inventory menus.  It provides extra\ninformation and allows the user to specify partial stacks of items in addition\nto full stacks.\n</p><p>Request arguments: same as `display_menu`, except for `items`:\n</p>\n<ul><li>`struct nh_objitem[] items`: the menu items (sent as an array, not an</li></ul>\n<p>object, with elements in the order shown here):\n</p>\n<ul><li>`string caption`: as in `display_menu`</li>\n<li>`int id`: as in `display_menu`</li>\n<li>`enum nh_menuitem_role role`: as in `display_menu`</li>\n<li>`int count`: the number of objects in the stack</li>\n<li>`int otype`: the obfuscated object type; I think this is an index into</li></ul>\n<p>the `objects[]` returned from `get_drawing_info`, but I'm not sure\n</p>\n<ul><li>`int oclass`: the object class (are these listed anywhere public?)</li>\n<li>`int weight`: the object's weight, negative numbers means unknown</li>\n<li>`enum nh_bucstatus buc`: the object's beatitude:</li>\n<li>`B_UNKNOWN` = 0: unknown beatitude;</li>\n<li>`B_BLESSED` = 1: blessed;</li>\n<li>`B_UNCURSED` = 2: neither blessed nor cursed;</li>\n<li>`B_CURSED` = 3: cursed</li>\n<li>`charcode accel`: as in `display_menu`</li>\n<li>`charcode group_accel`: as in `display_menu`</li>\n<li>`boolean worn`: true if the object is equipped</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`struct nh_objresult[] pick_list`: a list of all selected items after the</li></ul>\n<p>menu ws closed, as with `display_menu`, but with more information:\n</p>\n<ul><li>`int id`: the `id` specified for this item in the request</li>\n<li>`int count`: the size of a partial stack specified for this item, or</li></ul>\n<p>-1 to select the entire stack; should be -1, or between 1 and the stack\nsize minus 1\n</p>\n<ul><li>`enum nh_client_response howclosed`: as in `display_menu`</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"getdir\">getdir</span></h3>\n<p>Requests a direction from the user (can be cancelled by the user, or the\nserver via a `play_game` response).\n</p><p>Request arguments:\n</p>\n<ul><li>`string query`: a message to print along with the direction request (the</li></ul>\n<p>generic message is along the lines of \"In which direction?\", but the\nmessage is often more specific, similar to \"Zap your wand in which\ndirection?\").\n</p>\n<ul><li>`boolean restricted`: if true, the client should act as though diagonal</li></ul>\n<p>directions do not exist for the purpose of its help text (applies when the\nplayer is polymorphed into a grid bug)\n</p><p>Response arguments:\n</p>\n<ul><li>`enum nh_direction return`: The selected direction:</li>\n<li>`DIR_W` = 0: west (`h`, `4`)</li>\n<li>`DIR_NW` = 1: northwest (`y`, `7`)</li>\n<li>`DIR_N` = 2: north (`k`, `8`)</li>\n<li>`DIR_NE` = 3: northeast (`u`, `9`)</li>\n<li>`DIR_E` = 4: east (`l`, `6`)</li>\n<li>`DIR_SE` = 5: southeast (`n`, `3`)</li>\n<li>`DIR_S` = 6: south (`j`, `2`)</li>\n<li>`DIR_SW` = 7: southwest (`b`, `1`)</li>\n<li>`DIR_UP` = 8: up (`&lt;`)</li>\n<li>`DIR_DOWN` = 9: down (`&gt;`)</li>\n<li>`DIR_SELF` = 10: at self (`.` or `s`)</li>\n<li>`DIR_NONE` = -1: the user cancelled the prompt</li>\n<li>`DIR_SERVERCANCEL` = -2: the server cancelled the prompt</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"getline\">getline</span></h3>\n<p>Requests a line of input from the user (can be cancelled by the user, or the\nserver via a `play_game` response).\n</p><p>Request arguments:\n</p>\n<ul><li>`string query`: The prompt to display along with the request for a line.</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`string line`: The line of input from the user. Is the null string if the</li></ul>\n<p>null string was entered, a single ESC character (hex 1B) if the user\ncancelled the prompt, a single ASCII 28 character (hex 1C) if the server\ncancelled the prompt, or otherwise the user's input.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"getpos\">getpos</span></h3>\n<p>Requests a map location from the user (can be cancelled by the user, or the\nserver via a `play_game` response).\n</p><p>Request arguments:\n</p>\n<ul><li>`boolean force`: if true, the client should make it difficult for the user</li></ul>\n<p>to cancel the prompt (TODO: the idea behind thies option is bad)\n</p>\n<ul><li>`string goal`: a description of what the user is supposd to select</li>\n<li>`coordinate x`: the x coordinate to originally place the cursor at</li>\n<li>`coordinate y`: the y coordinate to originally place the cursor at</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`enum nh_client_response return`: information on how the prompt was closed:</li>\n<li>`NHCR_ACCEPTED` = 0: the user accepted the location using the most</li></ul>\n<p>ordinary input (usually `.`);\n</p>\n<ul><li>`NHCR_CLIENT_CANCEL` = 1: the user cancelled the location prompt</li></ul>\n<p>(e.g. via ESC);\n</p>\n<ul><li>`NHCR_CONTINUE` = 2: the user accepted the location, requesting to</li></ul>\n<p>continue choosing locations (normally accomplished via `,`);\n</p>\n<ul><li>`NHCR_MOREINFO` = 3: the user accepted the location, requesting more</li></ul>\n<p>information about it (normally accomplished via `:`);\n</p>\n<ul><li>`NHCR_MOREINFO_CONTINUE` = 4: a combination of the two previous cases</li></ul>\n<p>(normally accomplished via `;`);\n</p>\n<ul><li>`NHCR_SERVER_CANCEL` = 5: the server cancelled the prompt.</li>\n<li>`coordinate x`: the x coordinate chosen by the user</li>\n<li>`coordinate y`: the y coordinate chosen by the user</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"query_key\">query_key</span></h3>\n<p>Inputs one ASCII code from the user, potentially with a repeat count\nbeforehand.  This is used for inventory queries, and in a few other cases.  As\nalways, can be cancelled by the user or the server.\n</p><p>Request arguments:\n</p>\n<ul><li>`boolean allow_count`: whether to allow a repeat count</li>\n<li>`enum nh_query_key_flags flags`: information about the reason for the</li></ul>\n<p>query:\n</p>\n<ul><li>`NQKF_INVENTORY_ITEM` = 0: an item from inventory</li>\n<li>`NQKF_INVENTORY_ITEM_NULLABLE` = 1: an item from inventory or \"-\" to</li></ul>\n<p>mean bare hands, no item, etc.\n</p>\n<ul><li>`NQKF_INVENTORY_OR_FLOOR` = 2: an item from inventory or \",\" to mean an</li></ul>\n<p>item on the floor\n</p>\n<ul><li>`NQKF_SYMBOL` = 3: an object or monster symbol</li>\n<li>`NQKF_LETTER_REASSIGNMENT` = 4: a new inventory or spell letter</li>\n<li>`string query`: what prompt to display to the user</li></ul>\n<p>Response arguments:\n</p>\n<ul><li>`int count`: the repeat count, -1 if none was given; this is supplied</li></ul>\n<p>even if `allow_count` is false, but is always -1 in that case and should\nbe ignored\n</p>\n<ul><li>`charcode return`: the key the user pressed; this is ESC if cancelled by</li></ul>\n<p>the user, ASCII 28 if cancelled by the server\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"yn\">yn</span></h3>\n<p>Requests the user to choose from a short list of choices represented by ASCII\ncharacters.  As always, can be cancelled by the user or the server.\n</p><p>Request arguments:\n</p>\n<ul><li>`string query`: the prompt to print to the user</li>\n<li>`string set`: a list of appropriate responses; if ESC is included in the</li></ul>\n<p>list, it does not mean that ESC is an appropriate response, but rather, it\nmeans that all responses after the ESC should be hidden from the user\n</p>\n<ul><li>`charcode def`: the default value to return in the case of a user cancel</li></ul>\n<p>(this will be shown to the user in many interfaces)\n</p><p>Response arguments:\n</p>\n<ul><li>`charcode return`: the choice the user chose; this is `def` if cancelled</li></ul>\n<p>by the user, ASCII 28 if cancelled by the server\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"load_progress\">load_progress</span></h3>\n<p>Sent by the server periodically during time-consuming background operations in\norder to prevent the connection dropping.  This will never have a display list\nattached.\n</p><p>Request arguments:\n</p>\n<ul><li>`int progress`: a number from 0 to 10000, proportional to the estimated</li></ul>\n<p>length of the background operation\n</p><p>Response arguments: no response is sent for this message\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"server_error\">server_error</span></h3>\n<p>Called by the server if something goes unrecoverably wrong.  The server closes\nthe connection immediately after sending this, so sending a response is futile\nand not particularly useful.  (For the same sort of message directed in the\nopposite direction, see `exit_game`.)\n</p><p>Request arguments:\n</p>\n<ul><li>`boolean error`: true if the error is caused by something that the client</li></ul>\n<p>did, false if the error is internal to the server\n</p>\n<ul><li>`string message`: a description of what went wrong, which can be displayed</li></ul>\n<p>to the user\n</p><p>No response.\n</p><p><br />\n</p>\n<h2><span class=\"mw-headline\" id=\"Display_elements\">Display elements</span></h2>\n<p>Any message sent by the server, whether as a request or a response, might have\na `display` element attached, which specifies updates to the map.  The\nexceptions are `auth`, `register`, and `cancel_server_request`, which never\ncarry map data.  The `display` element is an array of elements to draw; each\nelement can be one of the below types.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"delay_output\">delay_output</span></h3>\n<p>Specifies that the client should wait for a short time at this point before\ndoing any further rendering.\n</p><p>Arguments: `nil`.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"display_buffer\">display_buffer</span></h3>\n<p>Specifies that the client should display text to the user.  (The text may be\nquite long, and should be word-wrapped and tab-expanded.)\n</p><p>Arguments: an object:\n</p>\n<ul><li>`string buf`: the text to display</li>\n<li>`boolean trymove`: appears to be unused</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"level_changed\">level_changed</span></h3>\n<p>Specifies that the client should change its level display mode.\n</p><p>TODO: make this an enum.\n</p><p>Arguments: an integer:\n</p>\n<ul><li>`LDM_DEFAULT` = 0: normal display;</li>\n<li>`LDM_HELL` = 1: display appropriate for Gehennom;</li>\n<li>`LDM_QUEST` = 2: display appropriate for the Quest;</li>\n<li>`LDM_MINES` = 3: display appropriate for the Mines;</li>\n<li>`LDM_SOKOBAN` = 4: display appropriate for Sokoban;</li>\n<li>`LDM_ROGUE` = 5: display appropriate for the Rogue level;</li>\n<li>`LDM_KNOX` = 6: display appropriate for Fort Ludios</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"list_items\">list_items</span></h3>\n<p>Specifies a list of items in inventory or on the floor.\n</p><p>TODO: The API of this is vulnerable to length mismatches.\n</p><p>Arguments: an object:\n</p>\n<ul><li>`int icount`: length of `items`</li>\n<li>`boolean invent`: true means that this list is the player's inventory;</li></ul>\n<p>false means that this list is the list of items on the ground\n</p>\n<ul><li>`struct nh_objitem[] items`: the list of items about which the client is</li></ul>\n<p>being informed\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"outrip\">outrip</span></h3>\n<p>Shows an appropriate message to reflect character death (and similar\ngame-over situations like ascension).\n</p><p>TODO: The API of this is vulnerable to length mismatches.\n</p><p>Arguments: an object:\n</p>\n<ul><li>`int gold`: amount of gold upon death</li>\n<li>`int how`: as `end_how` in `get_topten`</li>\n<li>`int icount`: length of `items`</li>\n<li>`struct nh_menuitem[] items`: list of messages to print; only the</li></ul>\n<p>`caption` field is used. TODO: There has to be a better API for this!\n</p>\n<ul><li>`string killbuf`: the cause of the game over</li>\n<li>`string name`: the name of the character whose game ended</li>\n<li>`boolean tombstone`: true to request the drawing of a tombstone graphic;</li></ul>\n<p>false presents the information entirely as text\n</p>\n<ul><li>`int year`: a year to draw on the tombstone</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"pause\">pause</span></h3>\n<p>Wait for user input in order to give the user a chance to read messages or\nlook at the map.\n</p><p>TODO: This has a pretty weird interaction with server cancel requests.  It\nshould probably be made a server request, not a display element.\n</p><p>Arguments: an `enum nh_pause_reason`:\n</p>\n<ul><li>`P_MESSAGE` = 0: give the user a chance to read the message area</li>\n<li>`P_MAP` = 1: give the user a chance to look at the map</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"print_message\">print_message</span></h3>\n<p>Print a message in the message area.\n</p><p>TODO: This API is badly designed and has caused several bugs.\n</p><p>Arguments: an object:\n</p>\n<ul><li>`string msg`: the message to print</li>\n<li>`int turn`: the turn on which the message was sent</li></ul>\n<p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"print_message_nonblocking\">print_message_nonblocking</span></h3>\n<p>Print a message in the message area.  This message is not important enough to\nensure that the user sees it, and the client should aim to prevent this\nforcing a --More-- or similar.\n</p><p>Arguments: as print_message\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"raw_print\">raw_print</span></h3>\n<p>Display a message to the user, attempting to bypass the standard rendering and\njust displaying the message directly on a console, perhaps after the program\nexits.  (This is typically used to make a record of error messages.)\n</p><p>Arguments: a string, the message to print\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"update_screen\">update_screen</span></h3>\n<p>Change what is displayed at a particular map location.\n</p><p>Arguments: an object:\n</p>\n<ul><li>`mapdelta dbuf`: the map delta, in compressed form (see below)</li>\n<li>`coordinate ux`: the character's x location</li>\n<li>`coordinate uy`: the character's y location</li></ul>\n<p>A map delta can be an integer 0 if nothing at all has changed.  Otherwise it\nis a list of column deltas.  A column delta of 0 means that column is empty,\nand 1 means it is unchanged since last time.  Otherwise a column delta is a\nlist of cell deltas.  Again, 0 means empty, 1 means unchanged.  Otherwise the\ncell delta is an `int[10]`, mostly of indexes into the arrays returned by\n`get_drawing_info`:\n</p>\n<ul><li>[0] encoded effect number: the encoding is quite complex, see `draw_map`</li></ul>\n<p>in `libnethack/src/map.c` for an example on how to decode it; it\neventually decodes into offsets into `effects`, `zapsyms`, `zaptypes`,\n`swallowsyms`, `explsyms`, and/or `expltypes`\n</p>\n<ul><li>[1] index into `bgelements`</li>\n<li>[2] index into `traps`</li>\n<li>[3] index into `objects`</li>\n<li>[4] index into `monsters`, representing the monster associated with an</li></ul>\n<p>object (e.g. \"lichen\" for \"lichen corpse\")\n</p>\n<ul><li>[5] index into `monsters`, representing a monster on that square</li>\n<li>[6] a bitmask that represents details of a monster on the square:</li>\n<li>`MON_TAME` = 1: the monster is tame</li>\n<li>`MON_RIDDEN` = 2: this monster has the player riding it</li>\n<li>`MON_DETECTED` = 4: this monster is seen via monster detection</li>\n<li>`MON_WARNING` = 8: this is a warning symbol, not a monster</li>\n<li>`MON_PEACEFUL` = 16: the monster is peaceful</li>\n<li>[7] a bitmask that represents any branding of the square:</li>\n<li>`NH_BRANDING_STEPPED` = 1: the player has stepped on the square</li>\n<li>`NH_BRANDING_LOCKED` = 2: the player knows this door is locked</li>\n<li>`NH_BRANDING_UNLOCKED` = 4: the player knows this door is unlocked</li>\n<li>`NH_BRANDING_TRAPPED` = 8: the player knows this square is trapped</li>\n<li>`NH_BRANDING_UNTRAPPED` = 16: the player knows this door is untrapped</li>\n<li>[8] index into `invis`</li>\n<li>[9] a boolean, not an int; true if the character can see this square</li></ul>\n<p>Indexes have 1 added to them, so that 0 can represent the lack of the\nappropriate sort of drawable entity on the square.\n</p><p><br />\n</p>\n<h3><span class=\"mw-headline\" id=\"update_status\">update_status</span></h3>\n<p>Updates the character's status information.\n</p><p>Arguments: an object:\n</p>\n<ul><li>`int ac`: the character's AC (10 = unarmored, lower is better)</li>\n<li>`int align`: the character's alignment (TODO: what format?)</li>\n<li>`boolean can_enhance`: true if the #enhance command is usable</li>\n<li>`int ch`: the character's Charisma stat</li>\n<li>`int co`: the character's Constitution stat</li>\n<li>`charcode coinsym`: the character to use to represent money</li>\n<li>`int cur_monnum`: the species the character is polymorphed into (an index</li></ul>\n<p>into `monsters` returned from `get_drawing_info`)\n</p>\n<ul><li>`int dx`: the character's Dexterity stat</li>\n<li>`int en`: the character's current Pw</li>\n<li>`int enmax`: the character's maximum Pw</li>\n<li>`int gold`: the character's gold in open inventory</li>\n<li>`int hp`: the character's current HP</li>\n<li>`int hpmax`: the character's maximum HP</li>\n<li>`int in`: the character's Intelligence stat</li>\n<li>`int level`: the character's experience level</li>\n<li>`string level_desc`: a textual description of the character's current</li></ul>\n<p>dungeon level\n</p>\n<ul><li>`int max_rank_sz`: the maximum possible width of a character's</li></ul>\n<p>professional title, given their role, even if they change gender or level\n</p>\n<ul><li>`int monnum`: the species that the character is naturally (an index</li></ul>\n<p>into `monsters` returned from `get_drawing_info`)\n</p>\n<ul><li>`int moves`: the number of turns this game has lasted (1 for the first</li></ul>\n<p>turn)\n</p>\n<ul><li>`int plname`: the character's name</li>\n<li>`string rank`: the character's professional title</li>\n<li>`string racename`: the character's unpolymorphed race (`human`, `dwarf`,</li></ul>\n<p>etc.)\n</p>\n<ul><li>`string gender`: the character's unpolymorphed gender (`male`, `female`,</li></ul>\n<p>`neuter`); this is affected by permanent gender changes, but not by\npolymorphing into a male/female-only monster\n</p>\n<ul><li>`string rolename`: the character's current role (`Archaeologist`, etc.)</li>\n<li>`int score`: the character's current score</li>\n<li>`int st`: the integer part of the character's Strength stat</li>\n<li>`int st_extra`: the fractional part of the character's Strength stat</li>\n<li>`string[] statusitems`: a list of status lights currently affecting the</li></ul>\n<p>character\n</p>\n<ul><li>`int wi`: the character's Wisdom stat</li>\n<li>`int x`: the character's x coordinate</li>\n<li>`int xp`: the character's total number of gained experience points (minus</li></ul>\n<p>any lost to level drain)\n</p>\n<ul><li>`int y`: the character's y coordinate</li>\n<li>`int z`: the character's z coordinate</li></ul>\n<p><br />\n</p><p><br />\n</p>\n<div style=\"display:none; right:10px; padding-bottom: 17px\" class=\"metadata topicon nopopups\"><div style=\"margin-top: -10px\"><a href=\"/wiki/NetHackWiki:Next_version\" title=\"This article describes a 3.4.3-based variant of NetHack. Click here for more information.\"><img alt=\"This article describes a 3.4.3-based variant of NetHack. Click here for more information.\" src=\"/images/5/5d/Nh343var-icon.png\" width=\"32\" height=\"32\" /></a></div></div>\n\n<!-- \nNewPP limit report\nCached time: 20240926185404\nCache expiry: 604800\nDynamic content: false\nCPU time usage: 0.041 seconds\nReal time usage: 0.073 seconds\nPreprocessor visited node count: 246/1000000\nPreprocessor generated node count: 599/1000000\nPost‐expand include size: 1244/2097152 bytes\nTemplate argument size: 258/2097152 bytes\nHighest expansion depth: 8/40\nExpensive parser function count: 0/100\nUnstrip recursion depth: 0/20\nUnstrip post‐expand size: 0/5000000 bytes\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%   15.974      1 Template:Variant-343\n100.00%   15.974      1 -total\n 43.18%    6.898      1 Template:Version_icon\n 27.33%    4.365      1 Template:Top_icon\n-->\n\n<!-- Saved in parser cache with key wikihackdb:pcache:idhash:20841-0!canonical and timestamp 20240926185404 and revision id 94526\n -->\n</div></div>\t\t\t\t\t<div class=\"printfooter\">\n\t\t\t\t\t\tRetrieved from \"<a dir=\"ltr\" href=\"https://nethackwiki.com/index.php?title=NetHack_4_Network_Protocol&amp;oldid=94526\">https://nethackwiki.com/index.php?title=NetHack_4_Network_Protocol&amp;oldid=94526</a>\"\t\t\t\t\t</div>\n\t\t\t\t<div id=\"catlinks\" class=\"catlinks\" data-mw=\"interface\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/wiki/Special:Categories\" title=\"Special:Categories\">Categories</a>: <ul><li><a href=\"/wiki/Category:Variant-343_articles\" title=\"Category:Variant-343 articles\">Variant-343 articles</a></li><li><a href=\"/wiki/Category:Annotations\" title=\"Category:Annotations\">Annotations</a></li><li><a href=\"/wiki/Category:Variants\" title=\"Category:Variants\">Variants</a></li></ul></div></div>\t\t\t\t<div class=\"visualClear\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"mw-navigation\">\n\t\t\t<h2>Navigation menu</h2>\n\t\t\t<div id=\"mw-head\">\n\t\t\t\t\t\t\t\t\t<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">\n\t\t\t\t\t\t<h3 id=\"p-personal-label\">Personal tools</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"pt-createaccount\"><a href=\"/index.php?title=Special:CreateAccount&amp;returnto=NetHack+4+Network+Protocol\" title=\"You are encouraged to create an account and log in; however, it is not mandatory\">Create account</a></li><li id=\"pt-login\"><a href=\"/index.php?title=Special:UserLogin&amp;returnto=NetHack+4+Network+Protocol\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div id=\"left-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">\n\t\t\t\t\t\t<h3 id=\"p-namespaces-label\">Namespaces</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/wiki/NetHack_4_Network_Protocol\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li><li id=\"ca-talk\" class=\"new\"><span><a href=\"/index.php?title=Talk:NetHack_4_Network_Protocol&amp;action=edit&amp;redlink=1\" rel=\"discussion\" title=\"Discussion about the content page (page does not exist) [t]\" accesskey=\"t\">Discussion</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-variants-label\" />\n\t\t\t\t\t\t<h3 id=\"p-variants-label\">\n\t\t\t\t\t\t\t<span>Variants</span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t<div id=\"right-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">\n\t\t\t\t\t\t<h3 id=\"p-views-label\">Views</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-view\" class=\"collapsible selected\"><span><a href=\"/wiki/NetHack_4_Network_Protocol\">Read</a></span></li><li id=\"ca-viewsource\" class=\"collapsible\"><span><a href=\"/index.php?title=NetHack_4_Network_Protocol&amp;action=edit\" title=\"This page is protected.&#10;You can view its source [e]\" accesskey=\"e\">View source</a></span></li><li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/index.php?title=NetHack_4_Network_Protocol&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-cactions-label\" />\n\t\t\t\t\t\t<h3 id=\"p-cactions-label\"><span>More</span></h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-search\" role=\"search\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t<label for=\"searchInput\">Search</label>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<form action=\"/index.php\" id=\"searchform\">\n\t\t\t\t\t\t\t<div id=\"simpleSearch\">\n\t\t\t\t\t\t\t\t<input type=\"search\" name=\"search\" placeholder=\"Search NetHackWiki\" title=\"Search NetHackWiki [f]\" accesskey=\"f\" id=\"searchInput\"/><input type=\"hidden\" value=\"Special:Search\" name=\"title\"/><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"/><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\"/>\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"mw-panel\">\n\t\t\t\t<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/wiki/Main_Page\"  title=\"Visit the main page\"></a></div>\n\t\t\t\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">\n\t\t\t<h3 id=\"p-navigation-label\">Navigation</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-NetHack-Wiki\"><a href=\"/wiki/Main_Page\">NetHack Wiki</a></li><li id=\"n-Forum\"><a href=\"/wiki/Forum:Watercooler\">Forum</a></li><li id=\"n-portal\"><a href=\"/wiki/NetHackWiki:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li><li id=\"n-recentchanges\"><a href=\"/wiki/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/wiki/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-Popular_pages\" aria-labelledby=\"p-Popular_pages-label\">\n\t\t\t<h3 id=\"p-Popular_pages-label\">Popular pages</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Dungeon-features\"><a href=\"/wiki/Dungeon_feature\">Dungeon features</a></li><li id=\"n-Monsters\"><a href=\"/wiki/Monster#Canonical_list_of_monsters\">Monsters</a></li><li id=\"n-In.2FExtrinsics\"><a href=\"/wiki/Property#Intrinsic_properties\">In/Extrinsics</a></li><li id=\"n-Items\"><a href=\"/wiki/Item\">Items</a></li><li id=\"n-Spells\"><a href=\"/wiki/Spellbook#List_of_spellbooks\">Spells</a></li><li id=\"n-Game-options\"><a href=\"/wiki/Options\">Game options</a></li><li id=\"n-Websites\"><a href=\"/wiki/Websites\">Websites</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-contributing\" aria-labelledby=\"p-contributing-label\">\n\t\t\t<h3 id=\"p-contributing-label\">Contributing</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Style-guide\"><a href=\"/wiki/NetHackWiki:Style_guide\">Style guide</a></li><li id=\"n-help\"><a href=\"/wiki/NetHackWiki:How_to_help\" title=\"The place to find out\">How to help</a></li><li id=\"n-Current-projects\"><a href=\"/wiki/NetHackWiki:Current_projects\">Current projects</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">\n\t\t\t<h3 id=\"p-tb-label\">Tools</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"t-whatlinkshere\"><a href=\"/wiki/Special:WhatLinksHere/NetHack_4_Network_Protocol\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/wiki/Special:RecentChangesLinked/NetHack_4_Network_Protocol\" rel=\"nofollow\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-specialpages\"><a href=\"/wiki/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-print\"><a href=\"/index.php?title=NetHack_4_Network_Protocol&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li><li id=\"t-permalink\"><a href=\"/index.php?title=NetHack_4_Network_Protocol&amp;oldid=94526\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/index.php?title=NetHack_4_Network_Protocol&amp;action=info\" title=\"More information about this page\">Page information</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t<div id=\"footer\" role=\"contentinfo\">\n\t\t\t\t\t\t<ul id=\"footer-info\">\n\t\t\t\t\t\t\t\t<li id=\"footer-info-lastmod\"> This page was last edited on 3 June 2015, at 21:41.</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<ul id=\"footer-places\">\n\t\t\t\t\t\t\t\t<li id=\"footer-places-about\"><a href=\"/wiki/NetHackWiki:About\" title=\"NetHackWiki:About\">About NetHackWiki</a></li>\n\t\t\t\t\t\t\t\t<li id=\"footer-places-disclaimer\"><a href=\"/wiki/NetHackWiki:General_disclaimer\" title=\"NetHackWiki:General disclaimer\">Disclaimers</a></li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t<ul id=\"footer-icons\" class=\"noprint\">\n\t\t\t\t\t\t\t\t\t\t<li id=\"footer-poweredbyico\">\n\t\t\t\t\t\t<a href=\"//www.mediawiki.org/\"><img src=\"/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"/></a>\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div style=\"clear: both;\"></div>\n\t\t</div>\n\t\t\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.041\",\"walltime\":\"0.073\",\"ppvisitednodes\":{\"value\":246,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":599,\"limit\":1000000},\"postexpandincludesize\":{\"value\":1244,\"limit\":2097152},\"templateargumentsize\":{\"value\":258,\"limit\":2097152},\"expansiondepth\":{\"value\":8,\"limit\":40},\"expensivefunctioncount\":{\"value\":0,\"limit\":100},\"unstrip-depth\":{\"value\":0,\"limit\":20},\"unstrip-size\":{\"value\":0,\"limit\":5000000},\"timingprofile\":[\"100.00%   15.974      1 Template:Variant-343\",\"100.00%   15.974      1 -total\",\" 43.18%    6.898      1 Template:Version_icon\",\" 27.33%    4.365      1 Template:Top_icon\"]},\"cachereport\":{\"timestamp\":\"20240926185404\",\"ttl\":604800,\"transientcontent\":false}}});mw.config.set({\"wgBackendResponseTime\":131});});</script>\n\t</body>\n</html>\n","rawPage":"This is a description of the [[NetHack 4]] networking protocol.\n\nNote: This page tends to get out of date quickly. A much more up-to-date version can be found [http://trac.nethack4.org/browser/doc/server_protocol.txt here].\n\nThe protocol is based on JSON. Each client command and each server response is a single, valid JSON object in UTF8 encoding.\n\n\n==Basics==\n\nThe protocol is based on JSON.  Each command and each response is a single,\nvalid JSON object in UTF8 encoding. The server will insert a NUL character\nbetween each command it sends, to allow clients to easily determine where one\nends and the next starts (NUL cannot appear in a JSON encoding). The client\ndoes not currently insert such NULs. (TODO: It probably should, and the server\nshould probably respect them, in case the client needs to send `exit_game`\nimmediately after another command, without waiting for a response in between.)\n\nThe server protocol is an enhancement of the protocol used by a window port to\nconnect to a local game; the two are very similar, and so this documentation\nmay also be consulted to gain some amount of understanding of the behaviour of\na windowport.  There are a few commands that are specific to server use,\nthough, such as `auth`, and the API for map updates is different.  For a full\nexplanation of the various protocols in use, see `doc/mainloop.txt`.\n\nThe following types are all special cases of integers:\n* All enumerated types\n* bitflags\n* boolean\n* charcode\n* connid\n* coordinate\n* gameid\n\n\n==Interaction==\n\nOnce the client has connected to the server, it must send either an `auth` or\na `register` command.  If the client sends a successful `register` command, a\nfollowing `auth` command is not necessary.  When the client is authenticated\nany other command may be sent to the server.\n\nNormal flow is driven by the client and/or server sending commands and\nreceiving responses to them; a command can be sent from the client to the\nserver, or (more rarely) the other way round.  (Server commands are sent if\nthe server needs more information to fulfil a client command, or to inform the\nclient of unusual conditions, such as a retroactive cancel of a command in\nprogress.)  Server commands and responses can also carry an attached `display`\nelement with map updates (see later in this document).\n\nIn general, a command might be sent/received by the client and/or server at\nany point after the authentication.  It is thus incorrect for a client to\nblock on user input, because it might have to handle a server command that\narrives unexpectedly.\n\nIt is also incorrect to block on the response to a command, because a command\nmight be followed up by another command rather than a response.  It is\nacceptable, however, for the client to ignore user input after sending a\ncommand, until either a command or a response is received; whenever a command\nis sent, the client can assume that the server will react to it in some way,\neither via responding or via sending a followup command.\n70\tCommands and responses are always well-nested; if a response is sent, it will\nbe to the most recent unresponded command sent by the other end of the\nconnection.  Additionally, messages usually alternate between client and\nserver.  Currently, the only exception to this is the `cancel_server_request`\ncommand that the server uses to countermand a server request; it can be sent\nby the server even if the previous message was also sent by the server.\n\n\n==Client commands==\n\nThese commands are sent by the client, expecting a response from the server.\n\n\n===auth===\n\nEither `auth` or `register` must always be the first command sent, and no\nother commands may be sent until the original `auth` or `register` command\nreceives a response.\n\nThis command is specific to client/server communication, and is not used for\nlocal play.  It specifies which user is making the connection.\n\nUpon creating a new connection, there will be no game loaded: `play_game` will\nneed to be used before commands that require a game to be loaded will work\n(and those commands can only be given to follow up server requests that follow\nup the `play_game` call).\n\nCommand arguments:\n* `string username`: the username of the user who is making the connection\n* `string password`: the password of the user who is making the connection\n\nResponse arguments:\n* `enum authresult return`: whether the connection succeeded:\n* [`NO_CONNECTION` = 0: not sent by the server, simulated by the client\nlibrary if the connection fails]\n* `AUTH_FAILED_UNKNOWN_USER` = 1: the given user does not exist\n* `AUTH_FAILED_BAD_PASSWORD` = 2: the given password is wrong\n* `AUTH_SUCCESS_NEW` = 3: a new connection was created\n* `int[3] version`: the version number of the server\n* [0] The major version number (if it's not 4, this document is probably\ninaccurate)\n* [1] The minor version number (changes when save compatibility breaks)\n* [2] The patchlevel version number (changes when a release is made that\ndoes not break save compatibility)\n\nTODO: What happens if this command is sent when a connection already exists?\n\n\n===register===\n\n\nLike `auth`, except it requires a nonexistent rather than existing username,\nand will create an account.  This cannot re-establish an existing connection,\nfor obvious reasons.\n\nCommand arguments:\n* `string username`: the username for the new account\n* `string password`: the password to register the account with\n* `string email`: (optional) an email address to store in the database; the\nserver admin can use this for password reset requests, etc.\n\nResponse arguments: same as `auth`, except `AUTH_FAILED_UNKNOWN_USER` means\nthat the user account already exists.\n\n\n===describe_pos===\n\n\nReturns farlook information for a given map square.  This command may only be\nmeaningfully sent while a game is running, and corresponds to the\n`nh_describe_pos` API call in libnethack.  If the game is not running, all\nstring values in the response will be the null string, `objcount` will be -1,\nand `in` will be false.\n\nCommand arguments:\n* `boolean is_in`: Whether to return the `in` element in the response\n* `coordinate x`: x coordinate of the map square to farlook\n* `coordinate y`: y coordinate of the map square to farlook\n\nResponse arguments:\n* `string bgdesc`: a description of the background\n* `boolean feature_described`: true if `bgdesc` is redundant to other fields\n* `string effectdesc`: a description of an effect\n* `boolean in`: true if an object is \"in\" rather than \"on\" the background\n* `string invisdesc`: a description of a remembered invisible monster\n* `string mondesc`: a description of a monster\n* `int objcount`: the number of object stacks on the square\n* `string objdesc`: a description of an object\n* `string trapdesc`: a description of a trap\n\nStrings in the response are zero-length if they would describe something that\ndoes not exist on the map square given by (x,y) (or that the character is\nunaware of), e.g. `trapdesc` for a square with no known trap.  Otherwise, they\ndescribe the map square given by (x,y).\n\n\n===exit_game===\n\n\nCauses the game to stop running, either via saving/suspending it, or via\nquitting it.  `EXIT_SAVE` is equivalent to just dropping the connection in\nterms of its user-visible effect, but is kinder on server resources than\ndropping the connection would be.  This command can be sent if there is no\nrunning game, but does nothing but return true in that situation.  It\ncorresponds to the `nh_exit_game` API call in libnethack.\n178\tIf the game is running, this API call will typically return via `play_game`\nresponse (see the documentation for `play_game`) rather than directly\n(especially if it needs to get out of multiple nested contexts; it can be sent\nat any time while the game is running and there is some server request pending\nthat the client could respond to).  Obviously, it must return directly if\nthere is no game running.\n\nCommand arguments:\n* `enum nh_exit_types exit_type`: what sort of exit to perform\n* `EXIT_SAVE` = 0: detach from the game and drop the connection; the\nsave file remains intact\n* `EXIT_QUIT` = 1: delete the game's save file and enter the game over\nsequence\n* `EXIT_PANIC` = 2: like `EXIT_SAVE`, but record that there was a\nproblem in the panic log\n* `EXIT_RESTART` = 3: like `EXIT_SAVE`, but the client will be told to\nimmediately reload the game (`CLIENT_RESTART`); clients use this to\nchange between play, watch and replay modes\n\nResponse arguments:\n* `boolean return`: true if the game exited (whether due to a save, to a\nquit, or to the process being panicked), or if no game was running; false\nif the user cancelled the exit; true is rarely going to be observable\nexcept in error conditions or if no game is running.\n\n\n===get_commands===\n\n\nThis command lists which commands exist and can be used in a `request_command`\nresponse, and corresponds to the `nh_get_commands` API call in libnethack.\n\nIn addition to information about the commands, it also returns default\nkeybindings for them; clients can choose to respect or ignore these.  This\nmeans that minor changes to the game's commands can be made without needing to\nalter clients.\n\nThis command can be used even when the game is not running; whether there is a\nrunning game or not, it will return all commands that can be used by the user,\nincluding debug mode commands. The client may want to hide debug mode commands\nfrom non-debug-mode games.\n\nCommand arguments: none\n\nResponse arguments:\n* `struct nh_cmd_desc[] cmdlist`: a list of the commands that exist:\n* `string name`: the name of the command (`command` in\n`request_command`);\n* `string desc`: a human-readable description of the command;\n* `unsigned flags`: information about the command, a bitmask of:\n* `CMD_ARG_DIR` = 1: the command can accept a direction argument;\n* `CMD_ARG_POS` = 2: the command can accept a position argument;\n* `CMD_ARG_OBJ` = 4: the command can accept an inventory object\nargument;\n* `CMD_ARG_STR` = 8: the command can accept a string argument;\n* `CMD_ARG_SPELL` = 16: the command can accept a spell argument;\n* `CMD_ARG_LIMIT` = 32: the command can accept a numeric argument\nthat specifies a reduced maximum for things like multishot or item\nstack size;\n* `CMD_EXT` = 1024: it is recommended that by default, this command\nshould be available as an extended command (via `#`);\n* `CMD_MOVE` = 2048: this is a movement command (and thus it is not\nunreasonable to be able to keybind to individual direction\narguments to this command);\n* `CMD_HELP` = 4096: it is recommended that by default, this command\nshould be available via the help menu on `?`;\n* `CMD_NOTIME` = 8192: this command makes no changes to the\ngamestate, and thus can be used while watching or replaying a\ngame;\n* `CMD_DEBUG` = 16384: this command is only available in debug mode;\n* `CMD_INTERNAL` = 32768: although commands with this flag set exist,\nthey are never returned from `nh_get_commands`.\n* `charcode def`: a default keybinding for this command (ASCII,\ncontrol-ASCII, meta-ASCII);\n* `charcode alt`: another, lower-priority, default keybinding for this\ncommand\n\n\n===get_obj_commands===\n\n\nRequests a list of reasonable commands for use with a specified inventory\nitem.  (TODO: This is missing a check on whether the game is running.)  This\ncommand is intended for use in response to an item being selected from the\ninventory menu, itemactions-style; it will give more specific explanations of\nwhat the commands do than `get_commands` does, because it is specialised to\none object.\n\nCommand arguments:\n* `charcode invlet`: The inventory letter of the item to get commands for.\n\nResponse arguments: the same as `get_commands`.\n\nNote that unlike `get_commands`, which can recommend control- or meta-modified\nkeys for its keybindings, `get_obj_commands` favours capital and lowercase\nletters only, so that its keybindings can easily be placed in a menu.  This\nmeans that the recommended keybindings may not be identical to those produced\nvia `get_commands`.\n\n\n===get_drawing_info===\n\n\nRequests information about what drawable entities exist in the game: most code\nthat communicates display information will return indexes into lists, and this\nfunction returns those lists.  It contains both API names, and default ASCII\nrepresentations (these need to be available to the server anyway so that it\ncan produce dumplogs, so it may as well communicate these to the client in\ncase it wants to use them).  It is reasonable to call this even when the game\nis not running.  This command corresponds to the `nh_get_drawing_info` API\ncall in libnethack.\n\nTODO: Sending an array and its length separately over JSON is always a bad\nidea; what if they don't match? There's currently a `int num_*` for each\n`struct nh_symdef[]` in the response arguments, but I removed the\ndocumentation for them in preparation for fixing this rather major issue.\n\nCommand arguments: none\n\nResponse arguments:\n* `int feature_offset`:\n* `struct nh_symdef[] bgelements`: Backgrounds.\n* `struct nh_symdef[] effects`: Effects.\n* `struct nh_symdef[] explsyms`: Explosion shape/locations.\n* `struct nh_symdef[] expltypes`: Explosion appearances.\n* `struct nh_symdef[] invis`: Memory of invisible monsters.\n* `struct nh_symdef[] monsters`: Monsters.\n* `struct nh_symdef[] objects`: Items.\n* `struct nh_symdef[] swallowsyms`: The inside of an engulfing monster.\n* `struct nh_symdef[] traps`: Traps.\n* `struct nh_symdef[] warnings`: Warning symbols.\n* `struct nh_symdef[] zapsyms`: Zap shape/locations.\n* `struct nh_symdef[] zaptypes`: Zap appearances.\n\nwhere `struct nh_symdef[]` is defined as follows (and sent as an array, with\nits fields in this order):\n* `string name`: The API name of a drawable entity.  Explosions and zaps\nhave two API names; one for the shape and location within the shape (the\n`*syms` list), one for the appearance (the `*types` list).  Other drawable\nentities have just the one API name.  Clients should feel free to hardcode\noverrides for specific API names.  (Note that an API name is not always\nthe same as a tile name; use the functions in tilesequence.c if you need\nto convert, e.g. to discover a tile number for a given API name.)\n* `charcode character`: A recommended ASCII representation of this drawable\nentity.  Clients can use this as a fallback if they encounter an\nunrecognised API name.\n* `colourcode colour`: A recommended color for this drawable entity.\n\nWhen using the recommended ASCII representations, for explosions and zaps\n(which have two API names), the character should be taken from the\nshape/location field, and the color from the appearance field.\n\n\n===get_options===\n\n\nCurrently under revision.  TODO: When we decide what the API call actually\ndoes, document it properly.\n\nCommand arguments:\n* `enum nh_option_list list`: what sort of options to list\n* (values, semantics under revision)\n\nResponse arguments:\n* `struct nh_option_desc[] options`:\n* `string name`: short name of the option\n* `string helptxt`: long desription of the option\n* `enum nh_opttype type`: what type of values the option takes:\n* `OPTTYPE_BOOL` = 0: booleans;\n* `OPTTYPE_INT` = 1: integers;\n* `OPTTYPE_ENUM` = 2: a fixed list of possibilities;\n* `OPTTYPE_STRING` = 3: strings;\n* `OPTTYPE_AUTOPICKUP_RULES` = 4: lists of autopickup rules\n* `union nh_optvalue value`: the value (or default value? under revision)\nof the option\n* `union _ desc`: the legal values for the option:\n* `nil` for `OPTTYPE_BOOL`;\n* `struct {int min, int max}` for `OPTTYPE_INT`;\n* list of strings for `OPTTYPE_ENUM`;\n* an integer for strings (reflecting the maximum length);\n* list of strings for autopickup rules (TODO: figure out what format\nthese are in)\n\nAn autopickup rule has the following structure:\n* `enum autopickup action`: what action to take upon encountering this item:\n* `AP_GRAB` = 0: pick it up regardless of `pickup_types`;\n* `AP_LEAVE` = 1: leave it on the ground regardless of `pickup_types`.\n* `enum nh_bucstatus buc`: a filter against beatitude:\n* `B_UNKNOWN` = 0: match only items with unknown beatitude;\n* `B_BLESSED` = 1: match only blessed items;\n* `B_UNCURSED` = 2: match only non-blessed non-cursed items;\n* `B_CURSED` = 3: match only cursed items;\n* `B_DONT_CARE` = 4: do not filter items based on beatitude\n* `int oclass`: an object class of items to match\n* `string pattern`: a regular expression that matches items\n\n\n===set_option===\n\n\nChanges a (non-interface) option on the server.  This corresponds to the\n`nh_set_option` API call in libnethack.  TODO: This command should only be\nrunnable if a followup to `request_command` is legal, except possibly for\nsetting birth options; this needs more thought.\n\nCommand arguments:\n* `boolean isstr`: if true, allows sending the option value as a string\nregardless of the option's actual type (the server will parse it into an\nappropriate value for the option); if false, the client has already parsed\nthe option\n* `string name`: the name of the option to set\n* `union nh_optvalue value`: the value for the option, in a format depending\non the option's type and whether `isstr` is set (a string, integer, or\nlist of autopickup rules).\n\nResponse arguments:\n* `struct nh_option_desc option`: TODO: work out if we need this and what\nits semantics are\n* `int return`: an integer treated as a boolean; nonzero if the option value\ngiven was reasonable, zero if it was unreasonable (and thus the server did\nnot try to set it)\n\n\n===get_roles===\n\n\nRequests information on what roles, races, genders, and alignments exist in\nthe game, and what combinations of them are legal.  This command corresponds to\nthe `nh_get_roles` API call in libnethack.\n\nTODO: This API is inherently prone to buffer length mismatches.  There should\nnot be separate `num_` fields.\n\nCommand arguments: none\n\nResponse arguments:\n* `string[] alignnames`: the list of alignments that exist\n* `string[] gendnames`: the list of genders that exist\n* `string[] racenames`: the list of races that exist\n* `string[] rolenames_f`: the list of roles that exist, using female names\nsuch as \"Cavewoman\" (TODO: if a role has no separate female name, are\nthese a copy of the male name, or NULL?)\n* `string[] rolenames_m`: the list of roles that exit, using male names such\nas \"Caveman\"\n* `int[] matrix`: Information on which combinations of role, race, gender,\nand alignment are legal; each possible combination (legal or illegal) has\nan entry in the list, at an index that can be calculated via the macro\n`nh_cm_idx()`\n* `int num_aligns`: length of `alignnames`\n* `int num_genders`: length of `gendnames`\n* `int num_races`: length of `racenames`\n* `int num_roles`: length of `rolenames_[f,m]`\n\n\n===get_topten===\n\n\nRequests entries from the high score table.\n\nCommand arguments:\n* `int around`: if there has been at least one game previously on this\nconnection (even if it was re-established), and the most recent such game\nhas since reached game over (death/quit/escape/ascension), and `player`\nwas playing, list this many games near that game on the high score table;\notherwise this value is ignored\n* `boolean own`: whether to list all games of the given `player` name or not\n* `string player`: the player name for `own` and `around`; a null string\nwill automatically pick the appropriate player for the most recent game\nfor use with `around`\n* `int top`: list this many games at the top of the table\n\nResponse arguments:\n* `string msg`: an appropriate heading for the high score table; if `around`\nmatches, this will talk about the most recent game (e.g. telling the\nplayer what position on the list they are, or explaining that wizard mode\ngames are not eligible for the high score table); otherwise, this will be\nan error message (if any), or else the null string\n* `struct nh_topten_entry[] toplist`: the requested high score table\n* `int birthdate`: seconds since the epoch that the game started (TODO:\nY2038 issue!)\n* `string death`: the reason that the player died\n* `int deathdate`: seconds since the epoch that the game ended\n* `int deaths`: the number of times the player lifesaved, plus one if they\neventually died permanently\n* `int end_how`: an internal code for the basic cause of death (drowning,\nstarving, etc.); this is currently not in any publicly accessible header\n(TODO: which is probably a mistake), but is in libnethack's hack.h\n* `string entrytxt`: a formatted representation of this high score entry\nthat can be output directly in a fixed-width font\n* `boolean highlight`: true if this entry is the one that `around` is\nmeasuring around\n* `int hp`: the character's current hitpoints at death\n* `int maxhp`: the character's maximum hitpoints at death\n* `int maxlvl`: the deepest dungeon level the character reached\n* `int moves`: the number of turns the charater spent\n* `string name`: the name of the character\n* `string plalign`: the character's alignment\n* `string plgend`: the character's gender\n* `string plrace`: the character's race\n* `string plrole`: the character's role\n* `int points`: the number of points the game scored\n* `int rank`: the position of this game within the high score table (1 for\nfirst place, 2 for second place, etc.); can be 0 or negative for games\nthat are disqualified from the high score table (due to, for instance,\nplaying in debug mode)\n* `int ver_major`: the major version number of the engine this game was\nplayed on\n* `int ver_minor`: the minor version number of the engine this game was\nplayed on\n* `int patchlevel`: the patchlevel version number of the engine this game\nwas played on\n\n===list_games===\n\n\nLists current and/or completed games on the server.\n\nTODO: what format are plgend, etc., in? Abbreviation? Full name?\n\nCommand arguments:\n* `boolean completed`: list only completed games if true, only current games\nif false\n* `int limit`: the maximum number of games to list\n* `boolean show_all`: if true, list games for which user who authenticated\nthis connection has read but not write access; if false, only list games\nto which the user has write access\n\nResponse arguments:\n* `struct nhnet_game[] games`: the information about the games selected by\nthe arguments:\n* `int gameid`: a value that can be given to `play_game` to connect to\nthis game\n* `enum nh_game_modes playmode`: any special rules that might apply to\nthis game:\n* `MODE_NORMAL` = 0: there is nothing special about this game;\n* `MODE_EXPLORE` = 1: this game is in non-scoring discovery mode;\n* `MODE_WIZARD` = 2: this game is in debug mode.\n* `string plname`: the name of this game's player\n* `string game_status`: a textual description of the current state of\nthe game (death reason for a completed game, location of the character\nin the dungeon for an incomplete game)\n* `string plalign`: the alignment of this game's character\n* `string plgend`: the gender of this game's character\n* `string plrace`: the race of this game's character\n* `string plrole`: the role of this game's character\n* `enum nh_log_status status`: the status of this game's save file:\n* `LS_SAVED` = 0: an ordinary save file, nobody playing/replaying\n* `LS_DONE` = 1: game over: quit, died, ascended, etc.\n* `LS_IN_PROGRESS` = 2: someone is playing/watching/replaying this\ngame\n* `LS_INVALID` = -1: something is badly wrong with the save file\n* `LS_CRASHED` = -2: the save file needs manual recovery\n\n===create_game===\n\n\nCreates a new save file, that can subsequently be opened with `play_game` in\norder to start a new game.  This mostly corresponds to the `nh_create_game`\nAPI call in libnethack (although it has a slightly different calling\nconvention).\n\nCommand arguments:\n* `struct nh_option_desc[] options`: the options this game should initially\nbe created with (including game mode, character, and character name); any\noptions omitted wil be filled in with defaults\n\nResponse arguments:\n* `int gameid`: The game ID, for use with future `play_game` calls; if this\nis -1, the game creation failed\n\n\n===play_game===\n\n\nAttaches to a game, causing that game to be loaded if it isn't already.  If\nthe game allows read access for the user the connection is authenticated as,\nand the game is not completed, the user will be able to play, watch, and/or\nreplay the game.  Otherwise, the user will only be able to watch and replay\nthe game.  The `play_game` call does not respond until the gameplay is over\n(or immediately, if an error happens); rather, the server will respond with a\nnumber of followup commands to handle the user interaction side of the\ngameplay itself.\n\nThis corresponds to the `nh_play_game` API call in libnethack.\n\nNote that a `play_game` response may happen at any time after a unresponded\n`play_game` command, even if there are unresponded requests in the meantime.\n(This corresponds to a `longjmp` back to `nh_play_game` in the libnethack\nAPI.)  The unresponded requests simply vanish, and the client should act as\nthough they never happened (removing menus that they opened from the screen,\nforgetting messages, etc.).  This can happen in a few different situations:\n* If the client requests a save or quit (via `exit_game`), perhaps while a\nprompt is open;\n* If something goes wrong and the server needs to rewind the save file\nmid-turn;\n* During network play, if the network connection breaks or times out on the\nserver, the client API code simulates this to transparently reconnect the\nconnection, even though it isn't actually sent over the network.\n\nCommand arguments:\n* `int gameid`: A value returned from `list_games` or `create_game`\nrepresenting a game to attach to\n* `enum followmode followmode`: How to load the game:\n* `FM_PLAY` = 0: play the game\n* `FM_WATCH` = 1: watch a game (like playing, but read-only)\n* `FM_REPLAY` = 2: replay the game from the start (also read-only)\n* (`FM_RECOVERQUIT` = 3: go through the game over sequence of a completed\ngame again (leaving bones, xlogfile entries, etc.); this is disallowed\nin network play for security reasons, but exists in the local API)\n\nResponse arguments:\n* `enum nh_play_status return`: what happen in the attempt to restore the game:\n* `GAME_DETACHED` = 0: the game was restored successfully; eventually,\nthe client requested to stop playing, and the game still exists\n* `GAME_OVER` = 1: the game was restored successfully; eventually, the\ngame ended through the death of the character or some similarly\npermanent means; this return value is only sent to one process (the\none that sent the input causing the game to end)\n* `GAME_ALREADY_OVER` = 2: the game was restored successfully, but\neither it had already ended (and thus was loaded in replay mode), or\nelse it ended while attached but some other process sent the input\nthat caused the game to end\n* `RESTART_PLAY` = 3: something happened that forced the server to jump\nback to `play_game`; the client should in most cases immediately call\n`play_game` with the same argument\n* `CLIENT_RESTART` = 4: ditto, but on the request of the client, which\ncan react to it how it likes\n* `REPLAY_FINISHED` = 5: the game is still going, but cannot continue in\nreplay mode because the end was reached; a client can reconnect in\nplay or watch mode if it likes\n* `ERR_BAD_ARGS` = 6: the game did not start because the given game ID\ndoes not exist\n* `ERR_BAD_FILE` = 7: the game did not start because the given game ID\ncorresponds to a file on disk that cannot be read\n* `ERR_IN_PROGRESS` = 8: it is impossible to attach to the game due to\nlocking issues; on POSIXy OSes, this should only happen if the file is\nbeing recovered manually, but on some OSes this may happen if anyone\nelse is currently playing the game\n* `ERR_RESTORE_FAILED` = 9: the game is completely corrupted and needs\nmanual recovery\n* `ERR_RECOVER_REFUSED` = 10: the game is partially corrupted, and the\nuser chose not to rewind it when prompted about whether to rewind it\n* (`ERR_NETWORK_ERROR` = 11: never sent over the network, but the\nclient library simulates this return value if it has to detach the\ngame due to network issues and cannot subsequently re-attach it, thus\nclients using the client library may see it)\n\n\n===set_email===\n\n\nChange the email address associated with the authenticated user.  (This\naddress is not used by the game, but is available to server admins in case\nthey need to verify a user's identity, e.g. for a password reset request.)\n\nCommand arguments:\n* `string email`: the new email address\n\nResponse arguments:\n* `boolean return`: true if the email address change succeeded\n\n\n===set_password===\n\n\nChange the password associated with the authenticated user.  The same password\nwill be required by future `auth` requests.\n\nCommand arguments:\n* `string password`: the new password (sent in plaintext, unless the\nconnection is encrypted some other way)\n\nResponse arguments:\n* `boolean return`: true if the password change succeeded\n\n\n===shutdown===\n\n\nExits the server process responsible for dealing with this client process and\ncloses the connection.  (If there is an active game, the server will attempt\nto save it before exiting).\n\nCommand arguments: none\n\nResponse arguments:\n* `int return`: Always 1.\n\n\n==Server requests==\n\n\nThese requests are sent by the server, expecting a response from the client.\nNormally they will only be sent as followups to a response from the client;\nthe only exceptions are `server_error` and `server_cancel`, which can be sent\nat any time (except to interrupt the request half of a server request or\nresponse half of a server response, in which case they will be delayed until\nthe server is done sending its current request/response).\n\n\n===server_cancel===\n\n\nSending an `nh_play_game` response can be used by the server to retroactively\nwipe out the state of a connection, e.g. to handle save file recovery, or a\nmid-turn save.  However, sometimes the server only wants to countermand one\nrequest; the typical example is when watching a game which opened a menu, and\nthen the player being watched makes a selection from the menu (in which case\nthe server needs to, effectively, undo the opening of the menu).\n\nIn this case, the server will send a `server_cancel` request.  The client\nshould treat any response-requiring server request it is currently processing,\nor the next such request if it is not currently processing such a request, as\nbeing cancelled by the server, and should thus give the appropriate\n\"cancelled by server\" response to that request.\n\nIn the local API (rather than the network API), in which `libnethack` links\ndirectly against an interface, the `server_cancel` request can be sent at\nabsolutely any time at all; this includes such inconvenient times as \"in the\nmiddle of allocating memory\", or \"in the middle of another request\"; this is\n\"async-signal\" timing.  Doing this over the network would be impossible to\nparse (the closest equivalent would be TCP urgent data, which can interrupt an\nexisting data stream in such a way that both can be distinguishd, but is\nlimited to one byte and thus hard to fit JSON in).  Instead, the network API\nwill delay making a `server_cancel` request until it has finished sending any\ncurrent request, if possible.  Clients nonetheless need to make arrangements\nto handle this request in the middle of accepting input from the user (which\nis its entire purpose); for instance, if blocking on the keyboard because\ntheir interface wants a keypress in order to handle whatever input request is\nbeing made at the time, they will need to block on a network socket at the\nsame time in order to be able to handle a possible cancel.\n\nBe aware of possible race conditions: if the client finishes processing a\nrequest just as the server tries to cancel it, then the server will end up\naccidentally cancelling its next request instead.  This is why \"client\ncancelled\" and \"server cancelled\" responses look different: so if the server\nspuriously cancels a request, it can just send the request again, rather than\ninterpreting the client as having cancelled the request intentionally.\n\nNo response to the `server_cancel` call should be sent; the server has no use\nfor it, and is not equipped for arbitrarily inconveniently timed responses.\n\nRequest arguments: none\n\nResponse arguments: no response\n\n\n===request_command===\n\n\nThis request is sent by the server when the player's character is able to send\na new command.  The client should respond with a game command, possibly\nfollowing up with network API command in order to help decide which command to\nrespond with.\n\nRequest arguments:\n* `boolean debug`: whether debug-mode commands are a reasonable response to\nthe prompt\n* `boolean completed`: false if the client is in the middle of a multi-turn\ncommand (whether it was interrupted by a monster or the like, or whether\nthe server's just giving the client the chance to interrupt); true if the\nprevious command completed or there was no previous command\n* `boolean interrupted`: true if the character is aware of danger that might\ncause a player to want to abort their current action (or not repeat a\nrepeated action); this is independent of `completed`\n\nResponse arguments:\n* `string command`: what the player wants to tell their character to do;\nthis should be a string returned by `get_commands`, or else one of the\nfollowing internal-use commands:\n* `\"welcome\"`: Display the \"Welcome [back] to NetHack!\" message; this\nshould be sent spontaneously by the client as the first command if the\ngame was restored due to player action (rather than due to a network\ntimeout or the like), rather than in response to user input\n* `\"repeat\"`: Continue a multiple-turn command, or repeat the last\ncommand in other circumstances; clients will typically want to send\nthis without further user interaction if `completed` and `interrupted`\nare both false, but may allow the user to override this if they wish\n* `\"servercancel\"`: Sent as a response if the server cancelled the API\ncall using a `server_cancel` call\n* `struct nh_cmd_arg arg`: a set of arguments to the command (any subset of\nthe arguments that `nh_get_command` specified were acceptable)\n* `enum nh_direction d`: [optional] a direction argument\n* `DIR_W` = 0: west (`h`, `4`)\n* `DIR_NW` = 1: northwest (`y`, `7`)\n* `DIR_N` = 2: north (`k`, `8`)\n* `DIR_NE` = 3: northeast (`u`, `9`)\n* `DIR_E` = 4: east (`l`, `6`)\n* `DIR_SE` = 5: southeast (`n`, `3`)\n* `DIR_S` = 6: south (`j`, `2`)\n* `DIR_SW` = 7: southwest (`b`, `1`)\n* `DIR_UP` = 8: up (`<`)\n* `DIR_DOWN` = 9: down (`>`)\n* `DIR_SELF` = 10: at self (`.` or `s`)\n* `charcode invlet`: [optional] an inventory letter\n* `coordinate x`: [optional] an x coordinate\n* `coordinate y`: [optional] a y coordinate\n* `string str`: [optional] a string\n* `charcode spelllet`: [optional] a spell letter\n* `int limit`: [optional] the amount to limit the command to\n\n===display_menu===\n\n\nRequests the client to display a menu to the user (either simply for display,\nor to allow them to make a selection), until the user makes a selection or the\nserver cancels the request using a `play_game` response.\n\nRequest arguments:\n* `enum nh_pick_type how`: a specification of how many items the user can\nchoose from the menu:     \n* `PICK_NONE` = 0: the user cannot select items, the menu is purely used\nto present information to the user;\n* `PICK_ONE` = 1: the user can pick one item from the menu;\n* `PICK_ANY` = 2: the user can pick zero or more items from the menu\n* `struct nh_menuitem[] items`: the menu items:\n* `charcode accel`: a recommended accelerator for this menu entry\n* `string caption`: the text of the menu entry\n* `charcode group_accel`: a secondary recommended accelerator (which may\napply to more than one entry; if it does, a `PICK_ANY` menu should\ntoggle all entries with the `group_accel` if the user presses it)\n* `int id`: a value to return in the `display_menu` response; if `id`\nand `accel` are both 0, then the item is unselectable\n* `enum nh_menuitem_role role`: what sort of entry this is:\n* `MI_TEXT`: a line of text that is logically grouped together even\nif it runs across multiple menu entries;\n* `MI_NORMAL`: a normal menu item;\n* `MI_HEADING`: a heading\n* `boolean selected`: whether this menu item should be selected by\ndefault (in a `PICK_ANY` menu, where choosing an item does not close\nthe menu, choosing an item should toggle its selection state)\n* `enum placement_hint plhint`: a suggestion for a sensibleplcae on the\nscreen to place this menu, and styling for the menu (TODO: many of these\nare unimplemented in nhcurses):\n* `PLHINT_ANYWHERE` = 0: no suggested location;\n* `PLHINT_LEFT` = 1: towards the left side of the screen;\n* `PLHINT_RIGHT` = 2: towards the right side of the screen;\n* `PLHINT_URGENT` = 3: appropriate styling for an important message;\n* `PLHINT_INFO` = 4: appropriate styling for an informational message;\n* `PLHINT_ONELINER` = 5: in the message area;\n* `PLHINT_CONTAINER` = 6: an appropriate location for container\ncontents;\n* `PLHINT_INVENTORY` = 7: over the inventory area (if any)\n* `string title`: the title of the menu\n\nResponse arguments:\n* `int[] results`: a list of the `id` of all selected items after the menu\nwas closed; this should be empty for `PICK_NONE` or if the menu was\ncancelled via server or client, empty or a single element for `PICK_ONE`,\nand any subset of elements for `PICK_ANY`,\n* `enum nh_client_response howclosed`: an explanation of how the menu was\nclosed:\n* `NHCR_ACCEPTED` = 0: pressing Return (or similar), scrolling off the\nend, or (for `PICK_ONE`) selecting an item;\n* `NHCR_CLIENT_CANCEL` = 1: pressing Escape (or similar)\n* `NHCR_SERVER_CANCEL` = 5: by a `server_cancel` request\n\n\n===display_objects===\n\n\nA variant of `display_menu` specialised for inventory menus.  It provides extra\ninformation and allows the user to specify partial stacks of items in addition\nto full stacks.\n\nRequest arguments: same as `display_menu`, except for `items`:\n* `struct nh_objitem[] items`: the menu items (sent as an array, not an\nobject, with elements in the order shown here):\n* `string caption`: as in `display_menu`\n* `int id`: as in `display_menu`\n* `enum nh_menuitem_role role`: as in `display_menu`\n* `int count`: the number of objects in the stack\n* `int otype`: the obfuscated object type; I think this is an index into\nthe `objects[]` returned from `get_drawing_info`, but I'm not sure\n* `int oclass`: the object class (are these listed anywhere public?)\n* `int weight`: the object's weight, negative numbers means unknown\n* `enum nh_bucstatus buc`: the object's beatitude:\n* `B_UNKNOWN` = 0: unknown beatitude;\n* `B_BLESSED` = 1: blessed;\n* `B_UNCURSED` = 2: neither blessed nor cursed;\n* `B_CURSED` = 3: cursed\n* `charcode accel`: as in `display_menu`\n* `charcode group_accel`: as in `display_menu`\n* `boolean worn`: true if the object is equipped\n\nResponse arguments:\n* `struct nh_objresult[] pick_list`: a list of all selected items after the\nmenu ws closed, as with `display_menu`, but with more information:\n* `int id`: the `id` specified for this item in the request\n* `int count`: the size of a partial stack specified for this item, or\n-1 to select the entire stack; should be -1, or between 1 and the stack\nsize minus 1\n* `enum nh_client_response howclosed`: as in `display_menu`\n\n\n===getdir===\n\n\nRequests a direction from the user (can be cancelled by the user, or the\nserver via a `play_game` response).\n\nRequest arguments:\n* `string query`: a message to print along with the direction request (the\ngeneric message is along the lines of \"In which direction?\", but the\nmessage is often more specific, similar to \"Zap your wand in which\ndirection?\").\n* `boolean restricted`: if true, the client should act as though diagonal\ndirections do not exist for the purpose of its help text (applies when the\nplayer is polymorphed into a grid bug)\n\nResponse arguments:\n* `enum nh_direction return`: The selected direction:\n* `DIR_W` = 0: west (`h`, `4`)\n* `DIR_NW` = 1: northwest (`y`, `7`)\n* `DIR_N` = 2: north (`k`, `8`)\n* `DIR_NE` = 3: northeast (`u`, `9`)\n* `DIR_E` = 4: east (`l`, `6`)\n* `DIR_SE` = 5: southeast (`n`, `3`)\n* `DIR_S` = 6: south (`j`, `2`)\n* `DIR_SW` = 7: southwest (`b`, `1`)\n* `DIR_UP` = 8: up (`<`)\n* `DIR_DOWN` = 9: down (`>`)\n* `DIR_SELF` = 10: at self (`.` or `s`)\n* `DIR_NONE` = -1: the user cancelled the prompt\n* `DIR_SERVERCANCEL` = -2: the server cancelled the prompt\n\n\n===getline===\n\n\nRequests a line of input from the user (can be cancelled by the user, or the\nserver via a `play_game` response).\n\nRequest arguments:\n* `string query`: The prompt to display along with the request for a line.\n\nResponse arguments:\n* `string line`: The line of input from the user. Is the null string if the\nnull string was entered, a single ESC character (hex 1B) if the user\ncancelled the prompt, a single ASCII 28 character (hex 1C) if the server\ncancelled the prompt, or otherwise the user's input.\n\n\n===getpos===\n\n\nRequests a map location from the user (can be cancelled by the user, or the\nserver via a `play_game` response).\n\nRequest arguments:\n* `boolean force`: if true, the client should make it difficult for the user\nto cancel the prompt (TODO: the idea behind thies option is bad)\n* `string goal`: a description of what the user is supposd to select\n* `coordinate x`: the x coordinate to originally place the cursor at\n* `coordinate y`: the y coordinate to originally place the cursor at\n\nResponse arguments:\n* `enum nh_client_response return`: information on how the prompt was closed:\n* `NHCR_ACCEPTED` = 0: the user accepted the location using the most\nordinary input (usually `.`);\n* `NHCR_CLIENT_CANCEL` = 1: the user cancelled the location prompt\n(e.g. via ESC);\n* `NHCR_CONTINUE` = 2: the user accepted the location, requesting to\ncontinue choosing locations (normally accomplished via `,`);\n* `NHCR_MOREINFO` = 3: the user accepted the location, requesting more\ninformation about it (normally accomplished via `:`);\n* `NHCR_MOREINFO_CONTINUE` = 4: a combination of the two previous cases\n(normally accomplished via `;`);\n* `NHCR_SERVER_CANCEL` = 5: the server cancelled the prompt.\n* `coordinate x`: the x coordinate chosen by the user\n* `coordinate y`: the y coordinate chosen by the user\n\n\n===query_key===\n\n\nInputs one ASCII code from the user, potentially with a repeat count\nbeforehand.  This is used for inventory queries, and in a few other cases.  As\nalways, can be cancelled by the user or the server.\n\nRequest arguments:\n* `boolean allow_count`: whether to allow a repeat count\n* `enum nh_query_key_flags flags`: information about the reason for the\nquery:\n* `NQKF_INVENTORY_ITEM` = 0: an item from inventory\n* `NQKF_INVENTORY_ITEM_NULLABLE` = 1: an item from inventory or \"-\" to\nmean bare hands, no item, etc.\n* `NQKF_INVENTORY_OR_FLOOR` = 2: an item from inventory or \",\" to mean an\nitem on the floor\n* `NQKF_SYMBOL` = 3: an object or monster symbol\n* `NQKF_LETTER_REASSIGNMENT` = 4: a new inventory or spell letter\n* `string query`: what prompt to display to the user\n\nResponse arguments:\n* `int count`: the repeat count, -1 if none was given; this is supplied\neven if `allow_count` is false, but is always -1 in that case and should\nbe ignored\n* `charcode return`: the key the user pressed; this is ESC if cancelled by\nthe user, ASCII 28 if cancelled by the server\n\n\n===yn===\n\n\nRequests the user to choose from a short list of choices represented by ASCII\ncharacters.  As always, can be cancelled by the user or the server.\n\nRequest arguments:\n* `string query`: the prompt to print to the user\n* `string set`: a list of appropriate responses; if ESC is included in the\nlist, it does not mean that ESC is an appropriate response, but rather, it\nmeans that all responses after the ESC should be hidden from the user\n* `charcode def`: the default value to return in the case of a user cancel\n(this will be shown to the user in many interfaces)\n\nResponse arguments:\n* `charcode return`: the choice the user chose; this is `def` if cancelled\nby the user, ASCII 28 if cancelled by the server\n\n\n===load_progress===\n\n\nSent by the server periodically during time-consuming background operations in\norder to prevent the connection dropping.  This will never have a display list\nattached.\n\nRequest arguments:\n* `int progress`: a number from 0 to 10000, proportional to the estimated\nlength of the background operation\n\nResponse arguments: no response is sent for this message\n\n\n===server_error===\n\n\nCalled by the server if something goes unrecoverably wrong.  The server closes\nthe connection immediately after sending this, so sending a response is futile\nand not particularly useful.  (For the same sort of message directed in the\nopposite direction, see `exit_game`.)\n\nRequest arguments:\n* `boolean error`: true if the error is caused by something that the client\ndid, false if the error is internal to the server\n* `string message`: a description of what went wrong, which can be displayed\nto the user\n\nNo response.\n\n\n==Display elements==\n\n\nAny message sent by the server, whether as a request or a response, might have\na `display` element attached, which specifies updates to the map.  The\nexceptions are `auth`, `register`, and `cancel_server_request`, which never\ncarry map data.  The `display` element is an array of elements to draw; each\nelement can be one of the below types.\n\n\n===delay_output===\n\n\nSpecifies that the client should wait for a short time at this point before\ndoing any further rendering.\n\nArguments: `nil`.\n\n\n===display_buffer===\n\n\nSpecifies that the client should display text to the user.  (The text may be\nquite long, and should be word-wrapped and tab-expanded.)\n\nArguments: an object:\n* `string buf`: the text to display\n* `boolean trymove`: appears to be unused\n\n\n===level_changed===\n\n\nSpecifies that the client should change its level display mode.\n\nTODO: make this an enum.\n\nArguments: an integer:\n* `LDM_DEFAULT` = 0: normal display;\n* `LDM_HELL` = 1: display appropriate for Gehennom;\n* `LDM_QUEST` = 2: display appropriate for the Quest;\n* `LDM_MINES` = 3: display appropriate for the Mines;\n* `LDM_SOKOBAN` = 4: display appropriate for Sokoban;\n* `LDM_ROGUE` = 5: display appropriate for the Rogue level;\n* `LDM_KNOX` = 6: display appropriate for Fort Ludios\n\n\n===list_items===\n\n\nSpecifies a list of items in inventory or on the floor.\n\nTODO: The API of this is vulnerable to length mismatches.\n\nArguments: an object:\n* `int icount`: length of `items`\n* `boolean invent`: true means that this list is the player's inventory;\nfalse means that this list is the list of items on the ground\n* `struct nh_objitem[] items`: the list of items about which the client is\nbeing informed\n\n\n===outrip===\n\n\nShows an appropriate message to reflect character death (and similar\ngame-over situations like ascension).\n\nTODO: The API of this is vulnerable to length mismatches.\n\nArguments: an object:\n* `int gold`: amount of gold upon death\n* `int how`: as `end_how` in `get_topten`\n* `int icount`: length of `items`\n* `struct nh_menuitem[] items`: list of messages to print; only the\n`caption` field is used. TODO: There has to be a better API for this!\n* `string killbuf`: the cause of the game over\n* `string name`: the name of the character whose game ended\n* `boolean tombstone`: true to request the drawing of a tombstone graphic;\nfalse presents the information entirely as text\n* `int year`: a year to draw on the tombstone\n\n\n===pause===\n\n\nWait for user input in order to give the user a chance to read messages or\nlook at the map.\n\nTODO: This has a pretty weird interaction with server cancel requests.  It\nshould probably be made a server request, not a display element.\n\nArguments: an `enum nh_pause_reason`:\n* `P_MESSAGE` = 0: give the user a chance to read the message area\n* `P_MAP` = 1: give the user a chance to look at the map\n\n\n===print_message===\n\n\nPrint a message in the message area.\n\nTODO: This API is badly designed and has caused several bugs.\n\nArguments: an object:\n* `string msg`: the message to print\n* `int turn`: the turn on which the message was sent\n\n\n===print_message_nonblocking===\n\n\nPrint a message in the message area.  This message is not important enough to\nensure that the user sees it, and the client should aim to prevent this\nforcing a --More-- or similar.\n\nArguments: as print_message\n\n\n===raw_print===\n\n\nDisplay a message to the user, attempting to bypass the standard rendering and\njust displaying the message directly on a console, perhaps after the program\nexits.  (This is typically used to make a record of error messages.)\n\nArguments: a string, the message to print\n\n\n===update_screen===\n\n\nChange what is displayed at a particular map location.\n\nArguments: an object:\n* `mapdelta dbuf`: the map delta, in compressed form (see below)\n* `coordinate ux`: the character's x location\n* `coordinate uy`: the character's y location\n\nA map delta can be an integer 0 if nothing at all has changed.  Otherwise it\nis a list of column deltas.  A column delta of 0 means that column is empty,\nand 1 means it is unchanged since last time.  Otherwise a column delta is a\nlist of cell deltas.  Again, 0 means empty, 1 means unchanged.  Otherwise the\ncell delta is an `int[10]`, mostly of indexes into the arrays returned by\n`get_drawing_info`:\n\n* [0] encoded effect number: the encoding is quite complex, see `draw_map`\nin `libnethack/src/map.c` for an example on how to decode it; it\neventually decodes into offsets into `effects`, `zapsyms`, `zaptypes`,\n`swallowsyms`, `explsyms`, and/or `expltypes`\n* [1] index into `bgelements`\n* [2] index into `traps`\n* [3] index into `objects`\n* [4] index into `monsters`, representing the monster associated with an\nobject (e.g. \"lichen\" for \"lichen corpse\")\n* [5] index into `monsters`, representing a monster on that square\n* [6] a bitmask that represents details of a monster on the square:\n* `MON_TAME` = 1: the monster is tame\n* `MON_RIDDEN` = 2: this monster has the player riding it\n* `MON_DETECTED` = 4: this monster is seen via monster detection\n* `MON_WARNING` = 8: this is a warning symbol, not a monster\n* `MON_PEACEFUL` = 16: the monster is peaceful\n* [7] a bitmask that represents any branding of the square:\n* `NH_BRANDING_STEPPED` = 1: the player has stepped on the square\n* `NH_BRANDING_LOCKED` = 2: the player knows this door is locked\n* `NH_BRANDING_UNLOCKED` = 4: the player knows this door is unlocked\n* `NH_BRANDING_TRAPPED` = 8: the player knows this square is trapped\n* `NH_BRANDING_UNTRAPPED` = 16: the player knows this door is untrapped\n* [8] index into `invis`\n* [9] a boolean, not an int; true if the character can see this square\n\nIndexes have 1 added to them, so that 0 can represent the lack of the\nappropriate sort of drawable entity on the square.\n\n\n===update_status===\n\n\nUpdates the character's status information.\n\nArguments: an object:\n* `int ac`: the character's AC (10 = unarmored, lower is better)\n* `int align`: the character's alignment (TODO: what format?)\n* `boolean can_enhance`: true if the #enhance command is usable\n* `int ch`: the character's Charisma stat\n* `int co`: the character's Constitution stat\n* `charcode coinsym`: the character to use to represent money\n* `int cur_monnum`: the species the character is polymorphed into (an index\ninto `monsters` returned from `get_drawing_info`)\n* `int dx`: the character's Dexterity stat\n* `int en`: the character's current Pw\n* `int enmax`: the character's maximum Pw\n* `int gold`: the character's gold in open inventory\n* `int hp`: the character's current HP\n* `int hpmax`: the character's maximum HP\n* `int in`: the character's Intelligence stat\n* `int level`: the character's experience level\n* `string level_desc`: a textual description of the character's current\ndungeon level\n* `int max_rank_sz`: the maximum possible width of a character's\nprofessional title, given their role, even if they change gender or level\n* `int monnum`: the species that the character is naturally (an index\ninto `monsters` returned from `get_drawing_info`)\n* `int moves`: the number of turns this game has lasted (1 for the first\nturn)\n* `int plname`: the character's name\n* `string rank`: the character's professional title\n* `string racename`: the character's unpolymorphed race (`human`, `dwarf`,\netc.)\n* `string gender`: the character's unpolymorphed gender (`male`, `female`,\n`neuter`); this is affected by permanent gender changes, but not by\npolymorphing into a male/female-only monster\n* `string rolename`: the character's current role (`Archaeologist`, etc.)\n* `int score`: the character's current score\n* `int st`: the integer part of the character's Strength stat\n* `int st_extra`: the fractional part of the character's Strength stat\n* `string[] statusitems`: a list of status lights currently affecting the\ncharacter\n* `int wi`: the character's Wisdom stat\n* `int x`: the character's x coordinate\n* `int xp`: the character's total number of gained experience points (minus\nany lost to level drain)\n* `int y`: the character's y coordinate\n* `int z`: the character's z coordinate\n\n\n\n\n{{variant-343}}\n[[Category:Annotations]]\n[[Category:Variants]]"}
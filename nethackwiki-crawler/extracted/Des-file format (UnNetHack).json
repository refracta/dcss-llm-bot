{"title":"Des-file format (UnNetHack)","url":"https://nethackwiki.com/wiki/Des-file_format_(UnNetHack)","type":"markdown","data":"||\n||\n| [ ]## Contents* [1 Comments](#Comments)\n\n* [2 Header statements](#Header_statements)\n\n  - [2.1 FUNCTION](#FUNCTION)\n  - [2.2 INCLUDE](#INCLUDE)\n\n* [3 Level definitions](#Level_definitions)\n\n  - [3.1 LEVEL](#LEVEL)\n  - [3.2 FLAGS](#FLAGS)\n\n* [4 Level statements](#Level_statements)\n\n  - [4.1 MESSAGE](#MESSAGE)\n  - [4.2 INIT\\_MAP](#INIT_MAP)\n  - [4.3 ALTAR](#ALTAR)\n  - [4.4 GRAVE](#GRAVE)\n  - [4.5 MON\\_GENERATION](#MON_GENERATION)\n  - [4.6 SOUNDS](#SOUNDS)\n  - [4.7 BRANCH](#BRANCH)\n  - [4.8 CORRIDOR](#CORRIDOR)\n  - [4.9 SHUFFLE](#SHUFFLE)\n  - [4.10 NON\\_DIGGABLE](#NON_DIGGABLE)\n  - [4.11 NON\\_PASSWALL](#NON_PASSWALL)\n  - [4.12 ROOMDOOR](#ROOMDOOR)\n  - [4.13 DOOR](#DOOR)\n  - [4.14 WALLWALK](#WALLWALK)\n  - [4.15 DRAWBRIDGE](#DRAWBRIDGE)\n  - [4.16 ENGRAVING](#ENGRAVING)\n  - [4.17 FOUNTAIN](#FOUNTAIN)\n  - [4.18 POOL](#POOL)\n  - [4.19 SINK](#SINK)\n  - [4.20 TERRAIN](#TERRAIN)\n  - [4.21 REPLACE\\_TERRAIN](#REPLACE_TERRAIN)\n  - [4.22 SPILL](#SPILL)\n  - [4.23 PORTAL](#PORTAL)\n  - [4.24 RANDOM\\_CORRIDORS](#RANDOM_CORRIDORS)\n  - [4.25 MINERALIZE](#MINERALIZE)\n  - [4.26 REGION](#REGION)\n  - [4.27 ROOM](#ROOM)\n  - [4.28 SUBROOM](#SUBROOM)\n  - [4.29 GOLD](#GOLD)\n  - [4.30 LADDER](#LADDER)\n  - [4.31 STAIR](#STAIR)\n  - [4.32 TELEPORT\\_REGION](#TELEPORT_REGION)\n  - [4.33 TRAP](#TRAP)\n  - [4.34 WALLIFY](#WALLIFY)\n  - [4.35 NOMAP](#NOMAP)\n  - [4.36 GEOMETRY](#GEOMETRY)\n  - [4.37 MAP](#MAP)\n  - [4.38 MAZEWALK](#MAZEWALK)\n  - [4.39 MONSTER](#MONSTER)\n  - [4.40 OBJECT](#OBJECT)\n  - [4.41 CONTAINER](#CONTAINER)\n\n* [5 Flow control](#Flow_control)\n\n  - [5.1 SWITCH](#SWITCH)\n  - [5.2 FOR](#FOR)\n  - [5.3 LOOP](#LOOP)\n  - [5.4 IF](#IF)\n  - [5.5 EXIT](#EXIT)\n  - [5.6 BREAK](#BREAK)\n\n* [6 Variables and Types](#Variables_and_Types)\n\n  - [6.1 variable](#variable)\n\n  - [6.2 array variable](#array_variable)\n\n  - [6.3 coord or variable](#coord_or_variable)\n\n  - [6.4 strings](#strings)\n\n  - [6.5 region or variable](#region_or_variable)\n\n  - [6.6 map character or variable](#map_character_or_variable)\n\n  - [6.7 mathematical expression](#mathematical_expression)\n\n  - [6.8 selection](#selection)\n\n    - [6.8.1 coordinate](#coordinate)\n    - [6.8.2 rectangle](#rectangle)\n    - [6.8.3 filled rectangle](#filled_rectangle)\n    - [6.8.4 line](#line)\n    - [6.8.5 random line](#random_line)\n    - [6.8.6 grow](#grow)\n    - [6.8.7 filter](#filter)\n    - [6.8.8 floodfill](#floodfill)\n    - [6.8.9 circle](#circle)\n    - [6.8.10 ellipse](#ellipse)\n    - [6.8.11 gradient](#gradient)\n    - [6.8.12 complement](#complement)\n    - [6.8.13 rndcoord](#rndcoord)\n\n* [7 Predefined functions and constants](#Predefined_functions_and_constants)\n\n  - [7.1 Map characters](#Map_characters)\n  - [7.2 Trap names](#Trap_names)\n  - [7.3 Room types](#Room_types) |\n\nThis documents the [des-file format](/wiki/Des-file_format \"Des-file format\") used by [UnNetHack](/wiki/UnNetHack \"UnNetHack\").\n\nUnNethack (like [Sporkhack](/wiki/Sporkhack \"Sporkhack\")) started with the [new level compiler patch](http://bilious.alt.org/?20), and then added most of the changes from Spork.\n\nA des-file consists of any number of [Header statements](#Header_statements), and one or more of [Level definitions](#Level_definitions).\n\nUnlike vanilla format, the UnNetHack one is closer to a real programming language, the statements are executed in order, and there is some flow control.\n\n## Comments\n\nAll lines beginning with `#` are comments and are ignored by the level compiler, except between [MAP](#MAP) and [ENDMAP](#MAP).\n\nExample:\n\n```\n# This is a comment.\n```\n\n## Header statements\n\n### FUNCTION\n\n```\nFUNCTION name() { Level statements }\nFUNCTION name([$paramname:paramtype [, ...]]) { Level statements }\n```\n\nDefines a function. The level statements defined inside the function body will be executed when the function is called. Function must be defined before it can be called. Function name can contain alphanumeric characters (a-z, A-Z and 0-9) and full stops (.) Call the function by using it's name, for example `name()` Variables defined outside the function cannot be accessed, and variables defined inside the function are gone when the function finishes. Functions can have any number of named parameters separated by commas. Supported parameter types are \"string\" and \"integer\".\n\nExample:\n\n```\nFUNCTION foobar() {\n  OBJECT:'?', random\n}\nfoobar()\nFUNCTION bazqux($foo:integer, $bar:string) {\n  MESSAGE: $bar\n  OBJECT:'$', random, quantity: $foo\n}\nbazqux(12345, \"Fee Fie Foe Foo\")\n```\n\n### INCLUDE\n\n```\nINCLUDE \"filename.des\"\n```\n\nIncludes the contents of the file in the current file.\n\n## Level definitions\n\nA level definition consists of [LEVEL](#LEVEL), followed by an optional [FLAGS](#FLAGS) and any number of [Level statements](#Level_statements).\n\n### LEVEL\n\n```\nLEVEL:\"name\"\n```\n\nThe level is saved as `name.lev` file. The name can be up to 14 characters long.\n\nUsing a `%i` in the filename will be replaced with a sequential number, starting from 1, and counting upwards, for every LEVEL in that des-file that has a such variable. Allows number characters between the `'%'` and `'i'` - those will be handled as per printf formatting.\n\nFor example:\n\n```\nLEVEL:\"bigrm-%i\"\n```\n\n### FLAGS\n\n```\nFLAGS:noteleport,mazelevel\n```\n\nDefines special flags for the whole level. Parameters are a comma-separated list of flags:\n\n- `noteleport`: Player cannot teleport within the level.\n\n- `sheol`: Level is a [Sheol](/wiki/Sheol \"Sheol\")-type level, with special rules.\n\n- `hardfloor`: The floor is too hard to dig.\n\n- `nommap`: [magic mapping](/wiki/Magic_mapping \"Magic mapping\") does not work.\n\n- `arboreal`: supposedly an outdoor map. Solid walls and secret corridors will be shown as trees, digging makes floor instead of corridor and randomly created corridors are made out of floor instead of corridor.\n\n- `shortsighted`: Monsters cannot see you from far away.\n\n- `noflipx`, `noflipy` and `noflip` prevent the level from being flipped horizontally, vertically and both.\n\n- `mazelevel`: level is a \"maze\" type level. Digging a wall turns it into room floor and mimics prefer mimicing a statue.\n\n- `premapped`: The level map is automatically known by player (a la [Sokoban](/wiki/Sokoban \"Sokoban\")).\n\n- `shroud`: Magic mapping doesn't reveal the map permanently.\n\n- `stormy`: Clouds randomly emit lightning bolts, a la [Plane of Air](/wiki/Plane_of_Air \"Plane of Air\").\n\n- `graveyard`: Reduced chances of undead corpses.\n\n- `sky`: Level is open to the sky, so has no ceiling.\n\n## Level statements\n\nLevel statements include the following commands, [variable](#variable) definitions, [FUNCTION](#FUNCTION) definitions, function calls, and [Flow control](#Flow_control) commands.\n\n### MESSAGE\n\n```\nMESSAGE:\"string\"\n```\n\nThe message string is shown when player first enters the level. Each message line gets separated with a `--more--` -prompt in the game.\n\nExample:\n\n```\nMESSAGE: \"Well done, mortal!\"\n$foo = \"Hello, World!\"\nMESSAGE: $foo\n```\n\n### INIT\\_MAP\n\n```\nINIT_MAP:solidfill, terrain_type\nINIT_MAP:mazegrid,'-'\nINIT_MAP:sheollev\nINIT_MAP:rogue\nINIT_MAP:mines, '.' , ' ', true, true, random, true\n```\n\nInitializes the map with different algorithm.\n\n- `solidfill`: Fills the level with the specified map character. Can also take a map character with light-state wrapped in parenthesis: `('.', lit)`\n\n- `mazegrid`: Generates a grid of solid walls and the specified map characters. Use [MAZEWALK](#MAZEWALK) to carve a maze into it.\n\n- `sheollev`: Generates a Sheol level. No parameters.\n\n- `rogue`: Generates a [Rogue level](/wiki/Rogue_level \"Rogue level\"). No parameters.\n\n- `mines`: Creates [Gnomish Mines](/wiki/Gnomish_Mines \"Gnomish Mines\")-style levels. Takes several parameters: `foreground, background, smoothed, joined, light_state, walled [, filling ]`\n\n  - `foreground`: The \"foreground\" fill [map character](#map_character). This should be something the player can walk on, as the walkable part will be made out of this.\n\n  - `background`: The \"background\" fill [map character](#map_character). This will surround the foreground area, so can be solid or harmful to player.\n\n  - `smoothed`: is either `true` or `false`, and denotes whether the level will be \"smoothed\". This means that any foreground character surrounded by fewer than 3 foreground characters is changed to background character.\n\n  - `joined`: is either `true` or `false`, and denotes whether the level will be \"joined\", so that all parts are accessible by walking.\n\n  - `light_state`: is either `lit`, `unlit`, or `random`.\n\n  - `walled`: is either `true` or `false`. This is equivalent of using a [WALLIFY](#WALLIFY) -command.\n\n  - `filling`: optional [fill map character](#Map_characters). The \"outside\" parts of the level will be filled with this.\n\n### ALTAR\n\n```\nALTAR:coord or variable, alignment, altartype\n```\n\nCreate an altar.\n\n- alignment is one of `law`, `noalign`, `neutral`, `chaos`, `coaligned`, `noncoaligned`, `align[0]`, `align[1]`, `align[2]` or `random`.\n\n- altartype is one of `sanctum` (with a [high priest](/wiki/High_priest \"High priest\")), `shrine` (with an [aligned priest](/wiki/Aligned_priest \"Aligned priest\")), `altar` or `random`.\n\nExample:\n\n```\nALTAR:(50,14),chaos,altar\n```\n\n### GRAVE\n\n```\nGRAVE:coord or variable, \"Any epitaph message\"\nGRAVE:coord or variable, random\nGRAVE:coord or variable\n```\n\nCreates a grave at given location, with a given epitaph, a random epitaph, or with no text.\n\n### MON\\_GENERATION\n\nChange the monster generation chances for this level.\n\n```\nMON_GENERATION:75%, (9, 'a'), (1, \"fire giant\")\n```\n\n75% of randomly generated monsters are either ants (90% chance), or fire giants (10% chance).\n\n### SOUNDS\n\nRandom sounds on this level.\n\n```\nSOUNDS:200, (hear, \"falling rocks.\"), (pline, \"Kaboom!\"), (verbal, \"Mwahahah!\"), (feel, \"hot!\")\n```\n\n1/200 chance each turn to get one of the sounds defined. In this case, \"You hear falling rocks.\", \"Kaboom!\", \"Mwahahah!\", or \"You feel hot!\"\n\n### BRANCH\n\n```\nBRANCH:(x1,y1,x2,y2), (x3,y3,x4,y4)\nBRANCH:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4)\n```\n\nPlaces stairs or a magical portal to a dungeon branch within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4). If the area is prefixed with `levregion` then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined [MAP](#MAP).\n\nExample:\n\n```\nBRANCH:levregion(51,2,77,18),(0,0,40,20)\n```\n\n### CORRIDOR\n\n```\nCORRIDOR:(room_number, direction, door_position), (room_number, direction, door_position)\nCORRIDOR:(room_number, direction, door_position), any_integer\n```\n\nCreate a corridor from room to another room. direction is one of `north`, `south`, `west`, or `east` and tells which wall the corridor starts from and ends to. door\\_position is an integer value and tells how far from the top left of the room the corridor starts/ends. any\\_integer is a room number. There must be a door (or at least a doorway) in the starting wall position.\n\n### SHUFFLE\n\n```\nSHUFFLE:any_array_variable\n```\n\nShuffles the array elements. The predefined alignment array `align` is shuffled automatically at the start of the level code, and cannot be reshuffled.\n\nExample:\n\n```\n$foo = monster:{ 'd', 'T', 'e', 'L' }\nSHUFFLE: $foo\n```\n\n### NON\\_DIGGABLE\n\n```\nNON_DIGGABLE:region_or_variable\n```\n\nSets the walls inside the region as non-diggable.\n\nExample:\n\n```\nNON_DIGGABLE:(00,00,13,12)\n```\n\n### NON\\_PASSWALL\n\n```\nNON_PASSWALL:region_or_variable\n```\n\nPlayers and monsters cannot phase through the walls inside the region.\n\nExample:\n\n```\nNON_PASSWALL:(00,00,13,12)\n```\n\n### ROOMDOOR\n\n```\nROOMDOOR:secret, door_state, door_wall, door_pos\n```\n\nCreates a door with certain state on the previously defined [ROOM](#ROOM) or [SUBROOM](#SUBROOM).\n\n- secret can be one of `true`, `false`, or `random`.\n\n- door\\_state can be one of `open`, `closed`, `locked`, `nodoor`, `broken`, `secret`, or `random`.\n\n- door\\_wall can be one of `north`, `south`, `west`, or `east`, a pipe-delimited list of those, or `random`, and tells on what wall of the room the door will be created.\n\n- door\\_pos is a positive integer value and tells how far from the top or left the door will be.\n\nExample:\n\n```\nROOMDOOR: false, closed, north|south, random\n```\n\n### DOOR\n\n```\nDOOR:door_state, selection\n```\n\nPuts a door on the map.\n\n- door\\_state can be one of `open`, `closed`, `locked`, `nodoor`, `broken`, `secret`, or `random`.\n\n### WALLWALK\n\n```\nWALLWALK:coord or variable, map character or variable\nWALLWALK:coord or variable, map character or variable, 50%\nWALLWALK:coord or variable, map character or variable, map character or variable\nWALLWALK:coord or variable, map character or variable, map character or variable, 50%\n```\n\n### DRAWBRIDGE\n\n```\nDRAWBRIDGE:coord or variable, dir, state\n```\n\n- `dir` is one of the following: `north`, `east`, `south` or `west`\n\n- `state` is either `closed`, `open` or `random`.\n\nNote that the drawbridge placement is different from door placement; the coordinates must be a place where the drawbridge would be when it's open, and from that place towards the direction there should be a wall, where the portcullis will be.\n\nExample:\n\n```\nDRAWBRIDGE:(25,18), north, closed\n```\n\n### ENGRAVING\n\n```\nENGRAVING:coord or variable, engraving_type, \"string\"\nENGRAVING:coord or variable, engraving_type, $stringvariable\n```\n\nCreates an engraving on the floor. engraving\\_type can be one of `dust`, `engrave`, `burn`, `mark`, `blood`, or `random`.\n\nFor example:\n\n```\nENGRAVING:(12,03), engrave, \"You are now entering the Gnome King's wine cellar.\"\n```\n\n### FOUNTAIN\n\n```\nFOUNTAIN:selection\n```\n\nCreate a fountain at each pair of coordinates in the selection.\n\n### POOL\n\n```\nPOOL:selection\n```\n\nCreate a pool at each pair of coordinates in the selection.\n\n### SINK\n\n```\nSINK:selection\n```\n\nCreate a sink at each pair of coordinates in the selection.\n\n### TERRAIN\n\n```\nTERRAIN:selection, map_character_or_variable\n```\n\nSet the terrain at each pair of coordinates in the selection.\n\nExample:\n\n```\nTERRAIN:random, 'L'\nTERRAIN:line(1,1)-(40,11), ('T', lit)\n```\n\n### REPLACE\\_TERRAIN\n\n```\nREPLACE_TERRAIN:region_or_variable, map_character_or_variable, map_character_or_variable, percentage\n```\n\nReplace percentage amount of the first terrain in the region to the second terrain.\n\nFor example, replace 25% of '.' in the area with 'L':\n\n```\nREPLACE_TERRAIN:(1,1,50,20), '.', 'L', 25%\n```\n\n### SPILL\n\n```\nSPILL:coord or variable, terrain_type, direction, length\n```\n\nCreate random \"pool-like\" globs of terrain, starting from coordinates, generally moving towards direction, and at a maximum of length positions. Coordinates, terrain\\_type and length can be variables of the appropriate type.\n\nFor example:\n\n```\nSPILL: random, 'L', north, 20\nSPILL: random, ('.', lit), north, 10\n```\n\n### PORTAL\n\n```\nPORTAL:(x1,y1,x2,y2), (x3,y3,x4,y4), \"levelname\"\nPORTAL:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4), \"levelname\"\n```\n\nPlaces a magical portal within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4). The portal will level teleport player to the level with the name \"levelname\". If the area is prefixed with `levregion` then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined [MAP](#MAP).\n\nExample:\n\n```\nPORTAL:levregion(57,01,78,19),(0,0,0,0),\"fire\"\nPORTAL:(0,0,75,19),(65,13,75,19),\"air\"\n```\n\n### RANDOM\\_CORRIDORS\n\n```\nRANDOM_CORRIDORS\nRANDOM_CORRIDORS:style\n```\n\nCreate random corridors joining the rooms.\n\nstyle is `random`, or one of the following values:\n\n- 1 = at least one corridor leaves from each room and goes to random room\n- 2 = circular path: room1 -> room2 -> room3 -> ... -> room1\n- 3 = all roads lead to rome. or to the first room.\n- any other value (or leaving style off) will generate normal style corridors.\n\n### MINERALIZE\n\n```\nMINERALIZE\nMINERALIZE: kelp_pool, kelp_moat, gold_prob, gem_prob\n```\n\nPuts kelp in pools and moats, and gold and gems in solid walls. Without parameters uses the same chances as normal Dungeons of Doom mineralize.\n\n- `kelp_pool` and `kelp_moat` are integer values and is the 1-in-n chances of a pool or a moat having kelp in it. Using -1 or below uses the default chances.\n\n- `gold_prob` and `gem_prob` are integer values and is the n/1000 chances of a diggable solid wall containing gold and gems. Using -1 or below uses the default chances.\n\nExample:\n\n```\nMINERALIZE:0,0,0,1000  # Put gems in every solid wall\n```\n\n### REGION\n\n```\nREGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined]\nREGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined] { Level statements }\n```\n\nDefine a region on the map with certain light-state and type. This allows defining irregularly-shaped rooms. See also [ROOM](#ROOM) and [SUBROOM](#SUBROOM). [BREAK](#BREAK) is allowed within the level statements.\n\n- lightstate is `lit`, `unlit`, or `random`.\n\n- roomtype is either `random`, or one of the [special room names](#Room_types), eg. `\"morgue\"`\n\n- filled is optional, either `filled` or `unfilled`, and tells whether the room should get stocked with random stuff.\n\n- irregular is optional, either `irregular` or `regular` and tells whether the room is irregularly shaped. If the room is irregular, only the first pair of coordinates defining the region must be inside the room, and the room must be closed off from other areas with non-floor [map characters](#map_characters). Use the boundary symbol `'B'` in the [MAP](#MAP) to enclose an irregular room; it will be converted to floor symbol `'.'` after the level has been created.\n\n- joined is an optional `joined` or `unjoined`, and tells whether any randomly generated corridors connect to the region.\n\nExample:\n\n```\nREGION:(01,04,09,05),lit,\"barracks\"\n```\n\n### ROOM\n\n```\nROOM:roomtype, [ chance, ] lightstate, pos, align, size [, filled] [, joined] { Level statements }\n```\n\nCreates a room, with walls and floor. The room will be placed on a position defined both by pos and align. pos defines the rough position (in a 5-by-5 grid on the screen), and align defines the room position within that. [BREAK](#BREAK) is allowed within the level statements.\n\nNOTE: Creation of a randomly located room may fail, especially if there's little free space to fit it on the level. The level statements of a failed room won't be executed.\n\n- roomtype is either `random`, or one of the [special room names](#Room_types), eg. `\"morgue\"`\n\n- chance is optional percentage of the room being the special room; otherwise the room is ordinary.\n\n- lightstate is `lit`, `unlit`, or `random`.\n\n- pos can be either `random` or an approximate location in the form of `(1,3)` - this is not an absolute position, but an approximate position on the map - the number ranges are 1..5\n\n- align is either `random` or an approximate adjustment to the location in the form of `(horiz, vert)`, where\n\n  - horiz is one of `left`, `half-left`, `center`, `half-right`, or `right`.\n\n  - vert is one of `top`, `center`, or `bottom`.\n\n- size is either `random` or an exact width and height in the form of `(3,5)`.\n\n- filled is an optional `filled` or `unfilled`. `unfilled` means the room should get stocked with random stuff.\n\n- joined is an optional `joined` or `unjoined`, and tells whether any randomly generated corridors connect to the room.\n\nThe contents (and SUBROOMs) of the room can be defined using the level statements.\n\nSee also [SUBROOM](#SUBROOM) and [REGION](#REGION).\n\n### SUBROOM\n\n```\nSUBROOM:\"roomtype\", [ chance, ] lightstate, position, size [, filled] [, joined] { Level statements }\n```\n\nCreates a room within a [ROOM](#ROOM), with walls and floor. [BREAK](#BREAK) is allowed within the level statements block.\n\n- roomtype is either `random`, or one of the [special room names](#Room_types), eg. `\"morgue\"`\n\n- chance is optional percentage of the room being the special room; otherwise the room is ordinary.\n\n- lightstate is `lit`, `unlit`, or `random`.\n\n- position is either `random`, or an exact position of the room inside the outer room in the form of `(4,3)`.\n\n- size is either `random` or an exact width and height in the form of `(3,5)`.\n\n- filled is an optional `filled` or `unfilled`. `unfilled` means the room should get stocked with random stuff.\n\n- joined is an optional `joined` or `unjoined`, and tells whether any randomly generated corridors connect to the room.\n\nThe contents (and SUBROOMs) of the room can be defined using the level statements.\n\nSee also [ROOM](#ROOM) and [REGION](#REGION).\n\n### GOLD\n\n```\nGOLD:mathematical expression, coord or variable\n```\n\nCreate a pile of gold.\n\nExample:\n\n```\nGOLD: 400 + 10d100, (01,05)\n```\n\n### LADDER\n\n```\nLADDER:coord or variable, direction\n```\n\nCreates a ladder. direction is one of `up` or `down`.\n\n### STAIR\n\n```\nSTAIR:coord or variable, direction\n```\n\nCreates stairs. direction is one of `up` or `down`.\n\n### TELEPORT\\_REGION\n\n```\nTELEPORT_REGION:(x1,y1,x2,y2), (x3,y3,x4,y4) [, up_or_down ]\n```\n\nRestricts the area where player can end up on the level when he [level teleports](/wiki/Level_teleport \"Level teleport\") or falls in there. Player will end up within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4). If the area is prefixed with `levregion` then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined [MAP](#MAP). You can also add an optional direction parameter, either `up` or `down`, which will tell when this rule is applied; when player is coming from below or above.\n\nExample:\n\n```\nTELEPORT_REGION:(69,16,69,16),(0,0,0,0)\nTELEPORT_REGION:levregion(56,00,79,20),levregion(01,00,55,20),down\n```\n\n### TRAP\n\n```\nTRAP:\"falling rock\", coord or variable\nTRAP:random, coord or variable\n```\n\nCreate a trap at the given location.\n\n### WALLIFY\n\n```\nWALLIFY\nWALLIFY:selection\n```\n\nTurns walls (in the whole map, or in the defined [selection](#selection)) completely surrounded by other walls into solid stone `' '`.\n\nExample:\n\n```\nWALLIFY:fillrect(5,5, 40,15)\n```\n\n### NOMAP\n\n```\nNOMAP\n```\n\nInstead of [GEOMETRY](#GEOMETRY) and [MAP](#MAP), you use this if you think that [INIT\\_MAP](#INIT_MAP) creates a good enough random map and you don't want to use any fixed map-parts.\n\nSee also [MAP](#MAP)\n\n### GEOMETRY\n\nThis must be immediately followed by a [MAP](#MAP) definition. It tells the location of the MAP-part on the level. Two types of GEOMETRY, one takes an approximation of MAP alignment, the other takes an exact coordinate or variable.\n\n```\nGEOMETRY:horiz,vert\nGEOMETRY:coord or variable\n```\n\n- horiz is one of `left`, `half-left`, `center`, `half-right`, or `right`.\n\n- vert is one of `top`, `center`, or `bottom`.\n\nBoth types take an optional boolean value. If it's true, the commands following the map are restricted into that map.\n\n```\nGEOMETRY:center,center,true\n```\n\n### MAP\n\n```\nMAP\n...\n...\n...\nENDMAP\n```\n\nThis must be immediately preceded by a [GEOMETRY](#GEOMETRY) definition. You define a map-part by \"drawing\" with [map characters](#Map_characters) between the MAP and ENDMAP. The map can be up to 21 lines high and each line can be up to 76 chars long. Each line must also be the same length. You can also use numbers inside the map, but those will be ignored; they're considered as line numbers.\n\nThe top left point of the MAP is represented by the coordinates (0,0).\n\nSee also [NOMAP](#NOMAP).\n\n### MAZEWALK\n\n```\nMAZEWALK:coord or variable, direction\nMAZEWALK:coord or variable, direction, stocked\nMAZEWALK:coord or variable, direction, stocked, '.'\n```\n\nCreates a random maze, starting from the coordinates.\n\nstocked is an optional boolean value and tells whether the maze should get stocked with random loot and monsters. The optional map character is used to \"draw\" the maze.\n\nMazewalk turns map grids with solid stone (`' '`) into floor (`'.'`), or the given map character. From the starting position, it checks the mapgrid in the direction given, and if it's solid stone, it will move there, and turn that place into floor. Then it will choose a random direction, jump over the nearest mapgrid in that direction, and check the next mapgrid for solid stone. If there is solid stone, mazewalk will move that direction, changing that place and the intervening mapgrid to floor. Normally the generated maze will not have any loops. For example\n\n```\nMAP\nTTTTTTT\nT T T T\nTTTTTTT\nT T T T\nTTTTTTT\nENDMAP\n```\n\nPointing mazewalk at that will create a small maze of trees, but unless the map (at the place where it's put into the level) is surrounded by something else than solid stone, mazewalk will get out of that MAP. Substituting floor characters for some of the trees \"in the maze\" will make loops in the maze, which are not otherwise possible. Substituting floor characters for some of the trees at the edges of the map will make maze entrances and exits at those places.\n\nIf the total area NOT covered by all maze-parts in the level is greater than 1/10 of the total area of the level, then the mazes in the level will get stocked with maze-specific stuff, such as [minotaurs](/wiki/Minotaur \"Minotaur\"), traps and items, proportionally to the amount of space not covered by MAPs.\n\nMazewalk will only work if the solid stone mapgrids in the level (where the MAP was put down) are on odd-numbered squares, both horizontally and vertically. You don't have to worry about this unless your MAP is 21 rows high or 76 columns wide, in which case you'll have to either make the MAP smaller, or move the places where the solid stone squares are.\n\nAlso, MAZEWALK will fail in certain types of MAP-parts if you use [WALLIFY](#WALLIFY) before MAZEWALK.\n\nExample:\n\n```\nMAZEWALK:(00,06),west\n```\n\n### MONSTER\n\n```\nMONSTER:'d', coord or variable\nMONSTER:\"hill giant\", coord or variable\nMONSTER:('i', \"imp\"), coord or variable\nMONSTER:random, coord or variable\n$foo = monster:'d'\nMONSTER:$foo, (5,5)\n$arr = monster:{ 'd', 'T', 'y' }\nMONSTER:$arr[0], (5,5)\n```\n\nThe monster definition can also take a number of optional parameters, separated by commas:\n\n```\nMONSTER:'d', (4,4), \"Idefix\", peaceful, asleep, law, m_feature \"boulder\", female, invisible, cancelled, revived, avenge, stunned, confused, fleeing: 40, blinded: 20, paralyzed: 10, seen_traps: all\n```\n\n- \"Idefix\" is the name of the monster.\n\n- Instead of `peaceful`, could use `hostile`.\n\n- Instead of `asleep`, could use `awake`.\n\n- Instead of `law`, could use `noalign`, `neutral`, `chaos`, `coaligned`, `noncoaligned`, `align[0]`, `align[1]`, `align[2]` or `align:random`.\n\n- `m_feature` tells the monster to mimic a dungeon feature, a boulder in this case. could also use `m_monster` or `m_object`.\n\n- `female`, `invisible`, `cancelled`, `revived`, `avenge`, `stunned` and `confused` set monster status bits.\n\n- `fleeing`, `blinded` and `paralyzed` set the number of turns the monster will flee, is blinded or is paralyzed, respectively. Parameter is an integer value in the range of 0-127.\n\n- `seen_traps` tells which traps the monster has seen; parameter is either `all` or quoted strings of trap names separated by pipe characters (eg. `\"falling boulder\"`, or `\"arrow\"|\"dart\"|\"bear\"`)\n\n### OBJECT\n\n```\nOBJECT:\"elven cloak\", (5,5)\nOBJECT:'?', (5,5)\nOBJECT:('/', \"wishing\"), (5,5)\nOBJECT:random, (5,5)\n$foo = object:'/'\nOBJECT:$foo, (5,5)\n$arr = object:{ '/', '?', '!' }\nOBJECT:$arr[2], (5,5)\n```\n\nThe object definition can also take a number of optional parameters, separated by commas:\n\n```\nOBJECT:'?', (5,5), blessed, montype:('d', \"little dog\"), +4, name:\"foobar\", quantity: 20, buried, invisible, lit, greased, locked, trapped, eroded:2, erodeproof, recharged:3\n```\n\n- `blessed` can be replaced with `uncursed` or `cursed`.\n\n- `montype` tells eg. what monster statue it is.\n\n- any integer value sets the plusses or minuses for eg. armor or weapon.\n\n- `name` gives the item a name. can also take a variable of string type as a parameter.\n\n- `quantity` set the number of items.\n\n- `buried`, `trapped`, `invisible`, `greased` set object states.\n\n- `lit` or `unlit` for lamps.\n\n- `eroded` sets the erosion. Don't use with `erodeproof`.\n\n- `locked` (or `broken`) set the lock state for lockable objects.\n\n- `recharged` sets the number of times eg. a wand has been recharged.\n\n### CONTAINER\n\n```\nCONTAINER:\"large chest\", (5,5) { Level statements }\n```\n\nTakes the same parameters as [OBJECT](#OBJECT), but allows defining the contents inside the curly braces. For the contents, use a subset of level statements: OBJECTs, CONTAINERs and flow control commands; anything else causes undefined behaviour.\n\n## Flow control\n\nThe following commands affect the order in which commands are executed.\n\n### SWITCH\n\n```\nSWITCH [ integer_or_variable ] {\n  CASE integer:\n     Level statements\n  DEFAULT:\n     Level statements\n} \n```\n\nThe SWITCH behaviour is modeled after the C switch-statement. Using the [BREAK](#BREAK) keyword is allowed; without it the execution falls through to the next case.\n\nIf the integer value in the switch is a static number, it is automatically wrapped in rnd(). If a dice-notation or a variable is used, then the value is used as-is. For example the statements below are functionally the same:\n\n```\nSWITCH [ 3 ] { ... }\nSWITCH [ rnd(3) ] { ... }\nSWITCH [ 1d3 - 1 ] { ... }\n```\n\n### FOR\n\n```\nFOR $x = math_expr TO math_expr { Level statements }\n```\n\nExecutes the level statements as many times as it takes to increase (or decrease) the variable from the first integer value to the second. [BREAK](#BREAK) is allowed within the loop.\n\nExample:\n\n```\nFOR $x = 2 TO 40 {\n  FOR $y = 2+1 TO 2*10 {\n    OBJECT:random, coord($x, $y)\n  }\n}\n```\n\n### LOOP\n\n```\nLOOP [ integer_or_variable ] { Level statements }\n```\n\nExecutes the level statements as many times (but at least once) as the value inside square brackets says. If an integer variable is used, the value of the variable does not change. [BREAK](#BREAK) is allowed within the loop.\n\nExample:\n\n```\nLOOP [ 10 ] { OBJECT:random,random }\n```\n\n### IF\n\n```\nIF [ percentage ] { Level statements }\nIF [ math_expression_or_variable compare_operator math_expression_or_variable ] { Level statements }\nIF [ math_expression_or_variable ] { Level statements }\n```\n\nExecute the level statements, but only if matching some condition. You can also add an optional `ELSE { Level statements }` block. In the third form the statements will be executed if the math expression or variable is non-zero. Using [BREAK](#BREAK) is not allowed within the statements, unless the IF-block is inside a command where BREAK is allowed. In that case the BREAK will make the execution jump to the end of the containing command.\n\nThere's also a degenerate case `[50%]: one_level_statement`.\n\nFor example:\n\n```\nIF [ 25% ] { Level statements }\nIF [ 25% ] { Level statements } ELSE { Level statements }\nIF [ 2*2 == 4 ] { Level statements }\nIF [ 0 ] { Level statements }\n[50%]: MONSTER: random, random\n```\n\n### EXIT\n\n```\nEXIT\n```\n\nImmediately finishes the level script.\n\n### BREAK\n\n```\nBREAK\n```\n\nThe BREAK keyword will make the script skip the rest of the statement block. Breaks can be used within [LOOPs](#LOOP), [FOR](#FOR)-loops, [SWITCHes](#SWITCH), [ROOM](#ROOM) and [SUBROOM](#SUBROOM) contents, [CONTAINER](#CONTAINER) contents, [MONSTER](#MONSTER) inventories, and [REGION](#REGION) contents.\n\nExample:\n\n```\nFOR $x = 5 TO 60 {\n OBJECT:'$',coord($x,10)\n IF [ $x > 30 ] { BREAK }\n}\n```\n\n## Variables and Types\n\n### variable\n\nVariable names start with a dollar sign, and can contain any alphanumeric characters. Variables must be defined before they can be used. Some variable definitions must have the variable type: `terrain`, `monster`, `object` and `selection`.\n\n```\n$foo = 123\n$foo = \"any string\"\n$foo = mathematical expression\n$bar = $foo\n$foo = terrain:'T'\n$foo = terrain:('.', lit)\n$foo = monster:'d'\n$foo = monster:\"little dog\"\n$foo = monster:('d', \"little dog\")\n$foo = monster:random\n$foo = object:'/'\n$foo = object:\"elven cloak\"\n$foo = object:('?', \"identify\")\n$foo = (40, 12)\n$foo = (5,5, 40,12)\n$foo = selection:selection\n```\n\n### array variable\n\n```\n$foo = { 1, 2, 3, 4, 5 }\n$foo = { \"string a\", \"bcdef\", \"and something\" }\n$foo = { (1,2), (40,12) }\n$foo = { (5,5,40,12), (1,1,20,18), (40,10,50,12) }\n$foo = terrain: { 'T', 'L', ('.', unlit) }\n$foo = monster: { 'n', \"newt\", ('d', \"little dog\") }\n$foo = object: { '/', \"elven cloak\", ('?', \"identify\") }\n```\n\nTo access one element of an array variable, use eg. `$foo[0]` to access variable $foo's first element.\n\nArray length can be accessed with the `.length` method:\n\n```\n$foo = { 1, 2, 4 }\nMESSAGE: \"length is \" . string($foo.length)\n```\n\n### coord or variable\n\nThis parameter can be either a pair of coordinates, or a variable of the type coord. For example:\n\n```\nGRAVE: (10,5)\n$foo = (4,10)\n$bar = { (4,10), (3,12), (50,2) }\nGRAVE: $foo\nGRAVE: $bar[1]\n```\n\n```\nGRAVE: rndcoord(selection)\n```\n\nA random pair of coordinates selected from within the [selection](#selection)\n\nThe x and y coordinates can be accessed (but not set) separately:\n\n```\n$foo = (4, 10)\nIF [ $foo.x == 4 ] {\n  MESSAGE: \" y = \" . string($foo.y)\n}\n```\n\n### strings\n\n```\n$foo = \"This is a string\"\nMESSAGE: $foo . \" and another\"\n```\n\nStrings are any characters surrounded by double quotes. Strings can be concatenated with full stop. If you wish to concatenate an integer value, it must be first converted to string with the [`string()` function](#Predefined_functions_and_constants).\n\n### region or variable\n\nThis parameter can be either a region, or a variable of the region type. For example:\n\n```\nNON_DIGGABLE:(5,5, 40,12)\n$foo = (5,5, 40,12)\nNON_DIGGABLE:$foo\n```\n\n### map character or variable\n\nThis parameter can be either a [map character](#Map_characters), a map character and lightstate combination, or a variable of terrain type:\n\n```\nTERRAIN:(5,5), 'L'\nTERRAIN:(6,6), ('.', unlit)\n$lava = terrain:'L'\nTERRAIN:(7,7), $lava\n$floor = terrain:('.', lit)\nTERRAIN:(8,8), $floor\n```\n\n### mathematical expression\n\nA mathematical expression can consist of plain integer values, [D-notations](/wiki/D-notation \"D-notation\"), variables of integer type, and the operands '+', '-', '\\*', '/', and '%'. For example: `1 + 2`, or `3d6 * (2 + 3)`. Negative integer values should be enclosed inside parenthesis: `(-1) * (-3)`\n\n### selection\n\nA selection is a collection of points, represented by map coordinates. The `selection` keyword is only needed when defining a variable of selection type.\n\nSelections can be added together with the '&' operator, for example `rect(5,5, 50,18) & rect(10,2, 40,13)`:\n\n```\n$foo = selection:rect(5,5, 50,18) & rect(10,2, 40,13)\n```\n\n#### coordinate\n\n```\n$foo = selection:coord or variable\n```\n\nThe selection contains a single point on the map.\n\nExample:\n\n```\n$foo = selection:(55,12)\n$bar = (4,10)\n$baz = selection:$bar\n```\n\n#### rectangle\n\n```\n$foo = selection:rect region or variable\n```\n\nThe selection includes the border of the rectangle.\n\nExample:\n\n```\n$foo = selection: rect(5,3, 72,18)\n```\n\n#### filled rectangle\n\n```\n$foo = selection:fillrect region or variable\n```\n\nThe selection contains a rectangular area.\n\nExample:\n\n```\n$foo = selection: fillrect(5,3, 72,18)\n```\n\n#### line\n\n```\n$foo = selection:line coord or variable-coord or variable\n```\n\nThe selection contains a straight line between the points.\n\nExample:\n\n```\n$foo = selection: line(1,1)-(76,21)\n```\n\n#### random line\n\n```\n$foo = selection:randline coord or variable-coord or variable,mathematical expression\n```\n\nThe selection contains a meandering line between the points. The integer value is the \"roughness\" of the line.\n\nExample:\n\n```\n$foo = selection: randline(1,1)-(76,21), 4\n```\n\n#### grow\n\n```\n$foo = selection:grow (selection)\n$foo = selection:grow (list of directions, selection)\n```\n\nGrow a selection by adding the surrounding map points to it. The second form can take a list of directions, and the growth will pick points from those directions to grow into.\n\nExample:\n\n```\n$foo = selection:grow(line(1,1)-(76,21))\n$bar = selection:grow(north|south, rect(5,3, 72,18))\n```\n\n#### filter\n\n```\n$foo = selection:filter (50%, selection)\n$foo = selection:filter (selection, selection)\n$foo = selection:filter (map character or variable, selection)\n```\n\nRemove points from the selection. The first form picks (at random) 50% of the points in the selection, the second chooses points that are common to both selections, third one leaves only places that match the map character.\n\nExample:\n\n```\n$foo = selection: filter(20%, fillrect(5,3, 72,18))\n$foo = selection: filter('L', fillrect(1,1, 76,21))\n```\n\n#### floodfill\n\n```\n$foo = selection:floodfill coord or variable\n```\n\n\"Floodfill\" from the point, adding all connected points with the same terrain type to the selection.\n\n#### circle\n\n```\n$foo = selection:circle (coord or variable, mathematical expression)\n$foo = selection:circle (coord or variable, mathematical expression, filled)\n$foo = selection:circle (coord or variable, mathematical expression, unfilled)\n```\n\nCircle shape. Parameters are center point, radius, and optional `filled` or `unfilled`. Creates an unfilled circle by default.\n\nFor example:\n\n```\n$foo = selection: circle((5,10), 3) &\n                  circle((15,10), 3, unfilled) &\n                  circle((25,10), 3, filled)\nTERRAIN:$foo, 'L'\n```\n\n#### ellipse\n\n```\n$foo = selection:ellipse (coord or variable, mathematical expression, mathematical expression)\n$foo = selection:ellipse (coord or variable, mathematical expression, mathematical expression, filled)\n$foo = selection:ellipse (coord or variable, mathematical expression, mathematical expression, unfilled)\n```\n\nEllipse shape. Parameters are center point, horizontal and vertical radius, and optional `filled` or `unfilled`. Creates an unfilled ellipse by default.\n\nFor example:\n\n```\n$foo = selection: ellipse((35,10), 3,5) &\n                  ellipse((45,10), 3,5, unfilled) &\n                  ellipse((55,10), 3,5, filled)\nTERRAIN:$foo, 'L'\n```\n\n#### gradient\n\n```\n$foo = selection: gradient(grad_type, (min_dist - max_dist [, limited]), coord [, coord2 ])\n```\n\nSelects random points with distance from coord between min\\_dist and max\\_dist, with higher probability closer to max\\_dist. No points closer than min\\_dist will be included. All points at max\\_dist will be included. Using the optional \"limited\" will make the selection stop at max\\_dist. Leaving the \"limited\" out, or using \"unlimited\", will select all points outside the max\\_dist radius.\n\ngrad\\_type can be one of \"radial\" or \"square\", and affects the distance calculation from the center.\n\nIf the optional second pair of coordinates is given, the \"center\" of the area is a line segment between the two pairs of coordinates.\n\nFor example:\n\n```\n$r = selection: gradient(radial, (1 - 9, limited), (11,10))\nTERRAIN:$r,'L'\n```\n\n#### complement\n\n```\n$foo = selection: complement(selection)\n```\n\nReturns a bitwise not, or complement, of the selection.\n\n#### rndcoord\n\nTo select a random pair of coordinates from a selection, use `rndcoord(selection)`:\n\n```\n$bar = rndcoord(rect(5,5, 50,18) & rect(10,2, 40,13))\n```\n\n## Predefined functions and constants\n\nThese are internal functions from the game's code that are available during level creation:\n\n| name                          | return value                       |                                                                                                                                                                                                                                                                                                                      |\n| ----------------------------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| time.discordian\\_holiday      | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.pirateday                | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.aprilfoolsday            | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.piday                    | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.towelday                 | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.midnight                 | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.night                    | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.friday\\_13th             | integer, 0 or 1                    |                                                                                                                                                                                                                                                                                                                      |\n| time.phase\\_of\\_the\\_moon     | integer, 0..7, where 0=new, 4=full |                                                                                                                                                                                                                                                                                                                      |\n| time.yyyymmdd                 | integer                            | Current date in the YYYYMMDD format, eg. 20120418                                                                                                                                                                                                                                                                    |\n| level.depth                   | integer                            | Returns the level depth from surface.                                                                                                                                                                                                                                                                                |\n| level.difficulty              | integer                            |                                                                                                                                                                                                                                                                                                                      |\n| level.obj\\_at(obj, coord)     | integer, 0 or 1                    | Return 1 if the specified object is present at the coordinates.                                                                                                                                                                                                                                                      |\n| level.mon\\_at(monster, coord) | integer, 0 or 1                    | Return 1 if there's a monster of certain class, or a certain type of monster, or any monster at the coordinates. `level.mon_at(monster:'h', (5,5))` matches any monster of class h, `level.mon_at(monster:('h', \"hobbit\"), (5,5))` matches only a hobbit, `level.mon_at(monster:random, (5,5))` matches any monster. |\n| hero.name                     | string                             |                                                                                                                                                                                                                                                                                                                      |\n| hero.role                     | string, eg. \"Priest\"               |                                                                                                                                                                                                                                                                                                                      |\n| hero.race                     | string, eg. \"human\"                |                                                                                                                                                                                                                                                                                                                      |\n| hero.carrying(obj)            | integer, 0 or 1                    | Return 1 if player has object in main inventory.                                                                                                                                                                                                                                                                     |\n| string(int)                   | string                             | Convert an integer to string. Alias: `str()`                                                                                                                                                                                                                                                                         |\n| int(str)                      | integer                            | Convert a string to integer. Alias: `integer()`                                                                                                                                                                                                                                                                      |\n| coord(int, int)               | coordinates                        | Convert two integer values into a pair of map coordinates.                                                                                                                                                                                                                                                           |\n| region(int, int, int, int)    | region                             | Convert four integer values into a region                                                                                                                                                                                                                                                                            |\n| rnd(int)                      | integer                            | Returns a random integer number between 0 and (int-1). This is equal to the [rn2](/wiki/Source:Ref/rn2 \"Source:Ref/rn2\")-function in the sourcecode.                                                                                                                                                                 |\n| room.width                    | integer                            | Returns the width of the current (SUB)ROOM, minus the outer walls. If used outside a ROOM context, returns 0.                                                                                                                                                                                                        |\n| room.height                   | integer                            | Returns the height of the current (SUB)ROOM, minus the outer walls. If used outside a ROOM context, returns 0.                                                                                                                                                                                                       |\n| room.x                        | integer                            | Returns the x coordinate of the top-left corner of the current (SUB)ROOM. If used outside a ROOM context, returns 0.                                                                                                                                                                                                 |\n| room.y                        | integer                            | Returns the y coordinate of the top-left corner of the current (SUB)ROOM. If used outside a ROOM context, returns 0.                                                                                                                                                                                                 |\n\nFor example:\n\n```\nIF [ level.obj_at(obj:\"pick-axe\", coord(2 + 3, 5)) ] {\n MESSAGE: \"Today is \" . string(time.yyyymmdd)\n}\n```\n\n### Map characters\n\n| character | [dungeon feature](/wiki/Dungeon_feature \"Dungeon feature\")    |\n| --------- | ------------------------------------------------------------- |\n| `' '`     | solid wall                                                    |\n| `'#'`     | corridor                                                      |\n| `'.'`     | room floor (Unlit, unless lit with [REGION](#REGION)-command) |\n| `'-'`     | horizontal wall                                               |\n| `'\\|'`    | vertical wall                                                 |\n| `'+'`     | door (State is defined with [DOOR](#DOOR) -command)           |\n| `'A'`     | air                                                           |\n| `'B'`     | crosswall / boundary symbol hack (See [REGION](#REGION))      |\n| `'C'`     | cloud                                                         |\n| `'S'`     | secret door                                                   |\n| `'H'`     | secret corridor                                               |\n| `'{'`     | fountain                                                      |\n| `'\\'`     | throne                                                        |\n| `'K'`     | sink                                                          |\n| `'}'`     | moat                                                          |\n| `'P'`     | pool of water                                                 |\n| `'L'`     | lava pool                                                     |\n| `'I'`     | ice                                                           |\n| `'W'`     | water                                                         |\n| `'T'`     | tree                                                          |\n| `'t'`     | dead tree                                                     |\n| `'F'`     | iron bars                                                     |\n| `'M'`     | muddy swamp                                                   |\n| `'Y'`     | crystal ice wall                                              |\n| `'U'`     | ice wall                                                      |\n| `'x'`     | \"transparent\" map character                                   |\n\n### Trap names\n\n\"anti magic\", \"arrow\", \"bear\", \"board\", \"dart\", \"falling rock\", \"fire\", \"hole\", \"land mine\", \"level teleport\", \"magic portal\", \"magic\", \"pit\", \"polymorph\", \"rolling boulder\", \"rust\", \"sleep gas\", \"spiked pit\", \"statue\", \"teleport\", \"trap door\", \"web\", \"cold\"\n\n### Room types\n\n\"ordinary\", \"throne\", \"swamp\", \"vault\", \"beehive\", \"morgue\", \"barracks\", \"zoo\", \"delphi\", \"temple\", \"lemurepit\", \"anthole\", \"cocknest\", \"garden\", \"leprehall\", \"shop\", \"armor shop\", \"scroll shop\", \"potion shop\", \"weapon shop\", \"food shop\", \"ring shop\", \"wand shop\", \"tool shop\", \"book shop\", \"tin shop\", \"music shop\", \"candle shop\", \"pet shop\", \"black market\"\n\n[![This article describes a 3.4.3-based variant of NetHack. Click here for more information.](/images/5/5d/Nh343var-icon.png)](/wiki/NetHackWiki:Next_version \"This article describes a 3.4.3-based variant of NetHack. Click here for more information.\")\n","html":"<!DOCTYPE html>\n<html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>des-file format (UnNetHack) - NetHack Wiki</title>\n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"Des-file_format_(UnNetHack)\",\"wgTitle\":\"Des-file format (UnNetHack)\",\"wgCurRevisionId\":123560,\"wgRevisionId\":123560,\"wgArticleId\":21633,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[\"Variant-343 articles\",\"Annotations\",\"UnNetHack\"],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"Des-file_format_(UnNetHack)\",\"wgRelevantArticleId\":21633,\"wgRequestId\":\"6c4bd3cb7d52ad3e4cc1cfb2\",\"wgCSPNonce\":false,\"wgIsProbablyEditable\":false,\"wgRelevantPageIsProbablyEditable\":false,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"wgWikiEditorEnabledModules\":[],\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.state({\"site.styles\":\"ready\",\"noscript\":\"ready\",\"user.styles\":\"ready\",\"user\":\"ready\",\"user.options\":\"ready\",\"user.tokens\":\"loading\",\"mediawiki.legacy.shared\":\"ready\",\"mediawiki.legacy.commonPrint\":\"ready\",\"mediawiki.toc.styles\":\"ready\",\"mediawiki.skinning.interface\":\"ready\",\"skins.vector.styles\":\"ready\"});mw.loader.implement(\"user.tokens@0tffind\",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\",\"csrfToken\":\"+\\\\\"});\n});RLPAGEMODULES=[\"site\",\"mediawiki.page.startup\",\"mediawiki.user\",\"mediawiki.page.ready\",\"mediawiki.toc\",\"mediawiki.searchSuggest\",\"skins.vector.js\"];mw.loader.load(RLPAGEMODULES);});</script>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\"/>\n<script async=\"\" src=\"/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>\n<meta name=\"ResourceLoaderDynamicStyles\" content=\"\"/>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector\"/>\n<meta name=\"generator\" content=\"MediaWiki 1.32.5\"/>\n<link rel=\"image_src\" href=\"/images/6/65/Nethackwiki-logo.png\"/>\n<link rel=\"shortcut icon\" href=\"/images/6/64/Favicon.ico\"/>\n<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch_desc.php\" title=\"NetHackWiki\"/>\n<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://nethackwiki.com/api.php?action=rsd\"/>\n<link rel=\"canonical\" href=\"/wiki/Des-file_format_(UnNetHack)\"/>\n<!--[if lt IE 9]><script src=\"/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1\"></script><![endif]-->\n</head>\n<body class=\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Des-file_format_UnNetHack rootpage-Des-file_format_UnNetHack skin-vector action-view\">\t\t<div id=\"mw-page-base\" class=\"noprint\"></div>\n\t\t<div id=\"mw-head-base\" class=\"noprint\"></div>\n\t\t<div id=\"content\" class=\"mw-body\" role=\"main\">\n\t\t\t<a id=\"top\"></a>\n\t\t\t<div class=\"mw-indicators mw-body-content\">\n</div>\n<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">des-file format (UnNetHack)</h1>\t\t\t<div id=\"bodyContent\" class=\"mw-body-content\">\n\t\t\t\t<div id=\"siteSub\" class=\"noprint\">From NetHackWiki</div>\t\t\t\t<div id=\"contentSub\"></div>\n\t\t\t\t<div id=\"jump-to-nav\"></div>\t\t\t\t<a class=\"mw-jump-link\" href=\"#mw-head\">Jump to navigation</a>\n\t\t\t\t<a class=\"mw-jump-link\" href=\"#p-search\">Jump to search</a>\n\t\t\t\t<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div class=\"mw-parser-output\"><table cellspacing=\"0\" cellpadding=\"0\" style=\"clear: right; margin-bottom: .5em; float: right; padding: .5em 0 .8em 1.4em; background: none; width: auto;\">\n<tbody><tr>\n<td><div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#Comments\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Comments</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Header_statements\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Header statements</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-3\"><a href=\"#FUNCTION\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">FUNCTION</span></a></li>\n<li class=\"toclevel-2 tocsection-4\"><a href=\"#INCLUDE\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">INCLUDE</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Level_definitions\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Level definitions</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-6\"><a href=\"#LEVEL\"><span class=\"tocnumber\">3.1</span> <span class=\"toctext\">LEVEL</span></a></li>\n<li class=\"toclevel-2 tocsection-7\"><a href=\"#FLAGS\"><span class=\"tocnumber\">3.2</span> <span class=\"toctext\">FLAGS</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#Level_statements\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Level statements</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"#MESSAGE\"><span class=\"tocnumber\">4.1</span> <span class=\"toctext\">MESSAGE</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#INIT_MAP\"><span class=\"tocnumber\">4.2</span> <span class=\"toctext\">INIT_MAP</span></a></li>\n<li class=\"toclevel-2 tocsection-11\"><a href=\"#ALTAR\"><span class=\"tocnumber\">4.3</span> <span class=\"toctext\">ALTAR</span></a></li>\n<li class=\"toclevel-2 tocsection-12\"><a href=\"#GRAVE\"><span class=\"tocnumber\">4.4</span> <span class=\"toctext\">GRAVE</span></a></li>\n<li class=\"toclevel-2 tocsection-13\"><a href=\"#MON_GENERATION\"><span class=\"tocnumber\">4.5</span> <span class=\"toctext\">MON_GENERATION</span></a></li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"#SOUNDS\"><span class=\"tocnumber\">4.6</span> <span class=\"toctext\">SOUNDS</span></a></li>\n<li class=\"toclevel-2 tocsection-15\"><a href=\"#BRANCH\"><span class=\"tocnumber\">4.7</span> <span class=\"toctext\">BRANCH</span></a></li>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"#CORRIDOR\"><span class=\"tocnumber\">4.8</span> <span class=\"toctext\">CORRIDOR</span></a></li>\n<li class=\"toclevel-2 tocsection-17\"><a href=\"#SHUFFLE\"><span class=\"tocnumber\">4.9</span> <span class=\"toctext\">SHUFFLE</span></a></li>\n<li class=\"toclevel-2 tocsection-18\"><a href=\"#NON_DIGGABLE\"><span class=\"tocnumber\">4.10</span> <span class=\"toctext\">NON_DIGGABLE</span></a></li>\n<li class=\"toclevel-2 tocsection-19\"><a href=\"#NON_PASSWALL\"><span class=\"tocnumber\">4.11</span> <span class=\"toctext\">NON_PASSWALL</span></a></li>\n<li class=\"toclevel-2 tocsection-20\"><a href=\"#ROOMDOOR\"><span class=\"tocnumber\">4.12</span> <span class=\"toctext\">ROOMDOOR</span></a></li>\n<li class=\"toclevel-2 tocsection-21\"><a href=\"#DOOR\"><span class=\"tocnumber\">4.13</span> <span class=\"toctext\">DOOR</span></a></li>\n<li class=\"toclevel-2 tocsection-22\"><a href=\"#WALLWALK\"><span class=\"tocnumber\">4.14</span> <span class=\"toctext\">WALLWALK</span></a></li>\n<li class=\"toclevel-2 tocsection-23\"><a href=\"#DRAWBRIDGE\"><span class=\"tocnumber\">4.15</span> <span class=\"toctext\">DRAWBRIDGE</span></a></li>\n<li class=\"toclevel-2 tocsection-24\"><a href=\"#ENGRAVING\"><span class=\"tocnumber\">4.16</span> <span class=\"toctext\">ENGRAVING</span></a></li>\n<li class=\"toclevel-2 tocsection-25\"><a href=\"#FOUNTAIN\"><span class=\"tocnumber\">4.17</span> <span class=\"toctext\">FOUNTAIN</span></a></li>\n<li class=\"toclevel-2 tocsection-26\"><a href=\"#POOL\"><span class=\"tocnumber\">4.18</span> <span class=\"toctext\">POOL</span></a></li>\n<li class=\"toclevel-2 tocsection-27\"><a href=\"#SINK\"><span class=\"tocnumber\">4.19</span> <span class=\"toctext\">SINK</span></a></li>\n<li class=\"toclevel-2 tocsection-28\"><a href=\"#TERRAIN\"><span class=\"tocnumber\">4.20</span> <span class=\"toctext\">TERRAIN</span></a></li>\n<li class=\"toclevel-2 tocsection-29\"><a href=\"#REPLACE_TERRAIN\"><span class=\"tocnumber\">4.21</span> <span class=\"toctext\">REPLACE_TERRAIN</span></a></li>\n<li class=\"toclevel-2 tocsection-30\"><a href=\"#SPILL\"><span class=\"tocnumber\">4.22</span> <span class=\"toctext\">SPILL</span></a></li>\n<li class=\"toclevel-2 tocsection-31\"><a href=\"#PORTAL\"><span class=\"tocnumber\">4.23</span> <span class=\"toctext\">PORTAL</span></a></li>\n<li class=\"toclevel-2 tocsection-32\"><a href=\"#RANDOM_CORRIDORS\"><span class=\"tocnumber\">4.24</span> <span class=\"toctext\">RANDOM_CORRIDORS</span></a></li>\n<li class=\"toclevel-2 tocsection-33\"><a href=\"#MINERALIZE\"><span class=\"tocnumber\">4.25</span> <span class=\"toctext\">MINERALIZE</span></a></li>\n<li class=\"toclevel-2 tocsection-34\"><a href=\"#REGION\"><span class=\"tocnumber\">4.26</span> <span class=\"toctext\">REGION</span></a></li>\n<li class=\"toclevel-2 tocsection-35\"><a href=\"#ROOM\"><span class=\"tocnumber\">4.27</span> <span class=\"toctext\">ROOM</span></a></li>\n<li class=\"toclevel-2 tocsection-36\"><a href=\"#SUBROOM\"><span class=\"tocnumber\">4.28</span> <span class=\"toctext\">SUBROOM</span></a></li>\n<li class=\"toclevel-2 tocsection-37\"><a href=\"#GOLD\"><span class=\"tocnumber\">4.29</span> <span class=\"toctext\">GOLD</span></a></li>\n<li class=\"toclevel-2 tocsection-38\"><a href=\"#LADDER\"><span class=\"tocnumber\">4.30</span> <span class=\"toctext\">LADDER</span></a></li>\n<li class=\"toclevel-2 tocsection-39\"><a href=\"#STAIR\"><span class=\"tocnumber\">4.31</span> <span class=\"toctext\">STAIR</span></a></li>\n<li class=\"toclevel-2 tocsection-40\"><a href=\"#TELEPORT_REGION\"><span class=\"tocnumber\">4.32</span> <span class=\"toctext\">TELEPORT_REGION</span></a></li>\n<li class=\"toclevel-2 tocsection-41\"><a href=\"#TRAP\"><span class=\"tocnumber\">4.33</span> <span class=\"toctext\">TRAP</span></a></li>\n<li class=\"toclevel-2 tocsection-42\"><a href=\"#WALLIFY\"><span class=\"tocnumber\">4.34</span> <span class=\"toctext\">WALLIFY</span></a></li>\n<li class=\"toclevel-2 tocsection-43\"><a href=\"#NOMAP\"><span class=\"tocnumber\">4.35</span> <span class=\"toctext\">NOMAP</span></a></li>\n<li class=\"toclevel-2 tocsection-44\"><a href=\"#GEOMETRY\"><span class=\"tocnumber\">4.36</span> <span class=\"toctext\">GEOMETRY</span></a></li>\n<li class=\"toclevel-2 tocsection-45\"><a href=\"#MAP\"><span class=\"tocnumber\">4.37</span> <span class=\"toctext\">MAP</span></a></li>\n<li class=\"toclevel-2 tocsection-46\"><a href=\"#MAZEWALK\"><span class=\"tocnumber\">4.38</span> <span class=\"toctext\">MAZEWALK</span></a></li>\n<li class=\"toclevel-2 tocsection-47\"><a href=\"#MONSTER\"><span class=\"tocnumber\">4.39</span> <span class=\"toctext\">MONSTER</span></a></li>\n<li class=\"toclevel-2 tocsection-48\"><a href=\"#OBJECT\"><span class=\"tocnumber\">4.40</span> <span class=\"toctext\">OBJECT</span></a></li>\n<li class=\"toclevel-2 tocsection-49\"><a href=\"#CONTAINER\"><span class=\"tocnumber\">4.41</span> <span class=\"toctext\">CONTAINER</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-50\"><a href=\"#Flow_control\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Flow control</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-51\"><a href=\"#SWITCH\"><span class=\"tocnumber\">5.1</span> <span class=\"toctext\">SWITCH</span></a></li>\n<li class=\"toclevel-2 tocsection-52\"><a href=\"#FOR\"><span class=\"tocnumber\">5.2</span> <span class=\"toctext\">FOR</span></a></li>\n<li class=\"toclevel-2 tocsection-53\"><a href=\"#LOOP\"><span class=\"tocnumber\">5.3</span> <span class=\"toctext\">LOOP</span></a></li>\n<li class=\"toclevel-2 tocsection-54\"><a href=\"#IF\"><span class=\"tocnumber\">5.4</span> <span class=\"toctext\">IF</span></a></li>\n<li class=\"toclevel-2 tocsection-55\"><a href=\"#EXIT\"><span class=\"tocnumber\">5.5</span> <span class=\"toctext\">EXIT</span></a></li>\n<li class=\"toclevel-2 tocsection-56\"><a href=\"#BREAK\"><span class=\"tocnumber\">5.6</span> <span class=\"toctext\">BREAK</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-57\"><a href=\"#Variables_and_Types\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">Variables and Types</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-58\"><a href=\"#variable\"><span class=\"tocnumber\">6.1</span> <span class=\"toctext\">variable</span></a></li>\n<li class=\"toclevel-2 tocsection-59\"><a href=\"#array_variable\"><span class=\"tocnumber\">6.2</span> <span class=\"toctext\">array variable</span></a></li>\n<li class=\"toclevel-2 tocsection-60\"><a href=\"#coord_or_variable\"><span class=\"tocnumber\">6.3</span> <span class=\"toctext\">coord or variable</span></a></li>\n<li class=\"toclevel-2 tocsection-61\"><a href=\"#strings\"><span class=\"tocnumber\">6.4</span> <span class=\"toctext\">strings</span></a></li>\n<li class=\"toclevel-2 tocsection-62\"><a href=\"#region_or_variable\"><span class=\"tocnumber\">6.5</span> <span class=\"toctext\">region or variable</span></a></li>\n<li class=\"toclevel-2 tocsection-63\"><a href=\"#map_character_or_variable\"><span class=\"tocnumber\">6.6</span> <span class=\"toctext\">map character or variable</span></a></li>\n<li class=\"toclevel-2 tocsection-64\"><a href=\"#mathematical_expression\"><span class=\"tocnumber\">6.7</span> <span class=\"toctext\">mathematical expression</span></a></li>\n<li class=\"toclevel-2 tocsection-65\"><a href=\"#selection\"><span class=\"tocnumber\">6.8</span> <span class=\"toctext\">selection</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-66\"><a href=\"#coordinate\"><span class=\"tocnumber\">6.8.1</span> <span class=\"toctext\">coordinate</span></a></li>\n<li class=\"toclevel-3 tocsection-67\"><a href=\"#rectangle\"><span class=\"tocnumber\">6.8.2</span> <span class=\"toctext\">rectangle</span></a></li>\n<li class=\"toclevel-3 tocsection-68\"><a href=\"#filled_rectangle\"><span class=\"tocnumber\">6.8.3</span> <span class=\"toctext\">filled rectangle</span></a></li>\n<li class=\"toclevel-3 tocsection-69\"><a href=\"#line\"><span class=\"tocnumber\">6.8.4</span> <span class=\"toctext\">line</span></a></li>\n<li class=\"toclevel-3 tocsection-70\"><a href=\"#random_line\"><span class=\"tocnumber\">6.8.5</span> <span class=\"toctext\">random line</span></a></li>\n<li class=\"toclevel-3 tocsection-71\"><a href=\"#grow\"><span class=\"tocnumber\">6.8.6</span> <span class=\"toctext\">grow</span></a></li>\n<li class=\"toclevel-3 tocsection-72\"><a href=\"#filter\"><span class=\"tocnumber\">6.8.7</span> <span class=\"toctext\">filter</span></a></li>\n<li class=\"toclevel-3 tocsection-73\"><a href=\"#floodfill\"><span class=\"tocnumber\">6.8.8</span> <span class=\"toctext\">floodfill</span></a></li>\n<li class=\"toclevel-3 tocsection-74\"><a href=\"#circle\"><span class=\"tocnumber\">6.8.9</span> <span class=\"toctext\">circle</span></a></li>\n<li class=\"toclevel-3 tocsection-75\"><a href=\"#ellipse\"><span class=\"tocnumber\">6.8.10</span> <span class=\"toctext\">ellipse</span></a></li>\n<li class=\"toclevel-3 tocsection-76\"><a href=\"#gradient\"><span class=\"tocnumber\">6.8.11</span> <span class=\"toctext\">gradient</span></a></li>\n<li class=\"toclevel-3 tocsection-77\"><a href=\"#complement\"><span class=\"tocnumber\">6.8.12</span> <span class=\"toctext\">complement</span></a></li>\n<li class=\"toclevel-3 tocsection-78\"><a href=\"#rndcoord\"><span class=\"tocnumber\">6.8.13</span> <span class=\"toctext\">rndcoord</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"toclevel-1 tocsection-79\"><a href=\"#Predefined_functions_and_constants\"><span class=\"tocnumber\">7</span> <span class=\"toctext\">Predefined functions and constants</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-80\"><a href=\"#Map_characters\"><span class=\"tocnumber\">7.1</span> <span class=\"toctext\">Map characters</span></a></li>\n<li class=\"toclevel-2 tocsection-81\"><a href=\"#Trap_names\"><span class=\"tocnumber\">7.2</span> <span class=\"toctext\">Trap names</span></a></li>\n<li class=\"toclevel-2 tocsection-82\"><a href=\"#Room_types\"><span class=\"tocnumber\">7.3</span> <span class=\"toctext\">Room types</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n\n</td></tr></tbody></table>\n<p>This documents the <a href=\"/wiki/Des-file_format\" title=\"Des-file format\">des-file format</a> used by <a href=\"/wiki/UnNetHack\" title=\"UnNetHack\">UnNetHack</a>.\n</p><p>UnNethack (like <a href=\"/wiki/Sporkhack\" class=\"mw-redirect\" title=\"Sporkhack\">Sporkhack</a>) started with the <a class=\"external text\" href=\"http://bilious.alt.org/?20\">new level compiler patch</a>, and then added most of the changes from Spork.\n</p><p>A des-file consists of any number of <a href=\"#Header_statements\">Header statements</a>, and one or more of <a href=\"#Level_definitions\">Level definitions</a>.\n</p><p>Unlike vanilla format, the UnNetHack one is closer to a real programming language, the statements are executed in order, and there is some flow control.\n</p>\n<h2><span class=\"mw-headline\" id=\"Comments\">Comments</span></h2>\n<p>All lines beginning with <tt>#</tt> are comments and are ignored by the level compiler, except between <a href=\"#MAP\">MAP</a> and <a href=\"#MAP\">ENDMAP</a>.\n</p><p>Example:\n</p>\n<pre># This is a comment.\n</pre>\n<h2><span class=\"mw-headline\" id=\"Header_statements\">Header statements</span></h2>\n<h3><span class=\"mw-headline\" id=\"FUNCTION\">FUNCTION</span></h3>\n<pre>FUNCTION name() { <a href=\"#Level_statements\">Level statements</a> }\nFUNCTION name([$paramname:paramtype [, ...]]) { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Defines a function.\nThe level statements defined inside the function body will be executed when the function is called.\nFunction must be defined before it can be called. Function name can contain alphanumeric characters (a-z, A-Z and 0-9) and full stops (.)\nCall the function by using it's name, for example <tt>name()</tt>\nVariables defined outside the function cannot be accessed, and variables defined inside the function are gone when the function finishes.\nFunctions can have any number of named parameters separated by commas. Supported parameter types are \"string\" and \"integer\".\n</p><p>Example:\n</p>\n<pre>FUNCTION foobar() {\n  OBJECT:'?', random\n}\nfoobar()\nFUNCTION bazqux($foo:integer, $bar:string) {\n  MESSAGE: $bar\n  OBJECT:'$', random, quantity: $foo\n}\nbazqux(12345, \"Fee Fie Foe Foo\")\n</pre>\n<h3><span class=\"mw-headline\" id=\"INCLUDE\">INCLUDE</span></h3>\n<pre>INCLUDE \"filename.des\"\n</pre>\n<p>Includes the contents of the file in the current file.\n</p>\n<h2><span class=\"mw-headline\" id=\"Level_definitions\">Level definitions</span></h2>\n<p>A level definition consists of <a href=\"#LEVEL\">LEVEL</a>, followed by an optional <a href=\"#FLAGS\">FLAGS</a> and any number of <a href=\"#Level_statements\">Level statements</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"LEVEL\">LEVEL</span></h3>\n<pre>LEVEL:\"name\"\n</pre>\n<p>The level is saved as <tt>name.lev</tt> file. The name can be up to 14 characters long.\n</p><p>Using a <tt>%i</tt> in the filename will be replaced with a sequential number, starting from 1, and counting upwards, for every LEVEL in that des-file that has a such variable.\nAllows number characters between the <tt>'%'</tt> and <tt>'i'</tt> - those will be handled as per printf formatting.\n</p><p>For example:\n</p>\n<pre>LEVEL:\"bigrm-%i\"\n</pre>\n<h3><span class=\"mw-headline\" id=\"FLAGS\">FLAGS</span></h3>\n<pre>FLAGS:noteleport,mazelevel\n</pre>\n<p>Defines special flags for the whole level. Parameters are a comma-separated list of flags:\n</p>\n<ul><li><tt>noteleport</tt>: Player cannot teleport within the level.</li>\n<li><tt>sheol</tt>: Level is a <a href=\"/wiki/Sheol\" title=\"Sheol\">Sheol</a>-type level, with special rules.</li>\n<li><tt>hardfloor</tt>: The floor is too hard to dig.</li>\n<li><tt>nommap</tt>: <a href=\"/wiki/Magic_mapping\" title=\"Magic mapping\">magic mapping</a> does not work.</li>\n<li><tt>arboreal</tt>: supposedly an outdoor map. Solid walls and secret corridors will be shown as trees, digging makes floor instead of corridor and randomly created corridors are made out of floor instead of corridor.</li>\n<li><tt>shortsighted</tt>: Monsters cannot see you from far away.</li>\n<li><tt>noflipx</tt>, <tt>noflipy</tt> and <tt>noflip</tt> prevent the level from being flipped horizontally, vertically and both.</li>\n<li><tt>mazelevel</tt>: level is a \"maze\" type level. Digging a wall turns it into room floor and mimics prefer mimicing a statue.</li>\n<li><tt>premapped</tt>: The level map is automatically known by player (a la <a href=\"/wiki/Sokoban\" title=\"Sokoban\">Sokoban</a>).</li>\n<li><tt>shroud</tt>: Magic mapping doesn't reveal the map permanently.</li>\n<li><tt>stormy</tt>: Clouds randomly emit lightning bolts, a la <a href=\"/wiki/Plane_of_Air\" title=\"Plane of Air\">Plane of Air</a>.</li>\n<li><tt>graveyard</tt>: Reduced chances of undead corpses.</li>\n<li><tt>sky</tt>: Level is open to the sky, so has no ceiling.</li></ul>\n<h2><span class=\"mw-headline\" id=\"Level_statements\">Level statements</span></h2>\n<p>Level statements include the following commands, <a href=\"#variable\">variable</a> definitions, <a href=\"#FUNCTION\">FUNCTION</a> definitions, function calls, and <a href=\"#Flow_control\">Flow control</a> commands.\n</p>\n<h3><span class=\"mw-headline\" id=\"MESSAGE\">MESSAGE</span></h3>\n<pre>MESSAGE:\"string\"\n</pre>\n<p>The message string is shown when player first enters the level. Each message line gets separated with a <tt>--more--</tt> -prompt in the game.\n</p><p>Example:\n</p>\n<pre>MESSAGE: \"Well done, mortal!\"\n$foo = \"Hello, World!\"\nMESSAGE: $foo\n</pre>\n<h3><span class=\"mw-headline\" id=\"INIT_MAP\">INIT_MAP</span></h3>\n<pre>INIT_MAP:solidfill, terrain_type\nINIT_MAP:mazegrid,'-'\nINIT_MAP:sheollev\nINIT_MAP:rogue\nINIT_MAP:mines, '.' , ' ', true, true, random, true\n</pre>\n<p>Initializes the map with different algorithm.\n</p>\n<ul><li><tt>solidfill</tt>: Fills the level with the specified map character. Can also take a map character with light-state wrapped in parenthesis: <tt>('.', lit)</tt></li>\n<li><tt>mazegrid</tt>: Generates a grid of solid walls and the specified map characters. Use <a href=\"#MAZEWALK\">MAZEWALK</a> to carve a maze into it.</li>\n<li><tt>sheollev</tt>: Generates a Sheol level. No parameters.</li>\n<li><tt>rogue</tt>: Generates a <a href=\"/wiki/Rogue_level\" title=\"Rogue level\">Rogue level</a>. No parameters.</li>\n<li><tt>mines</tt>: Creates <a href=\"/wiki/Gnomish_Mines\" title=\"Gnomish Mines\">Gnomish Mines</a>-style levels. Takes several parameters: <tt>foreground, background, smoothed, joined, light_state, walled [, filling ]</tt>\n<ul><li><tt>foreground</tt>: The \"foreground\" fill <a href=\"#map_character\">map character</a>. This should be something the player can walk on, as the walkable part will be made out of this.</li>\n<li><tt>background</tt>: The \"background\" fill <a href=\"#map_character\">map character</a>. This will surround the foreground area, so can be solid or harmful to player.</li>\n<li><tt>smoothed</tt>: is either <tt>true</tt> or <tt>false</tt>, and denotes whether the level will be \"smoothed\". This means that any foreground character surrounded by fewer than 3 foreground characters is changed to background character.</li>\n<li><tt>joined</tt>: is either <tt>true</tt> or <tt>false</tt>, and denotes whether the level will be \"joined\", so that all parts are accessible by walking.</li>\n<li><tt>light_state</tt>: is either <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.</li>\n<li><tt>walled</tt>: is either <tt>true</tt> or <tt>false</tt>. This is equivalent of using a <a href=\"#WALLIFY\">WALLIFY</a> -command.</li>\n<li><tt>filling</tt>: optional <a href=\"#Map_characters\">fill map character</a>. The \"outside\" parts of the level will be filled with this.</li></ul></li></ul>\n<h3><span class=\"mw-headline\" id=\"ALTAR\">ALTAR</span></h3>\n<pre>ALTAR:<a href=\"#coord_or_variable\">coord or variable</a>, alignment, altartype\n</pre>\n<p>Create an altar.\n</p>\n<ul><li>alignment is one of <tt>law</tt>, <tt>noalign</tt>, <tt>neutral</tt>, <tt>chaos</tt>, <tt>coaligned</tt>, <tt>noncoaligned</tt>, <tt>align[0]</tt>, <tt>align[1]</tt>, <tt>align[2]</tt> or <tt>random</tt>.</li>\n<li>altartype is one of <tt>sanctum</tt> (with a <a href=\"/wiki/High_priest\" title=\"High priest\">high priest</a>), <tt>shrine</tt> (with an <a href=\"/wiki/Aligned_priest\" title=\"Aligned priest\">aligned priest</a>), <tt>altar</tt> or <tt>random</tt>.</li></ul>\n<p>Example:\n</p>\n<pre>ALTAR:(50,14),chaos,altar\n</pre>\n<h3><span class=\"mw-headline\" id=\"GRAVE\">GRAVE</span></h3>\n<pre>GRAVE:<a href=\"#coord_or_variable\">coord or variable</a>, \"Any epitaph message\"\nGRAVE:<a href=\"#coord_or_variable\">coord or variable</a>, random\nGRAVE:<a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<p>Creates a grave at given location, with a given epitaph, a random epitaph, or with no text.\n</p>\n<h3><span class=\"mw-headline\" id=\"MON_GENERATION\">MON_GENERATION</span></h3>\n<p>Change the monster generation chances for this level.\n</p>\n<pre>MON_GENERATION:75%, (9, 'a'), (1, \"fire giant\")\n</pre>\n<p>75% of randomly generated monsters are either ants (90% chance), or fire giants (10% chance).\n</p>\n<h3><span class=\"mw-headline\" id=\"SOUNDS\">SOUNDS</span></h3>\n<p>Random sounds on this level.\n</p>\n<pre>SOUNDS:200, (hear, \"falling rocks.\"), (pline, \"Kaboom!\"), (verbal, \"Mwahahah!\"), (feel, \"hot!\")\n</pre>\n<p>1/200 chance each turn to get one of the sounds defined. In this case, \"You hear falling rocks.\", \"Kaboom!\", \"Mwahahah!\", or \"You feel hot!\"\n</p>\n<h3><span class=\"mw-headline\" id=\"BRANCH\">BRANCH</span></h3>\n<pre>BRANCH:(x1,y1,x2,y2), (x3,y3,x4,y4)\nBRANCH:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4)\n</pre>\n<p>Places stairs or a magical portal to a dungeon branch within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4).\nIf the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined <a href=\"#MAP\">MAP</a>.\n</p><p>Example:\n</p>\n<pre>BRANCH:levregion(51,2,77,18),(0,0,40,20)\n</pre>\n<h3><span class=\"mw-headline\" id=\"CORRIDOR\">CORRIDOR</span></h3>\n<pre>CORRIDOR:(room_number, direction, door_position), (room_number, direction, door_position)\nCORRIDOR:(room_number, direction, door_position), any_integer\n</pre>\n<p>Create a corridor from room to another room. direction is one of <tt>north</tt>, <tt>south</tt>, <tt>west</tt>, or <tt>east</tt> and tells which wall the corridor starts from and ends to. door_position is an integer value and tells how far from the top left of the room the corridor starts/ends. any_integer is a room number. There must be a door (or at least a doorway) in the starting wall position.\n</p>\n<h3><span class=\"mw-headline\" id=\"SHUFFLE\">SHUFFLE</span></h3>\n<pre>SHUFFLE:any_array_variable\n</pre>\n<p>Shuffles the array elements. The predefined alignment array <tt>align</tt> is shuffled automatically at the start of the level code, and cannot be reshuffled.\n</p><p>Example:\n</p>\n<pre>$foo = monster:{ 'd', 'T', 'e', 'L' }\nSHUFFLE: $foo\n</pre>\n<h3><span class=\"mw-headline\" id=\"NON_DIGGABLE\">NON_DIGGABLE</span></h3>\n<pre>NON_DIGGABLE:region_or_variable\n</pre>\n<p>Sets the walls inside the region as non-diggable. \n</p><p>Example:\n</p>\n<pre>NON_DIGGABLE:(00,00,13,12)\n</pre>\n<h3><span class=\"mw-headline\" id=\"NON_PASSWALL\">NON_PASSWALL</span></h3>\n<pre>NON_PASSWALL:region_or_variable\n</pre>\n<p>Players and monsters cannot phase through the walls inside the region.\n</p><p>Example:\n</p>\n<pre>NON_PASSWALL:(00,00,13,12)\n</pre>\n<h3><span class=\"mw-headline\" id=\"ROOMDOOR\">ROOMDOOR</span></h3>\n<pre>ROOMDOOR:secret, door_state, door_wall, door_pos\n</pre>\n<p>Creates a door with certain state on the previously defined <a href=\"#ROOM\">ROOM</a> or <a href=\"#SUBROOM\">SUBROOM</a>.\n</p>\n<ul><li>secret can be one of <tt>true</tt>, <tt>false</tt>, or <tt>random</tt>.</li>\n<li>door_state can be one of <tt>open</tt>, <tt>closed</tt>, <tt>locked</tt>, <tt>nodoor</tt>, <tt>broken</tt>, <tt>secret</tt>, or <tt>random</tt>.</li>\n<li>door_wall can be one of <tt>north</tt>, <tt>south</tt>, <tt>west</tt>, or <tt>east</tt>, a pipe-delimited list of those, or <tt>random</tt>, and tells on what wall of the room the door will be created.</li>\n<li>door_pos is a positive integer value and tells how far from the top or left the door will be.</li></ul>\n<p>Example:\n</p>\n<pre>ROOMDOOR: false, closed, north|south, random\n</pre>\n<h3><span class=\"mw-headline\" id=\"DOOR\">DOOR</span></h3>\n<pre>DOOR:door_state, <a href=\"#selection\">selection</a>\n</pre>\n<p>Puts a door on the map.\n</p>\n<ul><li>door_state can be one of <tt>open</tt>, <tt>closed</tt>, <tt>locked</tt>, <tt>nodoor</tt>, <tt>broken</tt>, <tt>secret</tt>, or <tt>random</tt>.</li></ul>\n<h3><span class=\"mw-headline\" id=\"WALLWALK\">WALLWALK</span></h3>\n<pre>WALLWALK:<a href=\"#coord_or_variable\">coord or variable</a>, map character or variable\nWALLWALK:<a href=\"#coord_or_variable\">coord or variable</a>, map character or variable, 50%\nWALLWALK:<a href=\"#coord_or_variable\">coord or variable</a>, map character or variable, map character or variable\nWALLWALK:<a href=\"#coord_or_variable\">coord or variable</a>, map character or variable, map character or variable, 50%\n</pre>\n<h3><span class=\"mw-headline\" id=\"DRAWBRIDGE\">DRAWBRIDGE</span></h3>\n<pre>DRAWBRIDGE:<a href=\"#coord_or_variable\">coord or variable</a>, dir, state\n</pre>\n<ul><li><tt>dir</tt> is one of the following: <tt>north</tt>, <tt>east</tt>, <tt>south</tt> or <tt>west</tt></li>\n<li><tt>state</tt> is either <tt>closed</tt>, <tt>open</tt> or <tt>random</tt>.</li></ul>\n<p>Note that the drawbridge placement is different from door placement; the coordinates must be a place where the drawbridge would be when it's open, and from that place towards the direction there should be a wall, where the portcullis will be.\n</p><p>Example:\n</p>\n<pre>DRAWBRIDGE:(25,18), north, closed\n</pre>\n<h3><span class=\"mw-headline\" id=\"ENGRAVING\">ENGRAVING</span></h3>\n<pre>ENGRAVING:<a href=\"#coord_or_variable\">coord or variable</a>, engraving_type, \"string\"\nENGRAVING:<a href=\"#coord_or_variable\">coord or variable</a>, engraving_type, $stringvariable\n</pre>\n<p>Creates an engraving on the floor.\nengraving_type can be one of <tt>dust</tt>, <tt>engrave</tt>, <tt>burn</tt>, <tt>mark</tt>, <tt>blood</tt>, or <tt>random</tt>.\n</p><p>For example:\n</p>\n<pre>ENGRAVING:(12,03), engrave, \"You are now entering the Gnome King's wine cellar.\"\n</pre>\n<h3><span class=\"mw-headline\" id=\"FOUNTAIN\">FOUNTAIN</span></h3>\n<pre>FOUNTAIN:<a href=\"#selection\">selection</a>\n</pre>\n<p>Create a fountain at each pair of coordinates in the selection.\n</p>\n<h3><span class=\"mw-headline\" id=\"POOL\">POOL</span></h3>\n<pre>POOL:<a href=\"#selection\">selection</a>\n</pre>\n<p>Create a pool at each pair of coordinates in the selection.\n</p>\n<h3><span class=\"mw-headline\" id=\"SINK\">SINK</span></h3>\n<pre>SINK:<a href=\"#selection\">selection</a>\n</pre>\n<p>Create a sink at each pair of coordinates in the selection.\n</p>\n<h3><span class=\"mw-headline\" id=\"TERRAIN\">TERRAIN</span></h3>\n<pre>TERRAIN:<a href=\"#selection\">selection</a>, map_character_or_variable\n</pre>\n<p>Set the terrain at each pair of coordinates in the selection.\n</p><p>Example:\n</p>\n<pre>TERRAIN:random, 'L'\nTERRAIN:line(1,1)-(40,11), ('T', lit)\n</pre>\n<h3><span class=\"mw-headline\" id=\"REPLACE_TERRAIN\">REPLACE_TERRAIN</span></h3>\n<pre>REPLACE_TERRAIN:region_or_variable, map_character_or_variable, map_character_or_variable, percentage\n</pre>\n<p>Replace percentage amount of the first terrain in the region to the second terrain.\n</p><p>For example, replace 25% of '.' in the area with 'L':\n</p>\n<pre>REPLACE_TERRAIN:(1,1,50,20), '.', 'L', 25%\n</pre>\n<h3><span class=\"mw-headline\" id=\"SPILL\">SPILL</span></h3>\n<pre>SPILL:<a href=\"#coord_or_variable\">coord or variable</a>, terrain_type, direction, length\n</pre>\n<p>Create random \"pool-like\" globs of terrain, starting from coordinates, generally moving towards direction, and at a maximum of length positions.\nCoordinates, terrain_type and length can be variables of the appropriate type.\n</p><p>For example:\n</p>\n<pre>SPILL: random, 'L', north, 20\nSPILL: random, ('.', lit), north, 10\n</pre>\n<h3><span class=\"mw-headline\" id=\"PORTAL\">PORTAL</span></h3>\n<pre>PORTAL:(x1,y1,x2,y2), (x3,y3,x4,y4), \"levelname\"\nPORTAL:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4), \"levelname\"\n</pre>\n<p>Places a magical portal within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4). The portal will level teleport player to the level with the name \"levelname\".\nIf the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined <a href=\"#MAP\">MAP</a>.\n</p><p>Example:\n</p>\n<pre>PORTAL:levregion(57,01,78,19),(0,0,0,0),\"fire\"\nPORTAL:(0,0,75,19),(65,13,75,19),\"air\"\n</pre>\n<h3><span class=\"mw-headline\" id=\"RANDOM_CORRIDORS\">RANDOM_CORRIDORS</span></h3>\n<pre>RANDOM_CORRIDORS\nRANDOM_CORRIDORS:style\n</pre>\n<p>Create random corridors joining the rooms.\n</p><p>style is <tt>random</tt>, or one of the following values:\n</p>\n<ul><li>1 = at least one corridor leaves from each room and goes to random room</li>\n<li>2 = circular path: room1 -&gt; room2 -&gt; room3 -&gt; ... -&gt; room1</li>\n<li>3 = all roads lead to rome. or to the first room.</li>\n<li>any other value (or leaving style off) will generate normal style corridors.</li></ul>\n<h3><span class=\"mw-headline\" id=\"MINERALIZE\">MINERALIZE</span></h3>\n<pre>MINERALIZE\nMINERALIZE: kelp_pool, kelp_moat, gold_prob, gem_prob\n</pre>\n<p>Puts kelp in pools and moats, and gold and gems in solid walls.\nWithout parameters uses the same chances as normal Dungeons of Doom mineralize.\n</p>\n<ul><li><tt>kelp_pool</tt> and <tt>kelp_moat</tt> are integer values and is the 1-in-n chances of a pool or a moat having kelp in it. Using -1 or below uses the default chances.</li>\n<li><tt>gold_prob</tt> and <tt>gem_prob</tt> are integer values and is the n/1000 chances of a diggable solid wall containing gold and gems. Using -1 or below uses the default chances.</li></ul>\n<p>Example:\n</p>\n<pre>MINERALIZE:0,0,0,1000  # Put gems in every solid wall\n</pre>\n<h3><span class=\"mw-headline\" id=\"REGION\">REGION</span></h3>\n<pre>REGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined]\nREGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined] { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Define a region on the map with certain light-state and type. This allows defining irregularly-shaped rooms. See also <a href=\"#ROOM\">ROOM</a> and <a href=\"#SUBROOM\">SUBROOM</a>. <a href=\"#BREAK\">BREAK</a> is allowed within the level statements.\n</p>\n<ul><li>lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.</li>\n<li>roomtype is either <tt>random</tt>, or one of the <a href=\"#Room_types\">special room names</a>, eg. <tt>\"morgue\"</tt></li>\n<li>filled is optional, either <tt>filled</tt> or <tt>unfilled</tt>, and tells whether the room should get stocked with random stuff.</li>\n<li>irregular is optional, either <tt>irregular</tt> or <tt>regular</tt> and tells whether the room is irregularly shaped. If the room is irregular, only the first pair of coordinates defining the region must be inside the room, and the room must be closed off from other areas with non-floor <a href=\"#map_characters\">map characters</a>. Use the boundary symbol <tt>'B'</tt> in the <a href=\"#MAP\">MAP</a> to enclose an irregular room; it will be converted to floor symbol <tt>'.'</tt> after the level has been created.</li>\n<li>joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the region.</li></ul>\n<p>Example:\n</p>\n<pre>REGION:(01,04,09,05),lit,\"barracks\"\n</pre>\n<h3><span class=\"mw-headline\" id=\"ROOM\">ROOM</span></h3>\n<pre>ROOM:roomtype, [ chance, ] lightstate, pos, align, size [, filled] [, joined] { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Creates a room, with walls and floor. The room will be placed on a position defined both by pos and align. pos defines the rough position (in a 5-by-5 grid on the screen), and align defines the room position within that. <a href=\"#BREAK\">BREAK</a> is allowed within the level statements.\n</p><p>NOTE: Creation of a randomly located room may fail, especially if there's little free space to fit it on the level. The level statements of a failed room won't be executed.\n</p>\n<ul><li>roomtype is either <tt>random</tt>, or one of the <a href=\"#Room_types\">special room names</a>, eg. <tt>\"morgue\"</tt></li>\n<li>chance is optional percentage of the room being the special room; otherwise the room is ordinary.</li>\n<li>lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.</li>\n<li>pos can be either <tt>random</tt> or an approximate location in the form of <tt>(1,3)</tt> - this is not an absolute position, but an approximate position on the map - the number ranges are 1..5</li>\n<li>align is either <tt>random</tt> or an approximate adjustment to the location in the form of <tt>(horiz, vert)</tt>, where\n<ul><li>horiz is one of <tt>left</tt>, <tt>half-left</tt>, <tt>center</tt>, <tt>half-right</tt>, or <tt>right</tt>.</li>\n<li>vert is one of <tt>top</tt>, <tt>center</tt>, or <tt>bottom</tt>.</li></ul></li>\n<li>size is either <tt>random</tt> or an exact width and height in the form of <tt>(3,5)</tt>.</li>\n<li>filled is an optional <tt>filled</tt> or <tt>unfilled</tt>. <tt>unfilled</tt> means the room should get stocked with random stuff.</li>\n<li>joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the room.</li></ul>\n<p>The contents (and SUBROOMs) of the room can be defined using the level statements.\n</p><p>See also <a href=\"#SUBROOM\">SUBROOM</a> and <a href=\"#REGION\">REGION</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"SUBROOM\">SUBROOM</span></h3>\n<pre>SUBROOM:\"roomtype\", [ chance, ] lightstate, position, size [, filled] [, joined] { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Creates a room within a <a href=\"#ROOM\">ROOM</a>, with walls and floor. <a href=\"#BREAK\">BREAK</a> is allowed within the level statements block.\n</p>\n<ul><li>roomtype is either <tt>random</tt>, or one of the <a href=\"#Room_types\">special room names</a>, eg. <tt>\"morgue\"</tt></li>\n<li>chance is optional percentage of the room being the special room; otherwise the room is ordinary.</li>\n<li>lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.</li>\n<li>position is either <tt>random</tt>, or an exact position of the room inside the outer room in the form of <tt>(4,3)</tt>.</li>\n<li>size is either <tt>random</tt> or an exact width and height in the form of <tt>(3,5)</tt>.</li>\n<li>filled is an optional <tt>filled</tt> or <tt>unfilled</tt>. <tt>unfilled</tt> means the room should get stocked with random stuff.</li>\n<li>joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the room.</li></ul>\n<p>The contents (and SUBROOMs) of the room can be defined using the level statements.\n</p><p>See also <a href=\"#ROOM\">ROOM</a> and <a href=\"#REGION\">REGION</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"GOLD\">GOLD</span></h3>\n<pre>GOLD:<a href=\"#mathematical_expression\">mathematical expression</a>, <a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<p>Create a pile of gold.\n</p><p>Example:\n</p>\n<pre>GOLD: 400 + 10d100, (01,05)\n</pre>\n<h3><span class=\"mw-headline\" id=\"LADDER\">LADDER</span></h3>\n<pre>LADDER:<a href=\"#coord_or_variable\">coord or variable</a>, direction\n</pre>\n<p>Creates a ladder.\ndirection is one of <tt>up</tt> or <tt>down</tt>.\n</p>\n<h3><span class=\"mw-headline\" id=\"STAIR\">STAIR</span></h3>\n<pre>STAIR:<a href=\"#coord_or_variable\">coord or variable</a>, direction\n</pre>\n<p>Creates stairs.\ndirection is one of <tt>up</tt> or <tt>down</tt>.\n</p>\n<h3><span class=\"mw-headline\" id=\"TELEPORT_REGION\">TELEPORT_REGION</span></h3>\n<pre>TELEPORT_REGION:(x1,y1,x2,y2), (x3,y3,x4,y4) [, up_or_down ]\n</pre>\n<p>Restricts the area where player can end up on the level when he <a href=\"/wiki/Level_teleport\" title=\"Level teleport\">level teleports</a> or falls in there. Player will end up within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4).\nIf the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined <a href=\"#MAP\">MAP</a>.\nYou can also add an optional direction parameter, either <tt>up</tt> or <tt>down</tt>, which will tell when this rule is applied; when player is coming from below or above.\n</p><p>Example:\n</p>\n<pre>TELEPORT_REGION:(69,16,69,16),(0,0,0,0)\nTELEPORT_REGION:levregion(56,00,79,20),levregion(01,00,55,20),down\n</pre>\n<h3><span class=\"mw-headline\" id=\"TRAP\">TRAP</span></h3>\n<pre>TRAP:\"<a href=\"#Trap_names\">falling rock</a>\", <a href=\"#coord_or_variable\">coord or variable</a>\nTRAP:random, <a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<p>Create a trap at the given location.\n</p>\n<h3><span class=\"mw-headline\" id=\"WALLIFY\">WALLIFY</span></h3>\n<pre>WALLIFY\nWALLIFY:selection\n</pre>\n<p>Turns walls (in the whole map, or in the defined <a href=\"#selection\">selection</a>) completely surrounded by other walls into solid stone <tt>' '</tt>.\n</p><p>Example:\n</p>\n<pre>WALLIFY:fillrect(5,5, 40,15)\n</pre>\n<h3><span class=\"mw-headline\" id=\"NOMAP\">NOMAP</span></h3>\n<pre>NOMAP\n</pre>\n<p>Instead of <a href=\"#GEOMETRY\">GEOMETRY</a> and <a href=\"#MAP\">MAP</a>, you use this if you think that <a href=\"#INIT_MAP\">INIT_MAP</a> creates a good enough random map and you don't want to use any fixed map-parts.\n</p><p>See also <a href=\"#MAP\">MAP</a>\n</p>\n<h3><span class=\"mw-headline\" id=\"GEOMETRY\">GEOMETRY</span></h3>\n<p>This must be immediately followed by a <a href=\"#MAP\">MAP</a> definition. It tells the location of the MAP-part on the level.\nTwo types of GEOMETRY, one takes an approximation of MAP alignment, the other takes an exact coordinate or variable.\n</p>\n<pre>GEOMETRY:horiz,vert\nGEOMETRY:<a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<ul><li>horiz is one of <tt>left</tt>, <tt>half-left</tt>, <tt>center</tt>, <tt>half-right</tt>, or <tt>right</tt>.</li>\n<li>vert is one of <tt>top</tt>, <tt>center</tt>, or <tt>bottom</tt>.</li></ul>\n<p>Both types take an optional boolean value. If it's true, the commands following the map are restricted into that map.\n</p>\n<pre>GEOMETRY:center,center,true\n</pre>\n<h3><span class=\"mw-headline\" id=\"MAP\">MAP</span></h3>\n<p><span id=\"ENDMAP\"></span>\n</p>\n<pre>MAP\n...\n...\n...\nENDMAP\n</pre>\n<p>This must be immediately preceded by a <a href=\"#GEOMETRY\">GEOMETRY</a> definition.\nYou define a map-part by \"drawing\" with <a href=\"#Map_characters\">map characters</a> between the MAP and ENDMAP. The map can be up to 21 lines high and each line can be up to 76 chars long. Each line must also be the same length. You can also use numbers inside the map, but those will be ignored; they're considered as line numbers.\n</p><p>The top left point of the MAP is represented by the coordinates (0,0).\n</p><p>See also <a href=\"#NOMAP\">NOMAP</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"MAZEWALK\">MAZEWALK</span></h3>\n<pre>MAZEWALK:<a href=\"#coord_or_variable\">coord or variable</a>, direction\nMAZEWALK:<a href=\"#coord_or_variable\">coord or variable</a>, direction, stocked\nMAZEWALK:<a href=\"#coord_or_variable\">coord or variable</a>, direction, stocked, '.'\n</pre>\n<p>Creates a random maze, starting from the coordinates.\n</p><p>stocked is an optional boolean value and tells whether the maze should get stocked with random loot and monsters.\nThe optional map character is used to \"draw\" the maze.\n</p><p>Mazewalk turns map grids with solid stone (<tt>' '</tt>) into floor (<tt>'.'</tt>), or the given map character. From the starting position, it checks the mapgrid in the direction given, and if it's solid stone, it will move there, and turn that place into floor. Then it will choose a random direction, jump over the nearest mapgrid in that direction, and check the next mapgrid for solid stone. If there is solid stone, mazewalk will move that direction, changing that place and the intervening mapgrid to floor. Normally the generated maze will not have any loops.\nFor example\n</p>\n<pre>MAP\nTTTTTTT\nT T T T\nTTTTTTT\nT T T T\nTTTTTTT\nENDMAP\n</pre>\n<p>Pointing mazewalk at that will create a small maze of trees, but unless the map (at the place where it's put into the level) is surrounded by something else than solid stone, mazewalk will get out of that MAP.  Substituting floor characters for some of the trees \"in the maze\" will make loops in the maze, which are not otherwise possible. Substituting floor characters for some of the trees at the edges of the map will make maze entrances and exits at those places.\n</p><p>If the total area NOT covered by all maze-parts in the level is greater than 1/10 of the total area of the level, then the mazes in the level will get stocked with maze-specific stuff, such as <a href=\"/wiki/Minotaur\" title=\"Minotaur\">minotaurs</a>, traps and items, proportionally to the amount of space not covered by MAPs.\n</p><p>Mazewalk will only work if the solid stone mapgrids in the level (where the MAP was put down) are on odd-numbered squares, both horizontally and vertically. You don't have to worry about this unless your MAP is 21 rows high or 76 columns wide, in which case you'll have to either make the MAP smaller, or move the places where the solid stone squares are.\n</p><p>Also, MAZEWALK will fail in certain types of MAP-parts if you use <a href=\"#WALLIFY\">WALLIFY</a> before MAZEWALK.\n</p><p>Example:\n</p>\n<pre>MAZEWALK:(00,06),west\n</pre>\n<h3><span class=\"mw-headline\" id=\"MONSTER\">MONSTER</span></h3>\n<pre>MONSTER:'d', <a href=\"#coord_or_variable\">coord or variable</a>\nMONSTER:\"hill giant\", <a href=\"#coord_or_variable\">coord or variable</a>\nMONSTER:('i', \"imp\"), <a href=\"#coord_or_variable\">coord or variable</a>\nMONSTER:random, <a href=\"#coord_or_variable\">coord or variable</a>\n$foo = monster:'d'\nMONSTER:$foo, (5,5)\n$arr = monster:{ 'd', 'T', 'y' }\nMONSTER:$arr[0], (5,5)\n</pre>\n<p>The monster definition can also take a number of optional parameters, separated by commas:\n</p>\n<pre>MONSTER:'d', (4,4), \"Idefix\", peaceful, asleep, law, m_feature \"boulder\", female, invisible, cancelled, revived, avenge, stunned, confused, fleeing: 40, blinded: 20, paralyzed: 10, seen_traps: all\n</pre>\n<ul><li>\"Idefix\" is the name of the monster.</li>\n<li>Instead of <tt>peaceful</tt>, could use <tt>hostile</tt>.</li>\n<li>Instead of <tt>asleep</tt>, could use <tt>awake</tt>.</li>\n<li>Instead of <tt>law</tt>, could use <tt>noalign</tt>, <tt>neutral</tt>, <tt>chaos</tt>, <tt>coaligned</tt>, <tt>noncoaligned</tt>, <tt>align[0]</tt>, <tt>align[1]</tt>, <tt>align[2]</tt> or <tt>align:random</tt>.</li>\n<li><tt>m_feature</tt> tells the monster to mimic a dungeon feature, a boulder in this case. could also use <tt>m_monster</tt> or <tt>m_object</tt>.</li>\n<li><tt>female</tt>, <tt>invisible</tt>, <tt>cancelled</tt>, <tt>revived</tt>, <tt>avenge</tt>, <tt>stunned</tt> and <tt>confused</tt> set monster status bits.</li>\n<li><tt>fleeing</tt>, <tt>blinded</tt> and <tt>paralyzed</tt> set the number of turns the monster will flee, is blinded or is paralyzed, respectively. Parameter is an integer value in the range of 0-127.</li>\n<li><tt>seen_traps</tt> tells which traps the monster has seen; parameter is either <tt>all</tt> or quoted strings of trap names separated by pipe characters (eg. <tt>\"falling boulder\"</tt>, or <tt>\"arrow\"|\"dart\"|\"bear\"</tt>)</li></ul>\n<h3><span class=\"mw-headline\" id=\"OBJECT\">OBJECT</span></h3>\n<pre>OBJECT:\"elven cloak\", (5,5)\nOBJECT:'?', (5,5)\nOBJECT:('/', \"wishing\"), (5,5)\nOBJECT:random, (5,5)\n$foo = object:'/'\nOBJECT:$foo, (5,5)\n$arr = object:{ '/', '?', '!' }\nOBJECT:$arr[2], (5,5)\n</pre>\n<p>The object definition can also take a number of optional parameters, separated by commas:\n</p>\n<pre>OBJECT:'?', (5,5), blessed, montype:('d', \"little dog\"), +4, name:\"foobar\", quantity: 20, buried, invisible, lit, greased, locked, trapped, eroded:2, erodeproof, recharged:3\n</pre>\n<ul><li><tt>blessed</tt> can be replaced with <tt>uncursed</tt> or <tt>cursed</tt>.</li>\n<li><tt>montype</tt> tells eg. what monster statue it is.</li>\n<li>any integer value sets the plusses or minuses for eg. armor or weapon.</li>\n<li><tt>name</tt> gives the item a name. can also take a variable of string type as a parameter.</li>\n<li><tt>quantity</tt> set the number of items.</li>\n<li><tt>buried</tt>, <tt>trapped</tt>, <tt>invisible</tt>, <tt>greased</tt> set object states.</li>\n<li><tt>lit</tt> or <tt>unlit</tt> for lamps.</li>\n<li><tt>eroded</tt> sets the erosion. Don't use with <tt>erodeproof</tt>.</li>\n<li><tt>locked</tt> (or <tt>broken</tt>) set the lock state for lockable objects.</li>\n<li><tt>recharged</tt> sets the number of times eg. a wand has been recharged.</li></ul>\n<h3><span class=\"mw-headline\" id=\"CONTAINER\">CONTAINER</span></h3>\n<pre>CONTAINER:\"large chest\", (5,5) { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Takes the same parameters as <a href=\"#OBJECT\">OBJECT</a>, but allows defining the contents inside the curly braces.\nFor the contents, use a subset of level statements: OBJECTs, CONTAINERs and flow control commands; anything else causes undefined behaviour.\n</p>\n<h2><span class=\"mw-headline\" id=\"Flow_control\">Flow control</span></h2>\n<p>The following commands affect the order in which commands are executed.\n</p>\n<h3><span class=\"mw-headline\" id=\"SWITCH\">SWITCH</span></h3>\n<p><span id=\"CASE\"></span><span id=\"DEFAULT\"></span>\n</p>\n<pre>SWITCH [ integer_or_variable ] {\n  CASE integer:\n     <a href=\"#Level_statements\">Level statements</a>\n  DEFAULT:\n     <a href=\"#Level_statements\">Level statements</a>\n} \n</pre>\n<p>The SWITCH behaviour is modeled after the C switch-statement.\nUsing the <a href=\"#BREAK\">BREAK</a> keyword is allowed; without it the execution falls through to the next case.\n</p><p>If the integer value in the switch is a static number, it is automatically wrapped in rnd(). If a dice-notation or a variable is used, then the value is used as-is. For example the statements below are functionally the same:\n</p>\n<pre>SWITCH [ 3 ] { ... }\nSWITCH [ rnd(3) ] { ... }\nSWITCH [ 1d3 - 1 ] { ... }\n</pre>\n<h3><span class=\"mw-headline\" id=\"FOR\">FOR</span></h3>\n<pre>FOR $x = math_expr TO math_expr { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Executes the level statements as many times as it takes to increase (or decrease) the variable from the first integer value to the second. <a href=\"#BREAK\">BREAK</a> is allowed within the loop.\n</p><p>Example:\n</p>\n<pre>FOR $x = 2 TO 40 {\n  FOR $y = 2+1 TO 2*10 {\n    OBJECT:random, coord($x, $y)\n  }\n}\n</pre>\n<h3><span class=\"mw-headline\" id=\"LOOP\">LOOP</span></h3>\n<pre>LOOP [ integer_or_variable ] { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Executes the level statements as many times (but at least once) as the value inside square brackets says. If an integer variable is used, the value of the variable does not change. <a href=\"#BREAK\">BREAK</a> is allowed within the loop.\n</p><p>Example:\n</p>\n<pre>LOOP [ 10 ] { OBJECT:random,random }\n</pre>\n<h3><span class=\"mw-headline\" id=\"IF\">IF</span></h3>\n<p><span id=\"ELSE\"></span>\n</p>\n<pre>IF [ percentage ] { <a href=\"#Level_statements\">Level statements</a> }\nIF [ math_expression_or_variable compare_operator math_expression_or_variable ] { <a href=\"#Level_statements\">Level statements</a> }\nIF [ math_expression_or_variable ] { <a href=\"#Level_statements\">Level statements</a> }\n</pre>\n<p>Execute the level statements, but only if matching some condition. You can also add an optional <tt>ELSE { <a href=\"#Level_statements\">Level statements</a> }</tt> block.\nIn the third form the statements will be executed if the math expression or variable is non-zero. Using <a href=\"#BREAK\">BREAK</a> is not allowed within the statements, unless the IF-block is inside a command where BREAK is allowed. In that case the BREAK will make the execution jump to the end of the containing command.\n</p><p>There's also a degenerate case <tt>[50%]: one_level_statement</tt>.\n</p><p>For example:\n</p>\n<pre>IF [ 25% ] { <a href=\"#Level_statements\">Level statements</a> }\nIF [ 25% ] { <a href=\"#Level_statements\">Level statements</a> } ELSE { <a href=\"#Level_statements\">Level statements</a> }\nIF [ 2*2 == 4 ] { <a href=\"#Level_statements\">Level statements</a> }\nIF [ 0 ] { <a href=\"#Level_statements\">Level statements</a> }\n[50%]: MONSTER: random, random\n</pre>\n<h3><span class=\"mw-headline\" id=\"EXIT\">EXIT</span></h3>\n<pre>EXIT\n</pre>\n<p>Immediately finishes the level script.\n</p>\n<h3><span class=\"mw-headline\" id=\"BREAK\">BREAK</span></h3>\n<pre>BREAK\n</pre>\n<p>The BREAK keyword will make the script skip the rest of the statement block. Breaks can be used within <a href=\"#LOOP\">LOOPs</a>, <a href=\"#FOR\">FOR</a>-loops, <a href=\"#SWITCH\">SWITCHes</a>,\n<a href=\"#ROOM\">ROOM</a> and <a href=\"#SUBROOM\">SUBROOM</a> contents, <a href=\"#CONTAINER\">CONTAINER</a> contents, <a href=\"#MONSTER\">MONSTER</a> inventories, and <a href=\"#REGION\">REGION</a> contents.\n</p><p>Example:\n</p>\n<pre>FOR $x = 5 TO 60 {\n OBJECT:'$',coord($x,10)\n IF [ $x &gt; 30 ] { BREAK }\n}\n</pre>\n<h2><span class=\"mw-headline\" id=\"Variables_and_Types\">Variables and Types</span></h2>\n<h3><span class=\"mw-headline\" id=\"variable\">variable</span></h3>\n<p>Variable names start with a dollar sign, and can contain any alphanumeric characters. Variables must be defined before they can be used.\nSome variable definitions must have the variable type: <tt>terrain</tt>, <tt>monster</tt>, <tt>object</tt> and <tt><a href=\"#selection\">selection</a></tt>.\n</p>\n<pre>$foo = 123\n$foo = \"any string\"\n$foo = <a href=\"#mathematical_expression\">mathematical expression</a>\n$bar = $foo\n$foo = terrain:'T'\n$foo = terrain:('.', lit)\n$foo = monster:'d'\n$foo = monster:\"little dog\"\n$foo = monster:('d', \"little dog\")\n$foo = monster:random\n$foo = object:'/'\n$foo = object:\"elven cloak\"\n$foo = object:('?', \"identify\")\n$foo = (40, 12)\n$foo = (5,5, 40,12)\n$foo = selection:<a href=\"#selection\">selection</a>\n</pre>\n<h3><span class=\"mw-headline\" id=\"array_variable\">array variable</span></h3>\n<pre>$foo = { 1, 2, 3, 4, 5 }\n$foo = { \"string a\", \"bcdef\", \"and something\" }\n$foo = { (1,2), (40,12) }\n$foo = { (5,5,40,12), (1,1,20,18), (40,10,50,12) }\n$foo = terrain: { 'T', 'L', ('.', unlit) }\n$foo = monster: { 'n', \"newt\", ('d', \"little dog\") }\n$foo = object: { '/', \"elven cloak\", ('?', \"identify\") }\n</pre>\n<p>To access one element of an array variable, use eg. <tt>$foo[0]</tt> to access variable $foo's first element.\n</p><p>Array length can be accessed with the <tt>.length</tt> method:\n</p>\n<pre>$foo = { 1, 2, 4 }\nMESSAGE: \"length is \" . string($foo.length)\n</pre>\n<h3><span class=\"mw-headline\" id=\"coord_or_variable\">coord or variable</span></h3>\n<p>This parameter can be either a pair of coordinates, or a variable of the type coord. For example: \n</p>\n<pre>GRAVE: (10,5)\n$foo = (4,10)\n$bar = { (4,10), (3,12), (50,2) }\nGRAVE: $foo\nGRAVE: $bar[1]\n</pre>\n<pre>GRAVE: rndcoord(<a href=\"#selection\">selection</a>)\n</pre>\n<p>A random pair of coordinates selected from within the <a href=\"#selection\">selection</a>\n</p><p>The x and y coordinates can be accessed (but not set) separately:\n</p>\n<pre>$foo = (4, 10)\nIF [ $foo.x == 4 ] {\n  MESSAGE: \" y = \" . string($foo.y)\n}\n</pre>\n<h3><span class=\"mw-headline\" id=\"strings\">strings</span></h3>\n<pre>$foo = \"This is a string\"\nMESSAGE: $foo . \" and another\"\n</pre>\n<p>Strings are any characters surrounded by double quotes. Strings can be concatenated with full stop. If you wish to concatenate an integer value, it must be first converted to string with the <a href=\"#Predefined_functions_and_constants\"><tt>string()</tt> function</a>.\n</p>\n<h3><span class=\"mw-headline\" id=\"region_or_variable\">region or variable</span></h3>\n<p>This parameter can be either a region, or a variable of the region type. For example:\n</p>\n<pre>NON_DIGGABLE:(5,5, 40,12)\n$foo = (5,5, 40,12)\nNON_DIGGABLE:$foo\n</pre>\n<h3><span class=\"mw-headline\" id=\"map_character_or_variable\">map character or variable</span></h3>\n<p>This parameter can be either a <a href=\"#Map_characters\">map character</a>, a map character and lightstate combination, or a variable of terrain type:\n</p>\n<pre>TERRAIN:(5,5), 'L'\nTERRAIN:(6,6), ('.', unlit)\n$lava = terrain:'L'\nTERRAIN:(7,7), $lava\n$floor = terrain:('.', lit)\nTERRAIN:(8,8), $floor\n</pre>\n<h3><span class=\"mw-headline\" id=\"mathematical_expression\">mathematical expression</span></h3>\n<p>A mathematical expression can consist of plain integer values, <a href=\"/wiki/D-notation\" class=\"mw-redirect\" title=\"D-notation\">D-notations</a>, variables of integer type, and the operands '+', '-', '*', '/', and '%'. For example: <tt>1 + 2</tt>, or <tt>3d6 * (2 + 3)</tt>.\nNegative integer values should be enclosed inside parenthesis: <tt>(-1) * (-3)</tt>\n</p>\n<h3><span class=\"mw-headline\" id=\"selection\">selection</span></h3>\n<p>A selection is a collection of points, represented by map coordinates. The <tt>selection</tt> keyword is only needed when defining a variable of selection type.\n</p><p>Selections can be added together with the '&amp;' operator, for example <tt>rect(5,5, 50,18) &amp; rect(10,2, 40,13)</tt>:\n</p>\n<pre>$foo = selection:rect(5,5, 50,18) &amp; rect(10,2, 40,13)\n</pre>\n<h4><span class=\"mw-headline\" id=\"coordinate\">coordinate</span></h4>\n<pre>$foo = selection:<a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<p>The selection contains a single point on the map.\n</p><p>Example:\n</p>\n<pre>$foo = selection:(55,12)\n$bar = (4,10)\n$baz = selection:$bar\n</pre>\n<h4><span class=\"mw-headline\" id=\"rectangle\">rectangle</span></h4>\n<pre>$foo = selection:rect <a href=\"#region_or_variable\">region or variable</a>\n</pre>\n<p>The selection includes the border of the rectangle.\n</p><p>Example:\n</p>\n<pre>$foo = selection: rect(5,3, 72,18)\n</pre>\n<h4><span class=\"mw-headline\" id=\"filled_rectangle\">filled rectangle</span></h4>\n<pre>$foo = selection:fillrect <a href=\"#region_or_variable\">region or variable</a>\n</pre>\n<p>The selection contains a rectangular area.\n</p><p>Example:\n</p>\n<pre>$foo = selection: fillrect(5,3, 72,18)\n</pre>\n<h4><span class=\"mw-headline\" id=\"line\">line</span></h4>\n<pre>$foo = selection:line <a href=\"#coord_or_variable\">coord or variable</a>-<a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<p>The selection contains a straight line between the points.\n</p><p>Example:\n</p>\n<pre>$foo = selection: line(1,1)-(76,21)\n</pre>\n<h4><span class=\"mw-headline\" id=\"random_line\">random line</span></h4>\n<pre>$foo = selection:randline <a href=\"#coord_or_variable\">coord or variable</a>-<a href=\"#coord_or_variable\">coord or variable</a>,<a href=\"#mathematical_expression\">mathematical expression</a>\n</pre>\n<p>The selection contains a meandering line between the points. The integer value is the \"roughness\" of the line.\n</p><p>Example:\n</p>\n<pre>$foo = selection: randline(1,1)-(76,21), 4\n</pre>\n<h4><span class=\"mw-headline\" id=\"grow\">grow</span></h4>\n<pre>$foo = selection:grow (<a href=\"#selection\">selection</a>)\n$foo = selection:grow (<a href=\"#list_of_directions\">list of directions</a>, <a href=\"#selection\">selection</a>)\n</pre>\n<p>Grow a selection by adding the surrounding map points to it. The second form can take a list of directions, and the growth will pick points from those directions to grow into.\n</p><p>Example:\n</p>\n<pre>$foo = selection:grow(line(1,1)-(76,21))\n$bar = selection:grow(north|south, rect(5,3, 72,18))\n</pre>\n<h4><span class=\"mw-headline\" id=\"filter\">filter</span></h4>\n<pre>$foo = selection:filter (50%, <a href=\"#selection\">selection</a>)\n$foo = selection:filter (<a href=\"#selection\">selection</a>, <a href=\"#selection\">selection</a>)\n$foo = selection:filter (<a href=\"#map_character_or_variable\">map character or variable</a>, <a href=\"#selection\">selection</a>)\n</pre>\n<p>Remove points from the selection. The first form picks (at random) 50% of the points in the selection, the second chooses points that are common to both selections, third one leaves only places that match the map character.\n</p><p>Example:\n</p>\n<pre>$foo = selection: filter(20%, fillrect(5,3, 72,18))\n$foo = selection: filter('L', fillrect(1,1, 76,21))\n</pre>\n<h4><span class=\"mw-headline\" id=\"floodfill\">floodfill</span></h4>\n<pre>$foo = selection:floodfill <a href=\"#coord_or_variable\">coord or variable</a>\n</pre>\n<p>\"Floodfill\" from the point, adding all connected points with the same terrain type to the selection.\n</p>\n<h4><span class=\"mw-headline\" id=\"circle\">circle</span></h4>\n<pre>$foo = selection:circle (<a href=\"#coord_or_variable\">coord or variable</a>, <a href=\"#mathematical_expression\">mathematical expression</a>)\n$foo = selection:circle (<a href=\"#coord_or_variable\">coord or variable</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, filled)\n$foo = selection:circle (<a href=\"#coord_or_variable\">coord or variable</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, unfilled)\n</pre>\n<p>Circle shape. Parameters are center point, radius, and optional <tt>filled</tt> or <tt>unfilled</tt>.\nCreates an unfilled circle by default.\n</p><p>For example:\n</p>\n<pre>$foo = selection: circle((5,10), 3) &amp;\n                  circle((15,10), 3, unfilled) &amp;\n                  circle((25,10), 3, filled)\nTERRAIN:$foo, 'L'\n</pre>\n<h4><span class=\"mw-headline\" id=\"ellipse\">ellipse</span></h4>\n<pre>$foo = selection:ellipse (<a href=\"#coord_or_variable\">coord or variable</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, <a href=\"#mathematical_expression\">mathematical expression</a>)\n$foo = selection:ellipse (<a href=\"#coord_or_variable\">coord or variable</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, filled)\n$foo = selection:ellipse (<a href=\"#coord_or_variable\">coord or variable</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, <a href=\"#mathematical_expression\">mathematical expression</a>, unfilled)\n</pre>\n<p>Ellipse shape. Parameters are center point, horizontal and vertical radius, and optional <tt>filled</tt> or <tt>unfilled</tt>.\nCreates an unfilled ellipse by default.\n</p><p>For example:\n</p>\n<pre>$foo = selection: ellipse((35,10), 3,5) &amp;\n                  ellipse((45,10), 3,5, unfilled) &amp;\n                  ellipse((55,10), 3,5, filled)\nTERRAIN:$foo, 'L'\n</pre>\n<h4><span class=\"mw-headline\" id=\"gradient\">gradient</span></h4>\n<pre>$foo = selection: gradient(grad_type, (min_dist - max_dist [, limited]), coord [, coord2 ])\n</pre>\n<p>Selects random points with distance from coord between min_dist and max_dist, with higher probability closer to max_dist.\nNo points closer than min_dist will be included. All points at max_dist will be included.\nUsing the optional \"limited\" will make the selection stop at max_dist.\nLeaving the \"limited\" out, or using \"unlimited\", will select all points outside the max_dist radius.\n</p><p>grad_type can be one of \"radial\" or \"square\", and affects the distance calculation from the center.\n</p><p>If the optional second pair of coordinates is given, the \"center\" of the area is a line segment between the two pairs of coordinates.\n</p><p>For example:\n</p>\n<pre>$r = selection: gradient(radial, (1 - 9, limited), (11,10))\nTERRAIN:$r,'L'\n</pre>\n<h4><span class=\"mw-headline\" id=\"complement\">complement</span></h4>\n<pre>$foo = selection: complement(<a href=\"#selection\">selection</a>)\n</pre>\n<p>Returns a bitwise not, or complement, of the selection.\n</p>\n<h4><span class=\"mw-headline\" id=\"rndcoord\">rndcoord</span></h4>\n<p>To select a random pair of coordinates from a selection, use <tt>rndcoord(<a href=\"#selection\">selection</a>)</tt>:\n</p>\n<pre>$bar = rndcoord(rect(5,5, 50,18) &amp; rect(10,2, 40,13))\n</pre>\n<h2><span class=\"mw-headline\" id=\"Predefined_functions_and_constants\">Predefined functions and constants</span></h2>\n<p>These are internal functions from the game's code that are available during level creation:\n</p>\n<table class=\"prettytable striped\">\n<tbody><tr>\n<th>name\n</th>\n<th>return value\n</th>\n<th>\n</th></tr>\n<tr>\n<td>time.discordian_holiday\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.pirateday\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.aprilfoolsday\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.piday\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.towelday\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.midnight\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.night\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.friday_13th\n</td>\n<td>integer, 0 or 1\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.phase_of_the_moon\n</td>\n<td>integer, 0..7, where 0=new, 4=full\n</td>\n<td>\n</td></tr>\n<tr>\n<td>time.yyyymmdd\n</td>\n<td>integer\n</td>\n<td>Current date in the YYYYMMDD format, eg. 20120418\n</td></tr>\n<tr>\n<td>level.depth\n</td>\n<td>integer\n</td>\n<td>Returns the level depth from surface.\n</td></tr>\n<tr>\n<td>level.difficulty\n</td>\n<td>integer\n</td>\n<td>\n</td></tr>\n<tr>\n<td>level.obj_at(obj, coord)\n</td>\n<td>integer, 0 or 1\n</td>\n<td>Return 1 if the specified object is present at the coordinates.\n</td></tr>\n<tr>\n<td>level.mon_at(monster, coord)\n</td>\n<td>integer, 0 or 1\n</td>\n<td>Return 1 if there's a monster of certain class, or a certain type of monster, or any monster at the coordinates. <tt>level.mon_at(monster:'h', (5,5))</tt> matches any monster of class <span class=\"nhsym clr-white\">h</span>, <tt>level.mon_at(monster:('h', \"hobbit\"), (5,5))</tt> matches only a hobbit, <tt>level.mon_at(monster:random, (5,5))</tt> matches any monster.\n</td></tr>\n<tr>\n<td>hero.name\n</td>\n<td>string\n</td>\n<td>\n</td></tr>\n<tr>\n<td>hero.role\n</td>\n<td>string, eg. \"Priest\"\n</td>\n<td>\n</td></tr>\n<tr>\n<td>hero.race\n</td>\n<td>string, eg. \"human\"\n</td>\n<td>\n</td></tr>\n<tr>\n<td>hero.carrying(obj)\n</td>\n<td>integer, 0 or 1\n</td>\n<td>Return 1 if player has object in main inventory.\n</td></tr>\n<tr>\n<td>string(int)\n</td>\n<td>string\n</td>\n<td>Convert an integer to string. Alias: <tt>str()</tt>\n</td></tr>\n<tr>\n<td>int(str)\n</td>\n<td>integer\n</td>\n<td>Convert a string to integer. Alias: <tt>integer()</tt>\n</td></tr>\n<tr>\n<td>coord(int, int)\n</td>\n<td>coordinates\n</td>\n<td>Convert two integer values into a pair of map coordinates.\n</td></tr>\n<tr>\n<td>region(int, int, int, int)\n</td>\n<td>region\n</td>\n<td>Convert four integer values into a region\n</td></tr>\n<tr>\n<td>rnd(int)\n</td>\n<td>integer\n</td>\n<td>Returns a random integer number between 0 and (int-1). This is equal to the <a href=\"/wiki/Source:Ref/rn2\" class=\"mw-redirect\" title=\"Source:Ref/rn2\">rn2</a>-function in the sourcecode.\n</td></tr>\n<tr>\n<td>room.width\n</td>\n<td>integer\n</td>\n<td>Returns the width of the current (SUB)ROOM, minus the outer walls. If used outside a ROOM context, returns 0.\n</td></tr>\n<tr>\n<td>room.height\n</td>\n<td>integer\n</td>\n<td>Returns the height of the current (SUB)ROOM, minus the outer walls. If used outside a ROOM context, returns 0.\n</td></tr>\n<tr>\n<td>room.x\n</td>\n<td>integer\n</td>\n<td>Returns the x coordinate of the top-left corner of the current (SUB)ROOM. If used outside a ROOM context, returns 0.\n</td></tr>\n<tr>\n<td>room.y\n</td>\n<td>integer\n</td>\n<td>Returns the y coordinate of the top-left corner of the current (SUB)ROOM. If used outside a ROOM context, returns 0.\n</td></tr></tbody></table>\n<p>For example:\n</p>\n<pre>IF [ level.obj_at(obj:\"pick-axe\", coord(2 + 3, 5)) ] {\n MESSAGE: \"Today is \" . string(time.yyyymmdd)\n}\n</pre>\n<h3><span class=\"mw-headline\" id=\"Map_characters\">Map characters</span></h3>\n<p><span id=\"map_character\"></span>\n</p>\n<table class=\"prettytable striped\">\n<tbody><tr>\n<th>character\n</th>\n<th><a href=\"/wiki/Dungeon_feature\" title=\"Dungeon feature\">dungeon feature</a>\n</th></tr>\n<tr>\n<td><tt>' '</tt>\n</td>\n<td>solid wall\n</td></tr>\n<tr>\n<td><tt>'#'</tt>\n</td>\n<td>corridor\n</td></tr>\n<tr>\n<td><tt>'.'</tt>\n</td>\n<td>room floor (Unlit, unless lit with <a href=\"#REGION\">REGION</a>-command)\n</td></tr>\n<tr>\n<td><tt>'-'</tt>\n</td>\n<td>horizontal wall\n</td></tr>\n<tr>\n<td><tt>'&#124;'</tt>\n</td>\n<td>vertical wall\n</td></tr>\n<tr>\n<td><tt>'+'</tt>\n</td>\n<td>door (State is defined with <a href=\"#DOOR\">DOOR</a> -command)\n</td></tr>\n<tr>\n<td><tt>'A'</tt>\n</td>\n<td>air\n</td></tr>\n<tr>\n<td><tt>'B'</tt>\n</td>\n<td>crosswall / boundary symbol hack (See <a href=\"#REGION\">REGION</a>)\n</td></tr>\n<tr>\n<td><tt>'C'</tt>\n</td>\n<td>cloud\n</td></tr>\n<tr>\n<td><tt>'S'</tt>\n</td>\n<td>secret door\n</td></tr>\n<tr>\n<td><tt>'H'</tt>\n</td>\n<td>secret corridor\n</td></tr>\n<tr>\n<td><tt>'{'</tt>\n</td>\n<td>fountain\n</td></tr>\n<tr>\n<td><tt>'\\'</tt>\n</td>\n<td>throne\n</td></tr>\n<tr>\n<td><tt>'K'</tt>\n</td>\n<td>sink\n</td></tr>\n<tr>\n<td><tt>'&#125;'</tt>\n</td>\n<td>moat\n</td></tr>\n<tr>\n<td><tt>'P'</tt>\n</td>\n<td>pool of water\n</td></tr>\n<tr>\n<td><tt>'L'</tt>\n</td>\n<td>lava pool\n</td></tr>\n<tr>\n<td><tt>'I'</tt>\n</td>\n<td>ice\n</td></tr>\n<tr>\n<td><tt>'W'</tt>\n</td>\n<td>water\n</td></tr>\n<tr>\n<td><tt>'T'</tt>\n</td>\n<td>tree\n</td></tr>\n<tr>\n<td><tt>'t'</tt>\n</td>\n<td>dead tree\n</td></tr>\n<tr>\n<td><tt>'F'</tt>\n</td>\n<td>iron bars\n</td></tr>\n<tr>\n<td><tt>'M'</tt>\n</td>\n<td>muddy swamp\n</td></tr>\n<tr>\n<td><tt>'Y'</tt>\n</td>\n<td>crystal ice wall\n</td></tr>\n<tr>\n<td><tt>'U'</tt>\n</td>\n<td>ice wall\n</td></tr>\n<tr>\n<td><tt>'x'</tt>\n</td>\n<td>\"transparent\" map character\n</td></tr></tbody></table>\n<h3><span class=\"mw-headline\" id=\"Trap_names\">Trap names</span></h3>\n<p>\"anti magic\", \"arrow\", \"bear\", \"board\", \"dart\", \"falling rock\", \"fire\", \"hole\", \"land mine\", \"level teleport\", \"magic portal\", \"magic\", \"pit\", \"polymorph\", \"rolling boulder\", \"rust\", \"sleep gas\", \"spiked pit\", \"statue\", \"teleport\", \"trap door\", \"web\", \"cold\"\n</p>\n<h3><span class=\"mw-headline\" id=\"Room_types\">Room types</span></h3>\n<p>\"ordinary\", \"throne\", \"swamp\", \"vault\", \"beehive\", \"morgue\", \"barracks\", \"zoo\", \"delphi\", \"temple\", \"lemurepit\", \"anthole\", \"cocknest\", \"garden\", \"leprehall\", \"shop\", \"armor shop\", \"scroll shop\", \"potion shop\", \"weapon shop\", \"food shop\", \"ring shop\", \"wand shop\", \"tool shop\", \"book shop\", \"tin shop\", \"music shop\", \"candle shop\", \"pet shop\", \"black market\"\n</p>\n<div style=\"display:none; right:10px; padding-bottom: 17px\" class=\"metadata topicon nopopups\"><div style=\"margin-top: -10px\"><a href=\"/wiki/NetHackWiki:Next_version\" title=\"This article describes a 3.4.3-based variant of NetHack. Click here for more information.\"><img alt=\"This article describes a 3.4.3-based variant of NetHack. Click here for more information.\" src=\"/images/5/5d/Nh343var-icon.png\" width=\"32\" height=\"32\" /></a></div></div>\n\n<!-- \nNewPP limit report\nCached time: 20240926183132\nCache expiry: 604800\nDynamic content: false\nCPU time usage: 0.097 seconds\nReal time usage: 0.412 seconds\nPreprocessor visited node count: 2048/1000000\nPreprocessor generated node count: 4112/1000000\nPost‐expand include size: 6429/2097152 bytes\nTemplate argument size: 4136/2097152 bytes\nHighest expansion depth: 8/40\nExpensive parser function count: 0/100\nUnstrip recursion depth: 0/20\nUnstrip post‐expand size: 0/5000000 bytes\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%  204.790      1 -total\n 45.36%   92.886    150 Template:Sa\n  7.80%   15.971      1 Template:Tocright\n  7.67%   15.699      1 Template:Variant-343\n  5.45%   11.164      4 Template:Anchor\n  5.01%   10.257      1 Template:White\n  4.68%    9.579      1 Template:Version_icon\n  3.71%    7.605      1 Template:Top_icon\n  2.95%    6.046      1 Template:Sourceref\n-->\n\n<!-- Saved in parser cache with key wikihackdb:pcache:idhash:21633-0!canonical and timestamp 20240926183131 and revision id 123560\n -->\n</div></div>\t\t\t\t\t<div class=\"printfooter\">\n\t\t\t\t\t\tRetrieved from \"<a dir=\"ltr\" href=\"https://nethackwiki.com/index.php?title=Des-file_format_(UnNetHack)&amp;oldid=123560\">https://nethackwiki.com/index.php?title=Des-file_format_(UnNetHack)&amp;oldid=123560</a>\"\t\t\t\t\t</div>\n\t\t\t\t<div id=\"catlinks\" class=\"catlinks\" data-mw=\"interface\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/wiki/Special:Categories\" title=\"Special:Categories\">Categories</a>: <ul><li><a href=\"/wiki/Category:Variant-343_articles\" title=\"Category:Variant-343 articles\">Variant-343 articles</a></li><li><a href=\"/wiki/Category:Annotations\" title=\"Category:Annotations\">Annotations</a></li><li><a href=\"/wiki/Category:UnNetHack\" title=\"Category:UnNetHack\">UnNetHack</a></li></ul></div></div>\t\t\t\t<div class=\"visualClear\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"mw-navigation\">\n\t\t\t<h2>Navigation menu</h2>\n\t\t\t<div id=\"mw-head\">\n\t\t\t\t\t\t\t\t\t<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">\n\t\t\t\t\t\t<h3 id=\"p-personal-label\">Personal tools</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"pt-createaccount\"><a href=\"/index.php?title=Special:CreateAccount&amp;returnto=Des-file+format+%28UnNetHack%29\" title=\"You are encouraged to create an account and log in; however, it is not mandatory\">Create account</a></li><li id=\"pt-login\"><a href=\"/index.php?title=Special:UserLogin&amp;returnto=Des-file+format+%28UnNetHack%29\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div id=\"left-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">\n\t\t\t\t\t\t<h3 id=\"p-namespaces-label\">Namespaces</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/wiki/Des-file_format_(UnNetHack)\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li><li id=\"ca-talk\"><span><a href=\"/wiki/Talk:Des-file_format_(UnNetHack)\" rel=\"discussion\" title=\"Discussion about the content page [t]\" accesskey=\"t\">Discussion</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-variants-label\" />\n\t\t\t\t\t\t<h3 id=\"p-variants-label\">\n\t\t\t\t\t\t\t<span>Variants</span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t<div id=\"right-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">\n\t\t\t\t\t\t<h3 id=\"p-views-label\">Views</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-view\" class=\"collapsible selected\"><span><a href=\"/wiki/Des-file_format_(UnNetHack)\">Read</a></span></li><li id=\"ca-viewsource\" class=\"collapsible\"><span><a href=\"/index.php?title=Des-file_format_(UnNetHack)&amp;action=edit\" title=\"This page is protected.&#10;You can view its source [e]\" accesskey=\"e\">View source</a></span></li><li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/index.php?title=Des-file_format_(UnNetHack)&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-cactions-label\" />\n\t\t\t\t\t\t<h3 id=\"p-cactions-label\"><span>More</span></h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-search\" role=\"search\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t<label for=\"searchInput\">Search</label>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<form action=\"/index.php\" id=\"searchform\">\n\t\t\t\t\t\t\t<div id=\"simpleSearch\">\n\t\t\t\t\t\t\t\t<input type=\"search\" name=\"search\" placeholder=\"Search NetHackWiki\" title=\"Search NetHackWiki [f]\" accesskey=\"f\" id=\"searchInput\"/><input type=\"hidden\" value=\"Special:Search\" name=\"title\"/><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"/><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\"/>\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"mw-panel\">\n\t\t\t\t<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/wiki/Main_Page\"  title=\"Visit the main page\"></a></div>\n\t\t\t\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">\n\t\t\t<h3 id=\"p-navigation-label\">Navigation</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-NetHack-Wiki\"><a href=\"/wiki/Main_Page\">NetHack Wiki</a></li><li id=\"n-Forum\"><a href=\"/wiki/Forum:Watercooler\">Forum</a></li><li id=\"n-portal\"><a href=\"/wiki/NetHackWiki:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li><li id=\"n-recentchanges\"><a href=\"/wiki/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/wiki/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-Popular_pages\" aria-labelledby=\"p-Popular_pages-label\">\n\t\t\t<h3 id=\"p-Popular_pages-label\">Popular pages</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Dungeon-features\"><a href=\"/wiki/Dungeon_feature\">Dungeon features</a></li><li id=\"n-Monsters\"><a href=\"/wiki/Monster#Canonical_list_of_monsters\">Monsters</a></li><li id=\"n-In.2FExtrinsics\"><a href=\"/wiki/Property#Intrinsic_properties\">In/Extrinsics</a></li><li id=\"n-Items\"><a href=\"/wiki/Item\">Items</a></li><li id=\"n-Spells\"><a href=\"/wiki/Spellbook#List_of_spellbooks\">Spells</a></li><li id=\"n-Game-options\"><a href=\"/wiki/Options\">Game options</a></li><li id=\"n-Websites\"><a href=\"/wiki/Websites\">Websites</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-contributing\" aria-labelledby=\"p-contributing-label\">\n\t\t\t<h3 id=\"p-contributing-label\">Contributing</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Style-guide\"><a href=\"/wiki/NetHackWiki:Style_guide\">Style guide</a></li><li id=\"n-help\"><a href=\"/wiki/NetHackWiki:How_to_help\" title=\"The place to find out\">How to help</a></li><li id=\"n-Current-projects\"><a href=\"/wiki/NetHackWiki:Current_projects\">Current projects</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">\n\t\t\t<h3 id=\"p-tb-label\">Tools</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"t-whatlinkshere\"><a href=\"/wiki/Special:WhatLinksHere/Des-file_format_(UnNetHack)\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/wiki/Special:RecentChangesLinked/Des-file_format_(UnNetHack)\" rel=\"nofollow\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-specialpages\"><a href=\"/wiki/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-print\"><a href=\"/index.php?title=Des-file_format_(UnNetHack)&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li><li id=\"t-permalink\"><a href=\"/index.php?title=Des-file_format_(UnNetHack)&amp;oldid=123560\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/index.php?title=Des-file_format_(UnNetHack)&amp;action=info\" title=\"More information about this page\">Page information</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t<div id=\"footer\" role=\"contentinfo\">\n\t\t\t\t\t\t<ul id=\"footer-info\">\n\t\t\t\t\t\t\t\t<li id=\"footer-info-lastmod\"> This page was last edited on 10 August 2018, at 19:22.</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<ul id=\"footer-places\">\n\t\t\t\t\t\t\t\t<li id=\"footer-places-about\"><a href=\"/wiki/NetHackWiki:About\" title=\"NetHackWiki:About\">About NetHackWiki</a></li>\n\t\t\t\t\t\t\t\t<li id=\"footer-places-disclaimer\"><a href=\"/wiki/NetHackWiki:General_disclaimer\" title=\"NetHackWiki:General disclaimer\">Disclaimers</a></li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t<ul id=\"footer-icons\" class=\"noprint\">\n\t\t\t\t\t\t\t\t\t\t<li id=\"footer-poweredbyico\">\n\t\t\t\t\t\t<a href=\"//www.mediawiki.org/\"><img src=\"/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"/></a>\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div style=\"clear: both;\"></div>\n\t\t</div>\n\t\t\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.097\",\"walltime\":\"0.412\",\"ppvisitednodes\":{\"value\":2048,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":4112,\"limit\":1000000},\"postexpandincludesize\":{\"value\":6429,\"limit\":2097152},\"templateargumentsize\":{\"value\":4136,\"limit\":2097152},\"expansiondepth\":{\"value\":8,\"limit\":40},\"expensivefunctioncount\":{\"value\":0,\"limit\":100},\"unstrip-depth\":{\"value\":0,\"limit\":20},\"unstrip-size\":{\"value\":0,\"limit\":5000000},\"timingprofile\":[\"100.00%  204.790      1 -total\",\" 45.36%   92.886    150 Template:Sa\",\"  7.80%   15.971      1 Template:Tocright\",\"  7.67%   15.699      1 Template:Variant-343\",\"  5.45%   11.164      4 Template:Anchor\",\"  5.01%   10.257      1 Template:White\",\"  4.68%    9.579      1 Template:Version_icon\",\"  3.71%    7.605      1 Template:Top_icon\",\"  2.95%    6.046      1 Template:Sourceref\"]},\"cachereport\":{\"timestamp\":\"20240926183132\",\"ttl\":604800,\"transientcontent\":false}}});mw.config.set({\"wgBackendResponseTime\":567});});</script>\n\t</body>\n</html>\n","rawPage":"{{DISPLAYTITLE:des-file format (UnNetHack)}}\n{{tocright}}\nThis documents the [[des-file format]] used by [[UnNetHack]].\n\nUnNethack (like [[Sporkhack]]) started with the [http://bilious.alt.org/?20 new level compiler patch], and then added most of the changes from Spork.\n\nA des-file consists of any number of {{sa|Header statements}}, and one or more of {{sa|Level definitions}}.\n\nUnlike vanilla format, the UnNetHack one is closer to a real programming language, the statements are executed in order, and there is some flow control.\n\n==Comments==\nAll lines beginning with <tt>#</tt> are comments and are ignored by the level compiler, except between {{sa|MAP}} and [[#MAP|ENDMAP]].\n\nExample:\n # This is a comment.\n\n==Header statements==\n\n===FUNCTION===\n FUNCTION name() { {{sa|Level statements}} }\n FUNCTION name([$paramname:paramtype [, ...]]) { {{sa|Level statements}} }\nDefines a function.\nThe level statements defined inside the function body will be executed when the function is called.\nFunction must be defined before it can be called. Function name can contain alphanumeric characters (a-z, A-Z and 0-9) and full stops (.)\nCall the function by using it's name, for example <tt>name()</tt>\nVariables defined outside the function cannot be accessed, and variables defined inside the function are gone when the function finishes.\nFunctions can have any number of named parameters separated by commas. Supported parameter types are \"string\" and \"integer\".\n\nExample:\n FUNCTION foobar() {\n   OBJECT:'?', random\n }\n foobar()\n FUNCTION bazqux($foo:integer, $bar:string) {\n   MESSAGE: $bar\n   OBJECT:'$', random, quantity: $foo\n }\n bazqux(12345, \"Fee Fie Foe Foo\")\n\n===INCLUDE===\n INCLUDE \"filename.des\"\nIncludes the contents of the file in the current file.\n\n==Level definitions==\n\nA level definition consists of {{sa|LEVEL}}, followed by an optional {{sa|FLAGS}} and any number of {{sa|Level statements}}.\n\n===LEVEL===\n LEVEL:\"name\"\nThe level is saved as <tt>name.lev</tt> file. The name can be up to 14 characters long.\n\nUsing a <tt>%i</tt> in the filename will be replaced with a sequential number, starting from 1, and counting upwards, for every LEVEL in that des-file that has a such variable.\nAllows number characters between the <tt>'%'</tt> and <tt>'i'</tt> - those will be handled as per printf formatting.\n\nFor example:\n LEVEL:\"bigrm-%i\"\n\n===FLAGS===\n FLAGS:noteleport,mazelevel\nDefines special flags for the whole level. Parameters are a comma-separated list of flags:\n*<tt>noteleport</tt>: Player cannot teleport within the level.\n*<tt>sheol</tt>: Level is a [[Sheol]]-type level, with special rules.\n*<tt>hardfloor</tt>: The floor is too hard to dig. \n*<tt>nommap</tt>: [[magic mapping]] does not work.\n*<tt>arboreal</tt>: supposedly an outdoor map. Solid walls and secret corridors will be shown as trees, digging makes floor instead of corridor and randomly created corridors are made out of floor instead of corridor.\n*<tt>shortsighted</tt>: Monsters cannot see you from far away. \n*<tt>noflipx</tt>, <tt>noflipy</tt> and <tt>noflip</tt> prevent the level from being flipped horizontally, vertically and both.\n*<tt>mazelevel</tt>: level is a \"maze\" type level. Digging a wall turns it into room floor and mimics prefer mimicing a statue.\n*<tt>premapped</tt>: The level map is automatically known by player (a la [[Sokoban]]).\n*<tt>shroud</tt>: Magic mapping doesn't reveal the map permanently.\n*<tt>stormy</tt>: Clouds randomly emit lightning bolts, a la [[Plane of Air]].\n*<tt>graveyard</tt>: Reduced chances of undead corpses.\n*<tt>sky</tt>: Level is open to the sky, so has no ceiling.\n\n==Level statements==\n\nLevel statements include the following commands, {{sa|variable}} definitions, {{sa|FUNCTION}} definitions, function calls, and {{sa|Flow control}} commands.\n\n===MESSAGE===\n MESSAGE:\"string\"\n\nThe message string is shown when player first enters the level. Each message line gets separated with a <tt>--more--</tt> -prompt in the game.\n\nExample:\n MESSAGE: \"Well done, mortal!\"\n $foo = \"Hello, World!\"\n MESSAGE: $foo\n\n===INIT_MAP===\n INIT_MAP:solidfill, terrain_type\n INIT_MAP:mazegrid,'-'\n INIT_MAP:sheollev\n INIT_MAP:rogue\n INIT_MAP:mines, '.' , ' ', true, true, random, true\nInitializes the map with different algorithm.\n*<tt>solidfill</tt>: Fills the level with the specified map character. Can also take a map character with light-state wrapped in parenthesis: <tt>('.', lit)</tt>\n*<tt>mazegrid</tt>: Generates a grid of solid walls and the specified map characters. Use {{sa|MAZEWALK}} to carve a maze into it.\n*<tt>sheollev</tt>: Generates a Sheol level. No parameters.\n*<tt>rogue</tt>: Generates a [[Rogue level]]. No parameters.\n*<tt>mines</tt>: Creates [[Gnomish Mines]]-style levels. Takes several parameters: <tt>foreground, background, smoothed, joined, light_state, walled [, filling ]</tt>\n**<tt>foreground</tt>: The \"foreground\" fill {{sa|map character}}. This should be something the player can walk on, as the walkable part will be made out of this.\n**<tt>background</tt>: The \"background\" fill {{sa|map character}}. This will surround the foreground area, so can be solid or harmful to player.\n**<tt>smoothed</tt>: is either <tt>true</tt> or <tt>false</tt>, and denotes whether the level will be \"smoothed\". This means that any foreground character surrounded by fewer than 3 foreground characters is changed to background character.\n**<tt>joined</tt>: is either <tt>true</tt> or <tt>false</tt>, and denotes whether the level will be \"joined\", so that all parts are accessible by walking.\n**<tt>light_state</tt>: is either <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.\n**<tt>walled</tt>: is either <tt>true</tt> or <tt>false</tt>. This is equivalent of using a {{sa|WALLIFY}} -command.\n**<tt>filling</tt>: optional [[#Map characters|fill map character]]. The \"outside\" parts of the level will be filled with this.\n\n===ALTAR===\n ALTAR:{{sa|coord or variable}}, alignment, altartype\nCreate an altar.\n*alignment is one of <tt>law</tt>, <tt>noalign</tt>, <tt>neutral</tt>, <tt>chaos</tt>, <tt>coaligned</tt>, <tt>noncoaligned</tt>, <tt>align[0]</tt>, <tt>align[1]</tt>, <tt>align[2]</tt> or <tt>random</tt>.\n*altartype is one of <tt>sanctum</tt> (with a [[high priest]]), <tt>shrine</tt> (with an [[aligned priest]]), <tt>altar</tt> or <tt>random</tt>.\n\nExample:\n ALTAR:(50,14),chaos,altar\n\n===GRAVE===\n GRAVE:{{sa|coord or variable}}, \"Any epitaph message\"\n GRAVE:{{sa|coord or variable}}, random\n GRAVE:{{sa|coord or variable}}\nCreates a grave at given location, with a given epitaph, a random epitaph, or with no text.\n\n===MON_GENERATION===\nChange the monster generation chances for this level.\n\n MON_GENERATION:75%, (9, 'a'), (1, \"fire giant\")\n75% of randomly generated monsters are either ants (90% chance), or fire giants (10% chance).\n\n===SOUNDS===\nRandom sounds on this level.\n SOUNDS:200, (hear, \"falling rocks.\"), (pline, \"Kaboom!\"), (verbal, \"Mwahahah!\"), (feel, \"hot!\")\n1/200 chance each turn to get one of the sounds defined. In this case, \"You hear falling rocks.\", \"Kaboom!\", \"Mwahahah!\", or \"You feel hot!\"\n\n===BRANCH===\n BRANCH:(x1,y1,x2,y2), (x3,y3,x4,y4)\n BRANCH:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4)\nPlaces stairs or a magical portal to a dungeon branch within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4).\nIf the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined {{sa|MAP}}.\n\nExample:\n BRANCH:levregion(51,2,77,18),(0,0,40,20)\n\n===CORRIDOR===\n CORRIDOR:(room_number, direction, door_position), (room_number, direction, door_position)\n CORRIDOR:(room_number, direction, door_position), any_integer\nCreate a corridor from room to another room. direction is one of <tt>north</tt>, <tt>south</tt>, <tt>west</tt>, or <tt>east</tt> and tells which wall the corridor starts from and ends to. door_position is an integer value and tells how far from the top left of the room the corridor starts/ends. any_integer is a room number. There must be a door (or at least a doorway) in the starting wall position.\n\n===SHUFFLE===\n SHUFFLE:any_array_variable\nShuffles the array elements. The predefined alignment array <tt>align</tt> is shuffled automatically at the start of the level code, and cannot be reshuffled.\n\nExample:\n $foo = monster:{ 'd', 'T', 'e', 'L' }\n SHUFFLE: $foo\n\n===NON_DIGGABLE===\n NON_DIGGABLE:region_or_variable\nSets the walls inside the region as non-diggable. \n\nExample:\n NON_DIGGABLE:(00,00,13,12)\n\n===NON_PASSWALL===\n NON_PASSWALL:region_or_variable\nPlayers and monsters cannot phase through the walls inside the region.\n\nExample:\n NON_PASSWALL:(00,00,13,12)\n\n===ROOMDOOR===\n ROOMDOOR:secret, door_state, door_wall, door_pos\nCreates a door with certain state on the previously defined {{sa|ROOM}} or {{sa|SUBROOM}}.\n\n*secret can be one of <tt>true</tt>, <tt>false</tt>, or <tt>random</tt>.\n*door_state can be one of <tt>open</tt>, <tt>closed</tt>, <tt>locked</tt>, <tt>nodoor</tt>, <tt>broken</tt>, <tt>secret</tt>, or <tt>random</tt>.\n*door_wall can be one of <tt>north</tt>, <tt>south</tt>, <tt>west</tt>, or <tt>east</tt>, a pipe-delimited list of those, or <tt>random</tt>, and tells on what wall of the room the door will be created.\n*door_pos is a positive integer value and tells how far from the top or left the door will be.\n\nExample:\n ROOMDOOR: false, closed, north|south, random\n\n===DOOR===\n DOOR:door_state, {{sa|selection}}\nPuts a door on the map.\n\n*door_state can be one of <tt>open</tt>, <tt>closed</tt>, <tt>locked</tt>, <tt>nodoor</tt>, <tt>broken</tt>, <tt>secret</tt>, or <tt>random</tt>.\n\n===WALLWALK===\n WALLWALK:{{sa|coord or variable}}, map character or variable\n WALLWALK:{{sa|coord or variable}}, map character or variable, 50%\n WALLWALK:{{sa|coord or variable}}, map character or variable, map character or variable\n WALLWALK:{{sa|coord or variable}}, map character or variable, map character or variable, 50%\n\n===DRAWBRIDGE===\n DRAWBRIDGE:{{sa|coord or variable}}, dir, state\n\n*<tt>dir</tt> is one of the following: <tt>north</tt>, <tt>east</tt>, <tt>south</tt> or <tt>west</tt>\n*<tt>state</tt> is either <tt>closed</tt>, <tt>open</tt> or <tt>random</tt>.\n\nNote that the drawbridge placement is different from door placement; the coordinates must be a place where the drawbridge would be when it's open, and from that place towards the direction there should be a wall, where the portcullis will be.\n\nExample:\n DRAWBRIDGE:(25,18), north, closed\n\n===ENGRAVING===\n ENGRAVING:{{sa|coord or variable}}, engraving_type, \"string\"\n ENGRAVING:{{sa|coord or variable}}, engraving_type, $stringvariable\nCreates an engraving on the floor.\nengraving_type can be one of <tt>dust</tt>, <tt>engrave</tt>, <tt>burn</tt>, <tt>mark</tt>, <tt>blood</tt>, or <tt>random</tt>.\n\nFor example:\n ENGRAVING:(12,03), engrave, \"You are now entering the Gnome King's wine cellar.\"\n\n===FOUNTAIN===\n FOUNTAIN:{{sa|selection}}\nCreate a fountain at each pair of coordinates in the selection.\n\n===POOL===\n POOL:{{sa|selection}}\nCreate a pool at each pair of coordinates in the selection.\n\n===SINK===\n SINK:{{sa|selection}}\nCreate a sink at each pair of coordinates in the selection.\n\n===TERRAIN===\n TERRAIN:{{sa|selection}}, map_character_or_variable\nSet the terrain at each pair of coordinates in the selection.\n\nExample:\n TERRAIN:random, 'L'\n TERRAIN:line(1,1)-(40,11), ('T', lit)\n\n===REPLACE_TERRAIN===\n REPLACE_TERRAIN:region_or_variable, map_character_or_variable, map_character_or_variable, percentage\nReplace percentage amount of the first terrain in the region to the second terrain.\n\nFor example, replace 25% of '.' in the area with 'L':\n REPLACE_TERRAIN:(1,1,50,20), '.', 'L', 25%\n\n===SPILL===\n SPILL:{{sa|coord or variable}}, terrain_type, direction, length\nCreate random \"pool-like\" globs of terrain, starting from coordinates, generally moving towards direction, and at a maximum of length positions.\nCoordinates, terrain_type and length can be variables of the appropriate type.\n\nFor example:\n SPILL: random, 'L', north, 20\n SPILL: random, ('.', lit), north, 10\n\n===PORTAL===\n PORTAL:(x1,y1,x2,y2), (x3,y3,x4,y4), \"levelname\"\n PORTAL:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4), \"levelname\"\nPlaces a magical portal within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4). The portal will level teleport player to the level with the name \"levelname\".\nIf the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined {{sa|MAP}}.\n\nExample:\n PORTAL:levregion(57,01,78,19),(0,0,0,0),\"fire\"\n PORTAL:(0,0,75,19),(65,13,75,19),\"air\"\n\n===RANDOM_CORRIDORS===\n RANDOM_CORRIDORS\n RANDOM_CORRIDORS:style\nCreate random corridors joining the rooms.\n\nstyle is <tt>random</tt>, or one of the following values:\n*1 = at least one corridor leaves from each room and goes to random room\n*2 = circular path: room1 -> room2 -> room3 -> ... -> room1\n*3 = all roads lead to rome. or to the first room.\n*any other value (or leaving style off) will generate normal style corridors.\n\n===MINERALIZE===\n MINERALIZE\n MINERALIZE: kelp_pool, kelp_moat, gold_prob, gem_prob\nPuts kelp in pools and moats, and gold and gems in solid walls.\nWithout parameters uses the same chances as normal Dungeons of Doom mineralize.\n*<tt>kelp_pool</tt> and <tt>kelp_moat</tt> are integer values and is the 1-in-n chances of a pool or a moat having kelp in it. Using -1 or below uses the default chances.\n*<tt>gold_prob</tt> and <tt>gem_prob</tt> are integer values and is the n/1000 chances of a diggable solid wall containing gold and gems. Using -1 or below uses the default chances.\n\nExample:\n MINERALIZE:0,0,0,1000  # Put gems in every solid wall\n\n===REGION===\n REGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined]\n REGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined] { {{sa|Level statements}} }\nDefine a region on the map with certain light-state and type. This allows defining irregularly-shaped rooms. See also {{sa|ROOM}} and {{sa|SUBROOM}}. {{sa|BREAK}} is allowed within the level statements.\n\n*lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.\n*roomtype is either <tt>random</tt>, or one of the {{sa|Room types|special room names}}, eg. <tt>\"morgue\"</tt>\n*filled is optional, either <tt>filled</tt> or <tt>unfilled</tt>, and tells whether the room should get stocked with random stuff.\n*irregular is optional, either <tt>irregular</tt> or <tt>regular</tt> and tells whether the room is irregularly shaped. If the room is irregular, only the first pair of coordinates defining the region must be inside the room, and the room must be closed off from other areas with non-floor {{sa|map characters}}. Use the boundary symbol <tt>'B'</tt> in the {{sa|MAP}} to enclose an irregular room; it will be converted to floor symbol <tt>'.'</tt> after the level has been created.\n*joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the region.\n\nExample:\n REGION:(01,04,09,05),lit,\"barracks\"\n\n===ROOM===\n ROOM:roomtype, [ chance, ] lightstate, pos, align, size [, filled] [, joined] { {{sa|Level statements}} }\nCreates a room, with walls and floor. The room will be placed on a position defined both by pos and align. pos defines the rough position (in a 5-by-5 grid on the screen), and align defines the room position within that. {{sa|BREAK}} is allowed within the level statements.\n\nNOTE: Creation of a randomly located room may fail, especially if there's little free space to fit it on the level. The level statements of a failed room won't be executed.\n\n*roomtype is either <tt>random</tt>, or one of the {{sa|Room types|special room names}}, eg. <tt>\"morgue\"</tt>\n*chance is optional percentage of the room being the special room; otherwise the room is ordinary.\n*lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.\n*pos can be either <tt>random</tt> or an approximate location in the form of <tt>(1,3)</tt> - this is not an absolute position, but an approximate position on the map - the number ranges are 1..5\n*align is either <tt>random</tt> or an approximate adjustment to the location in the form of <tt>(horiz, vert)</tt>, where\n**horiz is one of <tt>left</tt>, <tt>half-left</tt>, <tt>center</tt>, <tt>half-right</tt>, or <tt>right</tt>.\n**vert is one of <tt>top</tt>, <tt>center</tt>, or <tt>bottom</tt>.\n*size is either <tt>random</tt> or an exact width and height in the form of <tt>(3,5)</tt>.\n*filled is an optional <tt>filled</tt> or <tt>unfilled</tt>. <tt>unfilled</tt> means the room should get stocked with random stuff.\n*joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the room.\n\nThe contents (and SUBROOMs) of the room can be defined using the level statements.\n\nSee also {{sa|SUBROOM}} and {{sa|REGION}}.\n\n===SUBROOM===\n SUBROOM:\"roomtype\", [ chance, ] lightstate, position, size [, filled] [, joined] { {{sa|Level statements}} }\nCreates a room within a {{sa|ROOM}}, with walls and floor. {{sa|BREAK}} is allowed within the level statements block.\n\n*roomtype is either <tt>random</tt>, or one of the {{sa|Room types|special room names}}, eg. <tt>\"morgue\"</tt>\n*chance is optional percentage of the room being the special room; otherwise the room is ordinary.\n*lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.\n*position is either <tt>random</tt>, or an exact position of the room inside the outer room in the form of <tt>(4,3)</tt>.\n*size is either <tt>random</tt> or an exact width and height in the form of <tt>(3,5)</tt>.\n*filled is an optional <tt>filled</tt> or <tt>unfilled</tt>. <tt>unfilled</tt> means the room should get stocked with random stuff.\n*joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the room.\n\nThe contents (and SUBROOMs) of the room can be defined using the level statements.\n\nSee also {{sa|ROOM}} and {{sa|REGION}}.\n\n===GOLD===\n GOLD:{{sa|mathematical expression}}, {{sa|coord or variable}}\nCreate a pile of gold.\n\nExample:\n GOLD: 400 + 10d100, (01,05)\n\n===LADDER===\n LADDER:{{sa|coord or variable}}, direction\nCreates a ladder.\ndirection is one of <tt>up</tt> or <tt>down</tt>.\n\n===STAIR===\n STAIR:{{sa|coord or variable}}, direction\nCreates stairs.\ndirection is one of <tt>up</tt> or <tt>down</tt>.\n\n===TELEPORT_REGION===\n TELEPORT_REGION:(x1,y1,x2,y2), (x3,y3,x4,y4) [, up_or_down ]\n\nRestricts the area where player can end up on the level when he [[level teleport]]s or falls in there. Player will end up within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4).\nIf the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined {{sa|MAP}}.\nYou can also add an optional direction parameter, either <tt>up</tt> or <tt>down</tt>, which will tell when this rule is applied; when player is coming from below or above.\n\nExample:\n TELEPORT_REGION:(69,16,69,16),(0,0,0,0)\n TELEPORT_REGION:levregion(56,00,79,20),levregion(01,00,55,20),down\n\n===TRAP===\n TRAP:\"{{sa|Trap names|falling rock}}\", {{sa|coord or variable}}\n TRAP:random, {{sa|coord or variable}}\nCreate a trap at the given location.\n\n===WALLIFY===\n WALLIFY\n WALLIFY:selection\nTurns walls (in the whole map, or in the defined {{sa|selection}}) completely surrounded by other walls into solid stone <tt>' '</tt>.\n\nExample:\n WALLIFY:fillrect(5,5, 40,15)\n\n===NOMAP===\n NOMAP\nInstead of {{sa|GEOMETRY}} and {{sa|MAP}}, you use this if you think that {{sa|INIT_MAP}} creates a good enough random map and you don't want to use any fixed map-parts.\n\nSee also {{sa|MAP}}\n\n===GEOMETRY===\nThis must be immediately followed by a {{sa|MAP}} definition. It tells the location of the MAP-part on the level.\nTwo types of GEOMETRY, one takes an approximation of MAP alignment, the other takes an exact coordinate or variable.\n GEOMETRY:horiz,vert\n GEOMETRY:{{sa|coord or variable}}\n*horiz is one of <tt>left</tt>, <tt>half-left</tt>, <tt>center</tt>, <tt>half-right</tt>, or <tt>right</tt>.\n*vert is one of <tt>top</tt>, <tt>center</tt>, or <tt>bottom</tt>.\n\nBoth types take an optional boolean value. If it's true, the commands following the map are restricted into that map.\n GEOMETRY:center,center,true\n\n===MAP===\n{{anchor|ENDMAP}}\n MAP\n ...\n ...\n ...\n ENDMAP\n\nThis must be immediately preceded by a {{sa|GEOMETRY}} definition.\nYou define a map-part by \"drawing\" with [[#Map characters|map characters]] between the MAP and ENDMAP. The map can be up to 21 lines high and each line can be up to 76 chars long. Each line must also be the same length. You can also use numbers inside the map, but those will be ignored; they're considered as line numbers.\n\nThe top left point of the MAP is represented by the coordinates (0,0).\n\nSee also {{sa|NOMAP}}.\n\n===MAZEWALK===\n MAZEWALK:{{sa|coord or variable}}, direction\n MAZEWALK:{{sa|coord or variable}}, direction, stocked\n MAZEWALK:{{sa|coord or variable}}, direction, stocked, '.'\nCreates a random maze, starting from the coordinates.\n\nstocked is an optional boolean value and tells whether the maze should get stocked with random loot and monsters.\nThe optional map character is used to \"draw\" the maze.\n\nMazewalk turns map grids with solid stone (<tt>' '</tt>) into floor (<tt>'.'</tt>), or the given map character. From the starting position, it checks the mapgrid in the direction given, and if it's solid stone, it will move there, and turn that place into floor. Then it will choose a random direction, jump over the nearest mapgrid in that direction, and check the next mapgrid for solid stone. If there is solid stone, mazewalk will move that direction, changing that place and the intervening mapgrid to floor. Normally the generated maze will not have any loops.\nFor example\n MAP\n TTTTTTT\n T T T T\n TTTTTTT\n T T T T\n TTTTTTT\n ENDMAP\nPointing mazewalk at that will create a small maze of trees, but unless the map (at the place where it's put into the level) is surrounded by something else than solid stone, mazewalk will get out of that MAP.  Substituting floor characters for some of the trees \"in the maze\" will make loops in the maze, which are not otherwise possible. Substituting floor characters for some of the trees at the edges of the map will make maze entrances and exits at those places.\n\nIf the total area NOT covered by all maze-parts in the level is greater than 1/10 of the total area of the level, then the mazes in the level will get stocked with maze-specific stuff, such as [[minotaur]]s, traps and items, proportionally to the amount of space not covered by MAPs.\n\nMazewalk will only work if the solid stone mapgrids in the level (where the MAP was put down) are on odd-numbered squares, both horizontally and vertically. You don't have to worry about this unless your MAP is 21 rows high or 76 columns wide, in which case you'll have to either make the MAP smaller, or move the places where the solid stone squares are.\n\nAlso, MAZEWALK will fail in certain types of MAP-parts if you use {{sa|WALLIFY}} before MAZEWALK.\n\nExample:\n MAZEWALK:(00,06),west\n\n===MONSTER===\n MONSTER:'d', {{sa|coord or variable}}\n MONSTER:\"hill giant\", {{sa|coord or variable}}\n MONSTER:('i', \"imp\"), {{sa|coord or variable}}\n MONSTER:random, {{sa|coord or variable}}\n $foo = monster:'d'\n MONSTER:$foo, (5,5)\n $arr = monster:{ 'd', 'T', 'y' }\n MONSTER:$arr[0], (5,5)\n\nThe monster definition can also take a number of optional parameters, separated by commas:\n MONSTER:'d', (4,4), \"Idefix\", peaceful, asleep, law, m_feature \"boulder\", female, invisible, cancelled, revived, avenge, stunned, confused, fleeing: 40, blinded: 20, paralyzed: 10, seen_traps: all\n*\"Idefix\" is the name of the monster.\n*Instead of <tt>peaceful</tt>, could use <tt>hostile</tt>.\n*Instead of <tt>asleep</tt>, could use <tt>awake</tt>.\n*Instead of <tt>law</tt>, could use <tt>noalign</tt>, <tt>neutral</tt>, <tt>chaos</tt>, <tt>coaligned</tt>, <tt>noncoaligned</tt>, <tt>align[0]</tt>, <tt>align[1]</tt>, <tt>align[2]</tt> or <tt>align:random</tt>.\n*<tt>m_feature</tt> tells the monster to mimic a dungeon feature, a boulder in this case. could also use <tt>m_monster</tt> or <tt>m_object</tt>.\n*<tt>female</tt>, <tt>invisible</tt>, <tt>cancelled</tt>, <tt>revived</tt>, <tt>avenge</tt>, <tt>stunned</tt> and <tt>confused</tt> set monster status bits.\n*<tt>fleeing</tt>, <tt>blinded</tt> and <tt>paralyzed</tt> set the number of turns the monster will flee, is blinded or is paralyzed, respectively. Parameter is an integer value in the range of 0-127.\n*<tt>seen_traps</tt> tells which traps the monster has seen; parameter is either <tt>all</tt> or quoted strings of trap names separated by pipe characters (eg. <tt>\"falling boulder\"</tt>, or <tt>\"arrow\"|\"dart\"|\"bear\"</tt>)\n\n===OBJECT===\n OBJECT:\"elven cloak\", (5,5)\n OBJECT:'?', (5,5)\n OBJECT:('/', \"wishing\"), (5,5)\n OBJECT:random, (5,5)\n $foo = object:'/'\n OBJECT:$foo, (5,5)\n $arr = object:{ '/', '?', '!' }\n OBJECT:$arr[2], (5,5)\n\nThe object definition can also take a number of optional parameters, separated by commas:\n OBJECT:'?', (5,5), blessed, montype:('d', \"little dog\"), +4, name:\"foobar\", quantity: 20, buried, invisible, lit, greased, locked, trapped, eroded:2, erodeproof, recharged:3\n*<tt>blessed</tt> can be replaced with <tt>uncursed</tt> or <tt>cursed</tt>.\n*<tt>montype</tt> tells eg. what monster statue it is.\n*any integer value sets the plusses or minuses for eg. armor or weapon.\n*<tt>name</tt> gives the item a name. can also take a variable of string type as a parameter.\n*<tt>quantity</tt> set the number of items.\n*<tt>buried</tt>, <tt>trapped</tt>, <tt>invisible</tt>, <tt>greased</tt> set object states.\n*<tt>lit</tt> or <tt>unlit</tt> for lamps.\n*<tt>eroded</tt> sets the erosion. Don't use with <tt>erodeproof</tt>.\n*<tt>locked</tt> (or <tt>broken</tt>) set the lock state for lockable objects.\n*<tt>recharged</tt> sets the number of times eg. a wand has been recharged.\n\n===CONTAINER===\n CONTAINER:\"large chest\", (5,5) { {{sa|Level statements}} }\nTakes the same parameters as {{sa|OBJECT}}, but allows defining the contents inside the curly braces.\nFor the contents, use a subset of level statements: OBJECTs, CONTAINERs and flow control commands; anything else causes undefined behaviour.\n\n==Flow control==\n\nThe following commands affect the order in which commands are executed.\n\n===SWITCH===\n{{anchor|CASE|DEFAULT}}\n SWITCH [ integer_or_variable ] {\n   CASE integer:\n      {{sa|Level statements}}\n   DEFAULT:\n      {{sa|Level statements}}\n } \nThe SWITCH behaviour is modeled after the C switch-statement.\nUsing the {{sa|BREAK}} keyword is allowed; without it the execution falls through to the next case.\n\nIf the integer value in the switch is a static number, it is automatically wrapped in rnd(). If a dice-notation or a variable is used, then the value is used as-is. For example the statements below are functionally the same:\n SWITCH [ 3 ] { ... }\n SWITCH [ rnd(3) ] { ... }\n SWITCH [ 1d3 - 1 ] { ... }\n\n===FOR===\n FOR $x = math_expr TO math_expr { {{sa|Level statements}} }\nExecutes the level statements as many times as it takes to increase (or decrease) the variable from the first integer value to the second. {{sa|BREAK}} is allowed within the loop.\n\nExample:\n FOR $x = 2 TO 40 {\n   FOR $y = 2+1 TO 2*10 {\n     OBJECT:random, coord($x, $y)\n   }\n }\n\n===LOOP===\n LOOP [ integer_or_variable ] { {{sa|Level statements}} }\nExecutes the level statements as many times (but at least once) as the value inside square brackets says. If an integer variable is used, the value of the variable does not change. {{sa|BREAK}} is allowed within the loop.\n\nExample:\n LOOP [ 10 ] { OBJECT:random,random }\n\n===IF===\n{{anchor|ELSE}}\n IF [ percentage ] { {{sa|Level statements}} }\n IF [ math_expression_or_variable compare_operator math_expression_or_variable ] { {{sa|Level statements}} }\n IF [ math_expression_or_variable ] { {{sa|Level statements}} }\nExecute the level statements, but only if matching some condition. You can also add an optional <tt>ELSE { {{sa|Level statements}} }</tt> block.\nIn the third form the statements will be executed if the math expression or variable is non-zero. Using {{sa|BREAK}} is not allowed within the statements, unless the IF-block is inside a command where BREAK is allowed. In that case the BREAK will make the execution jump to the end of the containing command.\n\nThere's also a degenerate case <tt>[50%]: one_level_statement</tt>.\n\nFor example:\n IF [ 25% ] { {{sa|Level statements}} }\n IF [ 25% ] { {{sa|Level statements}} } ELSE { {{sa|Level statements}} }\n IF [ 2*2 == 4 ] { {{sa|Level statements}} }\n IF [ 0 ] { {{sa|Level statements}} }\n [50%]: MONSTER: random, random\n\n===EXIT===\n EXIT\nImmediately finishes the level script.\n\n===BREAK===\n BREAK\nThe BREAK keyword will make the script skip the rest of the statement block. Breaks can be used within {{sa|LOOP}}s, {{sa|FOR}}-loops, {{sa|SWITCH}}es,\n{{sa|ROOM}} and {{sa|SUBROOM}} contents, {{sa|CONTAINER}} contents, {{sa|MONSTER}} inventories, and {{sa|REGION}} contents.\n\nExample:\n FOR $x = 5 TO 60 {\n  OBJECT:'$',coord($x,10)\n  IF [ $x > 30 ] { BREAK }\n }\n\n==Variables and Types==\n\n===variable===\nVariable names start with a dollar sign, and can contain any alphanumeric characters. Variables must be defined before they can be used.\nSome variable definitions must have the variable type: <tt>terrain</tt>, <tt>monster</tt>, <tt>object</tt> and <tt>{{sa|selection}}</tt>.\n\n $foo = 123\n $foo = \"any string\"\n $foo = {{sa|mathematical expression}}\n $bar = $foo\n $foo = terrain:'T'\n $foo = terrain:('.', lit)\n $foo = monster:'d'\n $foo = monster:\"little dog\"\n $foo = monster:('d', \"little dog\")\n $foo = monster:random\n $foo = object:'/'\n $foo = object:\"elven cloak\"\n $foo = object:('?', \"identify\")\n $foo = (40, 12)\n $foo = (5,5, 40,12)\n $foo = selection:{{sa|selection}}\n\n===array variable===\n $foo = { 1, 2, 3, 4, 5 }\n $foo = { \"string a\", \"bcdef\", \"and something\" }\n $foo = { (1,2), (40,12) }\n $foo = { (5,5,40,12), (1,1,20,18), (40,10,50,12) }\n $foo = terrain: { 'T', 'L', ('.', unlit) }\n $foo = monster: { 'n', \"newt\", ('d', \"little dog\") }\n $foo = object: { '/', \"elven cloak\", ('?', \"identify\") }\n\nTo access one element of an array variable, use eg. <tt>$foo[0]</tt> to access variable $foo's first element.\n\nArray length can be accessed with the <tt>.length</tt> method:\n $foo = { 1, 2, 4 }\n MESSAGE: \"length is \" . string($foo.length)\n\n===coord or variable===\nThis parameter can be either a pair of coordinates, or a variable of the type coord. For example: \n GRAVE: (10,5)\n $foo = (4,10)\n $bar = { (4,10), (3,12), (50,2) }\n GRAVE: $foo\n GRAVE: $bar[1]\n\n GRAVE: rndcoord({{sa|selection}})\nA random pair of coordinates selected from within the {{sa|selection}}\n\nThe x and y coordinates can be accessed (but not set) separately:\n $foo = (4, 10)\n IF [ $foo.x == 4 ] {\n   MESSAGE: \" y = \" . string($foo.y)\n }\n\n===strings===\n $foo = \"This is a string\"\n MESSAGE: $foo . \" and another\"\nStrings are any characters surrounded by double quotes. Strings can be concatenated with full stop. If you wish to concatenate an integer value, it must be first converted to string with the {{sa|Predefined_functions_and_constants|<tt>string()</tt> function}}.\n\n===region or variable===\nThis parameter can be either a region, or a variable of the region type. For example:\n NON_DIGGABLE:(5,5, 40,12)\n $foo = (5,5, 40,12)\n NON_DIGGABLE:$foo\n\n===map character or variable===\nThis parameter can be either a {{sa|Map characters|map character}}, a map character and lightstate combination, or a variable of terrain type:\n TERRAIN:(5,5), 'L'\n TERRAIN:(6,6), ('.', unlit)\n $lava = terrain:'L'\n TERRAIN:(7,7), $lava\n $floor = terrain:('.', lit)\n TERRAIN:(8,8), $floor\n\n===mathematical expression===\n\nA mathematical expression can consist of plain integer values, [[D-notation]]s, variables of integer type, and the operands '+', '-', '*', '/', and '%'. For example: <tt>1 + 2</tt>, or <tt>3d6 * (2 + 3)</tt>.\nNegative integer values should be enclosed inside parenthesis: <tt>(-1) * (-3)</tt>\n\n===selection===\nA selection is a collection of points, represented by map coordinates. The <tt>selection</tt> keyword is only needed when defining a variable of selection type.\n\nSelections can be added together with the '&' operator, for example <tt>rect(5,5, 50,18) & rect(10,2, 40,13)</tt>:\n $foo = selection:rect(5,5, 50,18) & rect(10,2, 40,13)\n\n====coordinate====\n $foo = selection:{{sa|coord or variable}}\nThe selection contains a single point on the map.\n\nExample:\n $foo = selection:(55,12)\n $bar = (4,10)\n $baz = selection:$bar\n\n====rectangle====\n $foo = selection:rect {{sa|region or variable}}\nThe selection includes the border of the rectangle.\n\nExample:\n $foo = selection: rect(5,3, 72,18)\n\n====filled rectangle====\n $foo = selection:fillrect {{sa|region or variable}}\nThe selection contains a rectangular area.\n\nExample:\n $foo = selection: fillrect(5,3, 72,18)\n\n====line====\n $foo = selection:line {{sa|coord or variable}}-{{sa|coord or variable}}\nThe selection contains a straight line between the points.\n\nExample:\n $foo = selection: line(1,1)-(76,21)\n\n====random line====\n $foo = selection:randline {{sa|coord or variable}}-{{sa|coord or variable}},{{sa|mathematical expression}}\nThe selection contains a meandering line between the points. The integer value is the \"roughness\" of the line.\n\nExample:\n $foo = selection: randline(1,1)-(76,21), 4\n\n====grow====\n $foo = selection:grow ({{sa|selection}})\n $foo = selection:grow ({{sa|list of directions}}, {{sa|selection}})\nGrow a selection by adding the surrounding map points to it. The second form can take a list of directions, and the growth will pick points from those directions to grow into.\n\nExample:\n $foo = selection:grow(line(1,1)-(76,21))\n $bar = selection:grow(north|south, rect(5,3, 72,18))\n\n====filter====\n $foo = selection:filter (50%, {{sa|selection}})\n $foo = selection:filter ({{sa|selection}}, {{sa|selection}})\n $foo = selection:filter ({{sa|map character or variable}}, {{sa|selection}})\nRemove points from the selection. The first form picks (at random) 50% of the points in the selection, the second chooses points that are common to both selections, third one leaves only places that match the map character.\n\nExample:\n $foo = selection: filter(20%, fillrect(5,3, 72,18))\n $foo = selection: filter('L', fillrect(1,1, 76,21))\n\n====floodfill====\n $foo = selection:floodfill {{sa|coord or variable}}\n\"Floodfill\" from the point, adding all connected points with the same terrain type to the selection.\n\n====circle====\n $foo = selection:circle ({{sa|coord or variable}}, {{sa|mathematical expression}})\n $foo = selection:circle ({{sa|coord or variable}}, {{sa|mathematical expression}}, filled)\n $foo = selection:circle ({{sa|coord or variable}}, {{sa|mathematical expression}}, unfilled)\nCircle shape. Parameters are center point, radius, and optional <tt>filled</tt> or <tt>unfilled</tt>.\nCreates an unfilled circle by default.\n\nFor example:\n $foo = selection: circle((5,10), 3) &\n                   circle((15,10), 3, unfilled) &\n                   circle((25,10), 3, filled)\n TERRAIN:$foo, 'L'\n\n====ellipse====\n $foo = selection:ellipse ({{sa|coord or variable}}, {{sa|mathematical expression}}, {{sa|mathematical expression}})\n $foo = selection:ellipse ({{sa|coord or variable}}, {{sa|mathematical expression}}, {{sa|mathematical expression}}, filled)\n $foo = selection:ellipse ({{sa|coord or variable}}, {{sa|mathematical expression}}, {{sa|mathematical expression}}, unfilled)\nEllipse shape. Parameters are center point, horizontal and vertical radius, and optional <tt>filled</tt> or <tt>unfilled</tt>.\nCreates an unfilled ellipse by default.\n\nFor example:\n $foo = selection: ellipse((35,10), 3,5) &\n                   ellipse((45,10), 3,5, unfilled) &\n                   ellipse((55,10), 3,5, filled)\n TERRAIN:$foo, 'L'\n\n====gradient====\n $foo = selection: gradient(grad_type, (min_dist - max_dist [, limited]), coord [, coord2 ])\nSelects random points with distance from coord between min_dist and max_dist, with higher probability closer to max_dist.\nNo points closer than min_dist will be included. All points at max_dist will be included.\nUsing the optional \"limited\" will make the selection stop at max_dist.\nLeaving the \"limited\" out, or using \"unlimited\", will select all points outside the max_dist radius.\n\ngrad_type can be one of \"radial\" or \"square\", and affects the distance calculation from the center.\n\nIf the optional second pair of coordinates is given, the \"center\" of the area is a line segment between the two pairs of coordinates.\n\nFor example:\n $r = selection: gradient(radial, (1 - 9, limited), (11,10))\n TERRAIN:$r,'L'\n\n====complement====\n $foo = selection: complement({{sa|selection}})\nReturns a bitwise not, or complement, of the selection.\n\n====rndcoord====\nTo select a random pair of coordinates from a selection, use <tt>rndcoord({{sa|selection}})</tt>:\n $bar = rndcoord(rect(5,5, 50,18) & rect(10,2, 40,13))\n\n==Predefined functions and constants==\nThese are internal functions from the game's code that are available during level creation:\n\n{|class=\"prettytable striped\"\n!name\n!return value\n!\n|-\n|time.discordian_holiday\n|integer, 0 or 1\n|\n|-\n|time.pirateday\n|integer, 0 or 1\n|\n|-\n|time.aprilfoolsday\n|integer, 0 or 1\n|\n|-\n|time.piday\n|integer, 0 or 1\n|\n|-\n|time.towelday\n|integer, 0 or 1\n|\n|-\n|time.midnight\n|integer, 0 or 1\n|\n|-\n|time.night\n|integer, 0 or 1\n|\n|-\n|time.friday_13th\n|integer, 0 or 1\n|\n|-\n|time.phase_of_the_moon\n|integer, 0..7, where 0=new, 4=full\n|\n|-\n|time.yyyymmdd\n|integer\n|Current date in the YYYYMMDD format, eg. 20120418\n|-\n|level.depth\n|integer\n|Returns the level depth from surface.\n|-\n|level.difficulty\n|integer\n|\n|-\n|level.obj_at(obj, coord)\n|integer, 0 or 1\n|Return 1 if the specified object is present at the coordinates.\n|-\n|level.mon_at(monster, coord)\n|integer, 0 or 1\n|Return 1 if there's a monster of certain class, or a certain type of monster, or any monster at the coordinates. <tt>level.mon_at(monster:'h', (5,5))</tt> matches any monster of class {{white|h}}, <tt>level.mon_at(monster:('h', \"hobbit\"), (5,5))</tt> matches only a hobbit, <tt>level.mon_at(monster:random, (5,5))</tt> matches any monster.\n|-\n|hero.name\n|string\n|\n|-\n|hero.role\n|string, eg. \"Priest\"\n|\n|-\n|hero.race\n|string, eg. \"human\"\n|\n|-\n|hero.carrying(obj)\n|integer, 0 or 1\n|Return 1 if player has object in main inventory.\n|-\n|string(int)\n|string\n|Convert an integer to string. Alias: <tt>str()</tt>\n|-\n|int(str)\n|integer\n|Convert a string to integer. Alias: <tt>integer()</tt>\n|-\n|coord(int, int)\n|coordinates\n|Convert two integer values into a pair of map coordinates.\n|-\n|region(int, int, int, int)\n|region\n|Convert four integer values into a region\n|-\n|rnd(int)\n|integer\n|Returns a random integer number between 0 and (int-1). This is equal to the {{sourceref|rn2}}-function in the sourcecode.\n|-\n|room.width\n|integer\n|Returns the width of the current (SUB)ROOM, minus the outer walls. If used outside a ROOM context, returns 0.\n|-\n|room.height\n|integer\n|Returns the height of the current (SUB)ROOM, minus the outer walls. If used outside a ROOM context, returns 0.\n|-\n|room.x\n|integer\n|Returns the x coordinate of the top-left corner of the current (SUB)ROOM. If used outside a ROOM context, returns 0.\n|-\n|room.y\n|integer\n|Returns the y coordinate of the top-left corner of the current (SUB)ROOM. If used outside a ROOM context, returns 0.\n|}\n\nFor example:\n IF [ level.obj_at(obj:\"pick-axe\", coord(2 + 3, 5)) ] {\n  MESSAGE: \"Today is \" . string(time.yyyymmdd)\n }\n\n===Map characters===\n{{anchor|map character}}\n{|class=\"prettytable striped\"\n!character\n![[dungeon feature]]\n|-\n|<tt>' '</tt>\n|solid wall\n|-\n|<tt>'#'</tt>\n|corridor\n|-\n|<tt>'.'</tt>\n|room floor (Unlit, unless lit with {{sa|REGION}}-command)\n|-\n|<tt>'-'</tt>\n|horizontal wall\n|-\n|<tt>'&#124;'</tt>\n|vertical wall\n|-\n|<tt>'+'</tt>\n|door (State is defined with {{sa|DOOR}} -command)\n|-\n|<tt>'A'</tt>\n|air\n|-\n|<tt>'B'</tt>\n|crosswall / boundary symbol hack (See {{sa|REGION}})\n|-\n|<tt>'C'</tt>\n|cloud\n|-\n|<tt>'S'</tt>\n|secret door\n|-\n|<tt>'H'</tt>\n|secret corridor\n|-\n|<tt>'{'</tt>\n|fountain\n|-\n|<tt>'\\'</tt>\n|throne\n|-\n|<tt>'K'</tt>\n|sink\n|-\n|<tt>'&#125;'</tt>\n|moat\n|-\n|<tt>'P'</tt>\n|pool of water\n|-\n|<tt>'L'</tt>\n|lava pool\n|-\n|<tt>'I'</tt>\n|ice\n|-\n|<tt>'W'</tt>\n|water\n|-\n|<tt>'T'</tt>\n|tree\n|-\n|<tt>'t'</tt>\n|dead tree\n|-\n|<tt>'F'</tt>\n|iron bars\n|-\n|<tt>'M'</tt>\n|muddy swamp\n|-\n|<tt>'Y'</tt>\n|crystal ice wall\n|-\n|<tt>'U'</tt>\n|ice wall\n|-\n|<tt>'x'</tt>\n|\"transparent\" map character\n|}\n\n===Trap names===\n\"anti magic\", \"arrow\", \"bear\", \"board\", \"dart\", \"falling rock\", \"fire\", \"hole\", \"land mine\", \"level teleport\", \"magic portal\", \"magic\", \"pit\", \"polymorph\", \"rolling boulder\", \"rust\", \"sleep gas\", \"spiked pit\", \"statue\", \"teleport\", \"trap door\", \"web\", \"cold\"\n\n===Room types===\n\"ordinary\", \"throne\", \"swamp\", \"vault\", \"beehive\", \"morgue\", \"barracks\", \"zoo\", \"delphi\", \"temple\", \"lemurepit\", \"anthole\", \"cocknest\", \"garden\", \"leprehall\", \"shop\", \"armor shop\", \"scroll shop\", \"potion shop\", \"weapon shop\", \"food shop\", \"ring shop\", \"wand shop\", \"tool shop\", \"book shop\", \"tin shop\", \"music shop\", \"candle shop\", \"pet shop\", \"black market\"\n{{variant-343}}\n[[Category:Annotations]]\n[[Category:UnNetHack]]"}
{"title":"Tileset/tile2360.py","url":"https://nethackwiki.com/wiki/Tileset/tile2360.py","type":"markdown","data":"*This page contains a program that is meant to be downloaded and run on the user's computer. Editing is limited to logged-in users to discourage introduction of malicious code.*\n\nHere is a [Python](http://en.wikipedia.org/wiki/Python_\\(programming_language\\) \"wikipedia:Python (programming language)\") program that will take a [NetHack 3.4.3](/wiki/NetHack_3.4.3 \"NetHack 3.4.3\") [tileset](/wiki/Tileset \"Tileset\") in BMP format and convert it to a form usable with 3.6.0.\n\nIf you have a [Mac](/wiki/Mac \"Mac\") or [Linux](/wiki/Linux \"Linux\"), you probably already have Python (or can install it with your package manager). Windows users can run this with [ActiveState Python](https://www.activestate.com/activepython).\n\nUse `./tile2360.py -h` for a complete list of options. Most tilesets convert without needing any options; the program assumes that the image contains 40 tiles per row and that tiles are square, unless the tile size is given. The output file name just adds \"-360\" before the \".bmp\" suffix, unless the command line specifies a different name.\n\nNew tiles are created as follows:\n\n- Monster tiles are converted to grayscale to form statue tiles. To give better results with tilesets that do not use black backgrounds, the tile is compared to the [floor](/wiki/Floor \"Floor\") tile; a pixel that is different from the floor is converted.\n\n* The number of [scroll appearances](/wiki/Scroll_origins \"Scroll origins\") increases from 25 to 41; tile2360.py repeats the first 16 scroll tiles to make 41.\n\n- The tile for the darkened portion of a [floor](/wiki/Floor \"Floor\") is created by halving the luminance of the existing floor tile.\n\n* Eight other tiles are filled in with a placeholder, which appears as a solid red tile with a black X through it. This is for use by tileset authors, who can then fill in the missing tiles. The missing tiles are, in order:\n\n  - [glob](/wiki/Glob \"Glob\") of [gray ooze](/wiki/Gray_ooze \"Gray ooze\"), [brown pudding](/wiki/Brown_pudding \"Brown pudding\"), [green slime](/wiki/Green_slime \"Green slime\") and [black pudding](/wiki/Black_pudding \"Black pudding\"), in that order; this is a block of four missing tiles appearing after the [meat ring](/wiki/Meat_ring \"Meat ring\")\n  - [novel](/wiki/Novel \"Novel\") -- this is a single missing tile appearing after all the [spellbooks](/wiki/Spellbook \"Spellbook\") except the [Book of the Dead](/wiki/Book_of_the_Dead \"Book of the Dead\")\n  - The [vibrating square](/wiki/Vibrating_square \"Vibrating square\") -- this is a single missing tile appearing after all the [traps](/wiki/Trap \"Trap\")\n  - [Poison cloud](/wiki/Poison_cloud \"Poison cloud\") and [valid position](/index.php?title=Valid_position\\&action=edit\\&redlink=1 \"Valid position (page does not exist)\") -- these are two missing tiles appearing after the sparkles\n\n```\n#!/usr/bin/env python\n# tile2360.py -- convert NetHack 3.4.3 tile sets most of the way to 3.6.0\n#\n# Copyright (c) 2015, Ray Chason\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nimport argparse\nimport os.path\nimport struct\nimport sys\n\n# A Bitmap image, with some extra methods for tile mapping\nclass Bitmap(object):\n    def __init__(self, inpname):\n        # TODO: This assumes the BITMAPINFOHEADER structure. Add support for\n        # other bitmap formats.\n\n        # Read the header\n        fp = open(inpname, \"rb\")\n        header = fp.read(54)\n\n        (magic,\n        self.bmp_size,\n        reserved,\n        self.image_offset,\n        self.header_size,\n        self.width,\n        self.height,\n        self.num_planes,\n        self.bits_per_pixel,\n        self.compression,\n        self.image_size,\n        self.horiz_res,\n        self.vert_res,\n        self.num_colors,\n        self.num_important_colors) = struct.unpack(\"<2s6L2H6L\", header)\n\n        # Check various header fields for unsupported stuff\n        if magic != \"BM\":\n            raise RuntimeError, \"%s is not in .BMP format\" % inpname\n\n        if self.header_size != 40:\n            raise RuntimeError, \"%s has an unsupported header type (%d)\" % \\\n                    (inpname, self.header_size)\n\n        if self.num_planes != 1:\n            raise RuntimeError, \"%s has %d planes, not supported\" % \\\n                    (inpname, self.num_planes)\n\n        if self.compression != 0:\n            raise RuntimeError, \"%s is compressed (%d), and not supported\" % \\\n                    (inpname, self.compression)\n\n        if self.bits_per_pixel not in (1, 2, 4, 8, 24, 32):\n            raise RuntimeError, \"%s has %d bits per pixel, not supported\" % \\\n                    (inpname, self.bits_per_pixel)\n\n        # Read the palette\n        if self.bits_per_pixel <= 8:\n            if self.num_colors == 0:\n                self.num_colors = 1 << self.bits_per_pixel\n            self.palette = [ None ] * self.num_colors\n            for i in xrange(0, self.num_colors):\n                b, g, r, z = struct.unpack(\"<4B\", fp.read(4))\n                self.palette[i] = (b, g, r)\n        else:\n            self.palette = None\n\n        # Read the pixels\n        fp.seek(self.image_offset)\n        self.image = [ None ] * self.height\n        row_size = ((self.bits_per_pixel * self.width + 31) / 32) * 4\n        if self.bits_per_pixel <= 8:\n            # Palettized image; convert to 24 bit\n            pixels_per_byte = 8 / self.bits_per_pixel\n            mask = (1 << self.bits_per_pixel) - 1\n            for y in xrange(0, self.height):\n                row_bytes = fp.read(row_size)\n                row_bytes = map(\n                        lambda x : struct.unpack('<1B', x)[0],\n                        row_bytes)\n                row = [ None ] * self.width\n                self.image[self.height - 1 - y] = row\n                shift = 8\n                for x in xrange(0, self.width):\n                    if shift <= 0:\n                        shift = 8\n                    shift -= self.bits_per_pixel\n                    x_hi = x / pixels_per_byte\n                    i = (row_bytes[x_hi] >> shift) & mask\n                    row[x] = self.palette[i]\n        else:\n            # 24 or 32 bits per pixel\n            bytes_per_pixel = self.bits_per_pixel / 8\n            for y in xrange(0, self.height):\n                row_bytes = fp.read(row_size)\n                row_bytes = map(\n                        lambda x : struct.unpack('<1B', x)[0],\n                        row_bytes)\n                row = [ None ] * self.width\n                self.image[self.height - 1 - y] = row\n                for x in xrange(0, self.width):\n                    x2 = x * bytes_per_pixel\n                    row[x] = tuple(row_bytes[x2 : x2 + 3])\n        self.bits_per_pixel = 24\n\n        # These are yet unknown\n        self.tile_width = None\n        self.tile_height = None\n        self.tiles_per_row = None\n        self.tile_rows = None\n        self.tiles = None\n\n    # Split the image into tiles\n    def split(self, tile_width, tile_height):\n        self.tile_width = tile_width\n        self.tile_height = tile_height\n        self.tiles_per_row = self.width / tile_width\n        self.tile_rows = self.height / tile_height\n        num_tiles = self.tiles_per_row * self.tile_rows\n        self.tiles = [ None ] * num_tiles\n\n        for t in xrange(0, num_tiles):\n            tile = [ None ] * tile_height\n            self.tiles[t] = tile\n            t_col = t % self.tiles_per_row\n            t_row = t / self.tiles_per_row\n            t_x = t_col * tile_width\n            t_y = t_row * tile_height\n            for y in xrange(0, tile_height):\n                tile[y] = self.image[t_y + y][t_x : t_x + tile_width]\n\n    # Rearrange the tiles to match the NetHack 3.6.0 order\n    def remap(self, no_statues):\n        # If tile_map[X] = Y, the tile in position X for 3.6.0 comes from\n        # position Y for 3.4.3. Negative numbers indicate tiles that cannot\n        # be directly mapped.\n        tile_map = [\n            # Monsters\n               0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n              10,   11,   12,   13,   14,   15,   16,\n            # dingo (19) placed before dog (17)\n              19,   17,   18,\n              20,   21,\n            # winter wolf cub (23) placed before warg (22)\n              23,   22,\n              24,   25,   26,   27,   28,   29,\n              30,   31,   32,   33,   34,   35,   36,   37,   38,   39,\n              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,\n              50,   51,   52,   53,   54,   55,   56,   57,   58,   59,\n              60,   61,   62,   63,   64,   65,   66,   67,   68,   69,\n              70,   71,   72,   73,   74,   75,   76,   77,   78,   79,\n              80,   81,   82,   83,   84,   85,   86,   87,   88,   89,\n              90,   91,   92,   93,   94,   95,   96,   97,   98,   99,\n             100,\n            # pony (104) placed before white unicorn (101)\n             104,  101,  102,  103,\n             105,  106,  107,  108,  109,\n             110,  111,  112,  113,  114,  115,  116,  117,  118,  119,\n             120,  121,  122,  123,  124,  125,  126,  127,  128,  129,\n             130,  131,  132,  133,  134,  135,  136,  137,  138,  139,\n             140,  141,  142,  143,  144,  145,  146,  147,  148,  149,\n             150,  151,  152,  153,  154,  155,  156,  157,  158,  159,\n             160,  161,  162,  163,  164,  165,  166,  167,  168,  169,\n             170,  171,  172,  173,  174,\n            # ettin (176) placed before storm giant (175)\n             176,  175,\n             177,  178,  179,\n             180,  181,  182,  183,  184,  185,  186,  187,  188,  189,\n             190,  191,  192,  193,  194,  195,  196,  197,  198,  199,\n             200,  201,  202,  203,  204,  205,  206,  207,  208,  209,\n            # green slime (211) placed before black pudding (210)\n             211,  210,\n             212,  213,  214,  215,  216,  217,\n            # python (219) placed before pit viper (218)\n             219,  218,\n             220,  221,  222,  223,  224,  225,  226,  227,  228,  229,\n             230,  231,  232,  233,  234,  235,  236,  237,  238,  239,\n             240,  241,  242,  243,  244,  245,  246,  247,\n            # ghoul (249) placed before giant zombie (248)\n             249,  248,\n             250,  251,  252,  253,  254,  255,  256,  257,  258,  259,\n             260,  261,  262,  263,  264,  265,  266,  267,  268,  269,\n             270,  271,  272,\n            # nurse (273) placed after sergeant (281)\n             274,  275,  276,  277,  278,  279,  280,  281,  273,\n             282,  283,  284,  285,  286,  287,  288,  289,\n             290,  291,  292,\n            # succubus (294) placed before horned devil (293)\n             294,  293,\n             295,  296,  297,  298,  299,\n             300,  301,  302,  303,  304,\n            # sandestin (319) placed before balrog (305)\n             319,  305,  306,  307,  308,  309,  310,  311,  312,  313,\n             314,  315,  316,  317,  318,\n             320,  321,  322,  323,  324,  325,  326,  327,  328,  329,\n             330,  331,  332,  333,  334,  335,  336,  337,  338,  339,\n             340,  341,  342,  343,  344,  345,  346,  347,  348,  349,\n             350,  351,  352,  353,  354,  355,  356,  357,  358,  359,\n             360,  361,  362,  363,  364,  365,  366,  367,  368,  369,\n             370,  371,  372,  373,  374,  375,  376,  377,  378,  379,\n             380,  381,  382,  383,  384,  385,  386,  387,  388,  389,\n             390,  391,  392,  393,\n\n            # Objects:\n                                     394,  395,  396,  397,  398,  399,\n             400,  401,  402,  403,  404,  405,  406,  407,  408,  409,\n             410,  411,  412,  413,  414,  415,  416,  417,  418,  419,\n             420,  421,  422,  423,  424,  425,  426,  427,  428,  429,\n             430,  431,  432,  433,  434,  435,  436,  437,  438,  439,\n             440,  441,  442,  443,  444,  445,  446,  447,  448,  449,\n             450,  451,  452,  453,  454,  455,  456,  457,  458,  459,\n             460,  461,  462,  463,  464,  465,  466,  467,  468,  469,\n             470,  471,  472,  473,  474,  475,  476,  477,  478,  479,\n             480,  481,  482,  483,  484,  485,  486,  487,  488,  489,\n             490,  491,  492,  493,  494,  495,  496,  497,  498,  499,\n             500,  501,  502,  503,  504,  505,  506,  507,  508,  509,\n             510,  511,  512,  513,  514,  515,  516,  517,  518,  519,\n             520,  521,  522,  523,  524,  525,  526,  527,  528,  529,\n             530,  531,  532,  533,  534,  535,  536,  537,  538,  539,\n             540,  541,  542,  543,  544,  545,  546,  547,  548,  549,\n             550,  551,  552,  553,  554,  555,  556,  557,  558,  559,\n             560,  561,  562,  563,  564,  565,  566,  567,  568,  569,\n             570,  571,  572,  573,  574,  575,  576,  577,  578,  579,\n             580,  581,  582,  583,  584,  585,  586,  587,  588,  589,\n             590,  591,  592,  593,  594,  595,  596,  597,  598,  599,\n             600,  601,  602,  603,  604,  605,  606,  607,  608,  609,\n             610,  611,  612,  613,  614,  615,  616,  617,  618,  619,\n             620,  621,  622,  623,  624,  625,  626,  627,  628,  629,\n             630,  631,  632,  633,  634,  635,  636,  637,  638,  639,\n             640,  641,\n              -1, # glob of gray ooze\n              -1, # glob of brown pudding\n              -1, # glob of green slime\n              -1, # glob of black pudding\n             642,  643,  644,  645,  646,  647,  648,  649,\n             650,  651,  652,  653,  654,  655,  656,  657,  658,  659,\n             660,  661,  662,  663,  664,  665,  666,  667,  668,  669,\n             670,  671,  672,  673,  674,  675,  676,  677,  678,  679,\n             680,  681,  682,  683,  684,  685,  686,  687,  688,  689,\n            # Random scroll appearances begin here\n             690,  691,  692,  693,  694,  695,  696,  697,  698,  699,\n             700,  701,  702,  703,  704,  705,  706,  707,  708,  709,\n             710,  711,  712,  713,  714,\n            # New random scroll appearances. Repeat the first 16 above\n             690,  691,  692,  693,  694,  695,  696,  697,  698,  699,\n             700,  701,  702,  703,  704,  705,\n            # Random scroll appearances end here\n             715,  716,  717,  718,  719,\n             720,  721,  722,  723,  724,  725,  726,  727,  728,  729,\n             730,  731,  732,  733,  734,  735,  736,  737,  738,  739,\n             740,  741,  742,  743,  744,  745,  746,  747,  748,  749,\n             750,  751,  752,  753,  754,  755,  756,  757,\n              -1, # Novel\n             758,  759,\n             760,  761,  762,  763,  764,  765,  766,  767,  768,  769,\n             770,  771,  772,  773,  774,  775,  776,  777,  778,  779,\n             780,  781,  782,  783,  784,  785,  786,  787,  788,  789,\n             790,  791,  792,  793,  794,  795,  796,  797,  798,  799,\n             800,  801,  802,  803,  804,  805,  806,  807,  808,  809,\n             810,  811,  812,  813,  814,  815,  816,  817,  818,  819,\n             820,  821,  822,  823,  824,  825,  826,  827,  828,\n\n            # Dungeon features, missiles, explosions, etc.\n             829,\n             830,  831,  832,  833,  834,  835,  836,  837,  838,  839,\n             840,  841,  842,  843,  844,  845,  846,  847,  848,\n              -2, # darkened part of a room\n             849,\n             850,  851,  852,  853,  854,  855,  856,  857,  858,  859,\n             860,  861,  862,  863,  864,  865,  866,  867,  868,  869,\n             870,  871,  872,  873,  874,  875,  876,  877,  878,  879,\n             880,  881,  882,  883,  884,  885,  886,  887,  888,  889,\n             890,  891,\n              -1, # vibrating square\n             892,  893,  894,  895,  896,  897,  898,  899,\n             900,  901,  902,  903,\n              -1, # poison cloud\n              -1, # valid position\n             904,  905,  906,  907,  908,  909,\n             910,  911,  912,  913,  914,  915,  916,  917,  918,  919,\n             920,  921,  922,  923,  924,  925,  926,  927,  928,  929,\n             930,  931,  932,  933,  934,  935,  936,  937,  938,  939,\n             940,  941,  942,  943,  944,  945,  946,  947,  948,  949,\n             950,  951,  952,  953,  954,  955,  956,  957,  958,  959,\n             960,  961,  962,  963,  964,  965,  966,  967,  968,  969,\n             970,  971,  972,  973,  974,  975,  976,  977,  978,  979,\n             980,  981,  982,  983,  984,  985,  986,  987,  988,  989,\n             990,  991,  992,  993,  994,  995,  996,  997,  998,  999,\n            1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,\n            1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,\n            1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,\n            1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,\n            1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,\n            1050, 1051, 1052, 1053, 1054, 1055, 1056\n            # then repeat the monster glyphs to make statues\n        ]\n\n        # Map monsters, objects and dungeon features\n        map_size = len(tile_map)\n        new_tiles = [ None ] * (map_size + 394)\n        for i in xrange(0, map_size):\n            m = tile_map[i]\n            if m >= 0:\n                new_tiles[i] = self.tiles[m]\n            elif m == -2:\n                new_tiles[i] = self.darkenedTile(self.tiles[m - 1])\n            else:\n                new_tiles[i] = self.placeHolderTile()\n\n        # Generate statue tiles\n        if no_statues:\n            for i in xrange(0, 394):\n                new_tiles[i + map_size] = self.tiles[824] # statue\n        else:\n            for i in xrange(0, 394):\n                new_tiles[i + map_size] = self.makeStatue(\n                        new_tiles[i], self.tiles[848])\n\n        # Update the number of tile rows\n        self.tile_rows = (len(new_tiles) + self.tiles_per_row - 1) \\\n                / self.tiles_per_row\n\n        # Add some blank tiles to fill out the last row\n        num_tiles = self.tile_rows * self.tiles_per_row\n        if len(new_tiles) < num_tiles:\n            blank_tile = self.blankTile()\n            while len(new_tiles) < num_tiles:\n                new_tiles.append(blank_tile)\n        self.tiles = new_tiles\n\n    # Rejoin the tiles into a new image\n    def join(self):\n        # New image dimensions; normally width will be unchanged\n        self.width = self.tiles_per_row * self.tile_width\n        self.height = self.tile_rows * self.tile_height\n\n        # Create blank image\n        self.image = [ None ] * self.height\n        for i in xrange(0, self.height):\n            self.image[i] = []\n\n        # Add each tile to the end of its row\n        for i in xrange(0, len(self.tiles)):\n            t_row = i / self.tiles_per_row\n            t_y = t_row * self.tile_height\n            tile = self.tiles[i]\n            for j in xrange(0, self.tile_height):\n                self.image[t_y + j].extend(tile[j])\n\n    # Write the image to the output file\n    def write(self, outname):\n        fp = open(outname, \"wb\")\n\n        # Write a palettized image if possible without degradation\n        self.buildPalette()\n        palette_map = {}\n        if self.bits_per_pixel <= 8:\n            for i in xrange(0, len(self.palette)):\n                palette_map[self.palette[i]] = i\n\n        # Write the header, with placeholders for some fields\n        self.writeHeader(fp)\n\n        # Write the palette if any\n        if self.bits_per_pixel <= 8:\n            for i in xrange(0, self.num_colors):\n                fp.write(struct.pack(\"<4B\",\n                        self.palette[i][0],\n                        self.palette[i][1],\n                        self.palette[i][2],\n                        0))\n        self.image_offset = fp.tell()\n\n        # Write the pixels\n        row_size = ((self.bits_per_pixel * self.width + 31) / 32) * 4\n        if self.bits_per_pixel <= 8:\n            for y in xrange(0, self.height):\n                row = self.image[self.height - 1 - y]\n                bits = 0\n                byte = 0\n                count = 0\n                for x in xrange(0, self.width):\n                    index = palette_map[row[x]]\n                    byte = (byte << self.bits_per_pixel) | index\n                    bits += self.bits_per_pixel\n                    if bits >= 8:\n                        fp.write(struct.pack(\"<1B\", byte))\n                        byte = 0\n                        bits = 0\n                        count += 1\n                if bits != 0:\n                    byte <<= 8 - bits\n                    fp.write(struct.pack(\"<1B\", byte))\n                    count += 1\n                while count < row_size:\n                    fp.write(struct.pack(\"<1B\", 0))\n                    count += 1\n        else:\n            for y in xrange(0, self.height):\n                row = self.image[self.height - 1 - y]\n                for x in xrange(0, self.width):\n                    for byte in row[x]:\n                        fp.write(struct.pack(\"<1B\", byte))\n                count = len(row) * len(row[0])\n                while count < row_size:\n                    fp.write(struct.pack(\"<1B\", 0))\n                    count += 1\n\n        # Write the header with the correct offsets\n        self.bmp_size = fp.tell()\n        fp.seek(0)\n        self.writeHeader(fp)\n\n    # Given the existing image, build a palette if possible\n    # If there are more than 256 unique colors, build no palette; we will\n    # write a 24 bit bitmap\n    def buildPalette(self):\n        # Collect all colors present in the image\n        color_count = {}\n        for row in self.image:\n            for pixel in row:\n                if pixel not in color_count:\n                    color_count[pixel] = 0\n                color_count[pixel] += 1\n\n        # Get the list of unique colors; this will be the palette\n        palette = color_count.keys()\n        self.num_colors = len(palette)\n        if self.num_colors > 256:\n            # We will write a 24 bit bitmap\n            self.bits_per_pixel = 24\n            self.palette = None\n            return\n\n        # Arrange in descending order of occurrence\n        palette.sort(lambda a, b : color_count[b] - color_count[a])\n\n        # Set a valid bit-per-pixel count, with the fewest bits that will\n        # encompass the palette\n        self.palette = palette\n        if self.num_colors < 2:\n            self.bits_per_pixel = 1\n        elif self.num_colors < 4:\n            self.bits_per_pixel = 2\n        elif self.num_colors < 16:\n            self.bits_per_pixel = 4\n        else:\n            self.bits_per_pixel = 8\n\n    # A black tile, to fill the last row\n    def blankTile(self):\n        return [ [ (0, 0, 0) ] * self.tile_width ] * self.tile_height\n\n    # A placeholder tile, for the tiles that cannot otherwise be derived\n    # This will appear as a red block with a black X through it\n    def placeHolderTile(self):\n        red   = ( 0x00, 0x00, 0xFF )\n        black = ( 0x00, 0x00, 0x00 )\n        tile = [ None ] * self.tile_height\n        for y in xrange(0, self.tile_height):\n            tile[y] = [ red ] * self.tile_width\n        m = min(self.tile_width, self.tile_height)\n        for x in xrange(0, m):\n            tile[x][x] = black\n            tile[x][m - 1 - x] = black\n        return tile\n\n    # A tile at half brightness to the input\n    def darkenedTile(self, inptile):\n        outtile = [ None ] * len(inptile)\n        for y in xrange(0, len(outtile)):\n            inprow = inptile[y]\n            outrow = [ None ] * len(inprow)\n            outtile[y] = outrow\n            for x in xrange(0, len(inprow)):\n                inp = inprow[x]\n                out = ( inp[0] >> 1, inp[1] >> 1, inp[2] >> 1 )\n                outrow[x] = out\n        return outtile\n\n    # A statue tile.\n    # To assist in transforming tile sets that do not use a black background,\n    # this accepts the floor tile. A pixel that is different from the floor\n    # tile is considered to be foreground, and converted to grayscale.\n    def makeStatue(self, inptile, floor):\n        outtile = [ None ] * len(inptile)\n        for y in xrange(0, len(outtile)):\n            inprow = inptile[y]\n            floor_row = floor[y]\n            outrow = [ None ] * len(inprow)\n            outtile[y] = outrow\n            for x in xrange(0, len(inprow)):\n                inp = inprow[x]\n                fl = floor_row[x]\n                if inp == fl:\n                    # background\n                    out = inp\n                else:\n                    # foreground\n                    gray = (inp[0] + inp[1] + inp[2]) / 3\n                    out = ( gray, gray, gray )\n                outrow[x] = out\n        return outtile\n\n    # Write a BITMAPINFOHEADER-type header for a BMP file\n    def writeHeader(self, fp):\n        fp.write(struct.pack(\"<2s6L2H6L\",\n                \"BM\",\n                self.bmp_size,\n                0,\n                self.image_offset,\n                self.header_size,\n                self.width,\n                self.height,\n                self.num_planes,\n                self.bits_per_pixel,\n                self.compression,\n                self.image_size,\n                self.horiz_res,\n                self.vert_res,\n                self.num_colors,\n                self.num_important_colors))\n\n# Convert one bitmap file\n# inpname is the name of the file to be converted; args contains the arguments\n# as parsed by the ArgumentParser object\ndef convertBitmap(inpname, args):\n    # Collect arguments from args\n    tile_width = args.tile_width\n    tile_height = args.tile_height\n    no_statues = args.no_statues\n    outname = args.output\n\n    # Provide default output file name\n    if outname is None:\n        d, n = os.path.split(inpname)\n        dot = n.rfind('.')\n        if dot != -1:\n            n = n[:dot]\n        n += '-360.bmp'\n        outname = os.path.join(d, n)\n\n    # Read the bitmap image\n    bmp = Bitmap(inpname)\n\n    # Provide default tile dimensions\n    if tile_width is None:\n        tile_width = bmp.width / 40\n    if tile_height is None:\n        tile_height = tile_width\n\n    # Split the bitmap into tiles\n    bmp.split(tile_width, tile_height)\n\n    # Remap into 3.6.0 arrangement\n    bmp.remap(no_statues)\n\n    # Rejoin into a single image\n    bmp.join()\n\n    # Write to disk\n    bmp.write(outname)\n\n# Define command line arguments for this program\nparser = argparse.ArgumentParser(\n            formatter_class=argparse.RawDescriptionHelpFormatter,\n            description='Convert NetHack 3.4.3 tile sets for use with 3.6.0',\n            epilog=\"\"\"\nIf --tile-width is not specified, it is the image width divided by 40.\nIf --tile-height is not specified, it is equal to the tile width.\nIf --no-statues is specified, statue glyphs are copied from the 3.4.3 statue\n   glyph; if not, statue glyphs are generated by converting the monster glyphs\n   to grayscale.\n\nImages must be in BMP format.\n\nIf --output is not specified, the output file name is <input-name>-360.bmp.\nMultiple images can be converted, but only if --output is not specified.\n\"\"\")\nparser.add_argument('images', metavar='image', type=str, nargs='+',\n            help='Name of a tile set image for NetHack 3.4.3')\nparser.add_argument('--tile-width', '-x', dest='tile_width', type=int,\n            help='Width of a single tile in pixels')\nparser.add_argument('--tile-height', '-y', dest='tile_height', type=int,\n            help='Height of a single tile in pixels')\nparser.add_argument('--no-statues', '-s', dest='no_statues',\n            action='store_true',\n            help='Do not derive statues from monsters')\nparser.add_argument('--output', '-o', dest='output', type=str,\n            help='Name of output image')\n\nargs = parser.parse_args()\nif len(args.images) > 1 and args.output is not None:\n    sys.stderr.write(\"Cannot specify --output with more than one image name\\n\")\n    sys.exit(1)\n\n# Process each image in turn\nrc = 0\nfor image in args.images:\n    if not convertBitmap(image, args):\n        rc = 1\nsys.exit(rc)\n```\n","html":"<!DOCTYPE html>\n<html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>Tileset/tile2360.py - NetHack Wiki</title>\n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"Tileset/tile2360.py\",\"wgTitle\":\"Tileset/tile2360.py\",\"wgCurRevisionId\":131499,\"wgRevisionId\":131499,\"wgArticleId\":24336,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[\"Development\"],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"Tileset/tile2360.py\",\"wgRelevantArticleId\":24336,\"wgRequestId\":\"daf18744180de2b9074135cd\",\"wgCSPNonce\":false,\"wgIsProbablyEditable\":false,\"wgRelevantPageIsProbablyEditable\":false,\"wgRestrictionEdit\":[\"autoconfirmed\"],\"wgRestrictionMove\":[\"autoconfirmed\"],\"wgWikiEditorEnabledModules\":[],\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.state({\"site.styles\":\"ready\",\"noscript\":\"ready\",\"user.styles\":\"ready\",\"user\":\"ready\",\"user.options\":\"ready\",\"user.tokens\":\"loading\",\"mediawiki.legacy.shared\":\"ready\",\"mediawiki.legacy.commonPrint\":\"ready\",\"mediawiki.skinning.interface\":\"ready\",\"skins.vector.styles\":\"ready\"});mw.loader.implement(\"user.tokens@0tffind\",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\",\"csrfToken\":\"+\\\\\"});\n});RLPAGEMODULES=[\"site\",\"mediawiki.page.startup\",\"mediawiki.user\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"skins.vector.js\"];mw.loader.load(RLPAGEMODULES);});</script>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\"/>\n<script async=\"\" src=\"/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>\n<meta name=\"ResourceLoaderDynamicStyles\" content=\"\"/>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector\"/>\n<meta name=\"generator\" content=\"MediaWiki 1.32.5\"/>\n<link rel=\"image_src\" href=\"/images/6/65/Nethackwiki-logo.png\"/>\n<link rel=\"shortcut icon\" href=\"/images/6/64/Favicon.ico\"/>\n<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch_desc.php\" title=\"NetHackWiki\"/>\n<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://nethackwiki.com/api.php?action=rsd\"/>\n<link rel=\"canonical\" href=\"/wiki/Tileset/tile2360.py\"/>\n<!--[if lt IE 9]><script src=\"/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1\"></script><![endif]-->\n</head>\n<body class=\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Tileset_tile2360_py rootpage-Tileset skin-vector action-view\">\t\t<div id=\"mw-page-base\" class=\"noprint\"></div>\n\t\t<div id=\"mw-head-base\" class=\"noprint\"></div>\n\t\t<div id=\"content\" class=\"mw-body\" role=\"main\">\n\t\t\t<a id=\"top\"></a>\n\t\t\t<div class=\"mw-indicators mw-body-content\">\n</div>\n<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">Tileset/tile2360.py</h1>\t\t\t<div id=\"bodyContent\" class=\"mw-body-content\">\n\t\t\t\t<div id=\"siteSub\" class=\"noprint\">From NetHackWiki</div>\t\t\t\t<div id=\"contentSub\"><span class=\"subpages\">&lt; <a href=\"/wiki/Tileset\" title=\"Tileset\">Tileset</a></span></div>\n\t\t\t\t<div id=\"jump-to-nav\"></div>\t\t\t\t<a class=\"mw-jump-link\" href=\"#mw-head\">Jump to navigation</a>\n\t\t\t\t<a class=\"mw-jump-link\" href=\"#p-search\">Jump to search</a>\n\t\t\t\t<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div class=\"mw-parser-output\"><p><i>This page contains a program that is meant to be downloaded and run on the user's computer. Editing is limited to logged-in users to discourage introduction of malicious code.</i>\n</p><p>Here is a <a href=\"http://en.wikipedia.org/wiki/Python_(programming_language)\" class=\"extiw\" title=\"wikipedia:Python (programming language)\">Python</a> program that will take a <a href=\"/wiki/NetHack_3.4.3\" title=\"NetHack 3.4.3\">NetHack 3.4.3</a> <a href=\"/wiki/Tileset\" title=\"Tileset\">tileset</a> in BMP format and convert it to a form usable with 3.6.0.\n</p><p>If you have a <a href=\"/wiki/Mac\" title=\"Mac\">Mac</a> or <a href=\"/wiki/Linux\" title=\"Linux\">Linux</a>, you probably already have Python (or can install it with your package manager). Windows users can run this with <a class=\"external text\" href=\"https://www.activestate.com/activepython\">ActiveState Python</a>.\n</p><p>Use <code>./tile2360.py -h</code> for a complete list of options. Most tilesets convert without needing any options; the program assumes that the image contains 40 tiles per row and that tiles are square, unless the tile size is given. The output file name just adds \"-360\" before the \".bmp\" suffix, unless the command line specifies a different name.\n</p><p>New tiles are created as follows:\n</p>\n<ul><li>Monster tiles are converted to grayscale to form statue tiles. To give better results with tilesets that do not use black backgrounds, the tile is compared to the <a href=\"/wiki/Floor\" title=\"Floor\">floor</a> tile; a pixel that is different from the floor is converted.</li></ul>\n<ul><li>The number of <a href=\"/wiki/Scroll_origins\" title=\"Scroll origins\">scroll appearances</a> increases from 25 to 41; tile2360.py repeats the first 16 scroll tiles to make 41.</li></ul>\n<ul><li>The tile for the darkened portion of a <a href=\"/wiki/Floor\" title=\"Floor\">floor</a> is created by halving the luminance of the existing floor tile.</li></ul>\n<ul><li>Eight other tiles are filled in with a placeholder, which appears as a solid red tile with a black X through it. This is for use by tileset authors, who can then fill in the missing tiles. The missing tiles are, in order:\n<ul><li><a href=\"/wiki/Glob\" title=\"Glob\">glob</a> of <a href=\"/wiki/Gray_ooze\" title=\"Gray ooze\">gray ooze</a>, <a href=\"/wiki/Brown_pudding\" title=\"Brown pudding\">brown pudding</a>, <a href=\"/wiki/Green_slime\" title=\"Green slime\">green slime</a> and <a href=\"/wiki/Black_pudding\" title=\"Black pudding\">black pudding</a>, in that order; this is a block of four missing tiles appearing after the <a href=\"/wiki/Meat_ring\" title=\"Meat ring\">meat ring</a></li>\n<li><a href=\"/wiki/Novel\" title=\"Novel\">novel</a> -- this is a single missing tile appearing after all the <a href=\"/wiki/Spellbook\" title=\"Spellbook\">spellbooks</a> except the <a href=\"/wiki/Book_of_the_Dead\" title=\"Book of the Dead\">Book of the Dead</a></li>\n<li>The <a href=\"/wiki/Vibrating_square\" title=\"Vibrating square\">vibrating square</a> -- this is a single missing tile appearing after all the <a href=\"/wiki/Trap\" title=\"Trap\">traps</a></li>\n<li><a href=\"/wiki/Poison_cloud\" title=\"Poison cloud\">Poison cloud</a> and <a href=\"/index.php?title=Valid_position&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Valid position (page does not exist)\">valid position</a> -- these are two missing tiles appearing after the sparkles</li></ul></li></ul>\n<pre>#!/usr/bin/env python\n# tile2360.py -- convert NetHack 3.4.3 tile sets most of the way to 3.6.0\n#\n# Copyright (c) 2015, Ray Chason\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n\nimport argparse\nimport os.path\nimport struct\nimport sys\n\n# A Bitmap image, with some extra methods for tile mapping\nclass Bitmap(object):\n    def __init__(self, inpname):\n        # TODO: This assumes the BITMAPINFOHEADER structure. Add support for\n        # other bitmap formats.\n\n        # Read the header\n        fp = open(inpname, \"rb\")\n        header = fp.read(54)\n\n        (magic,\n        self.bmp_size,\n        reserved,\n        self.image_offset,\n        self.header_size,\n        self.width,\n        self.height,\n        self.num_planes,\n        self.bits_per_pixel,\n        self.compression,\n        self.image_size,\n        self.horiz_res,\n        self.vert_res,\n        self.num_colors,\n        self.num_important_colors) = struct.unpack(\"&lt;2s6L2H6L\", header)\n\n        # Check various header fields for unsupported stuff\n        if magic&#160;!= \"BM\":\n            raise RuntimeError, \"%s is not in .BMP format\"&#160;% inpname\n\n        if self.header_size&#160;!= 40:\n            raise RuntimeError, \"%s has an unsupported header type (%d)\"&#160;% \\\n                    (inpname, self.header_size)\n\n        if self.num_planes&#160;!= 1:\n            raise RuntimeError, \"%s has %d planes, not supported\"&#160;% \\\n                    (inpname, self.num_planes)\n\n        if self.compression&#160;!= 0:\n            raise RuntimeError, \"%s is compressed (%d), and not supported\"&#160;% \\\n                    (inpname, self.compression)\n\n        if self.bits_per_pixel not in (1, 2, 4, 8, 24, 32):\n            raise RuntimeError, \"%s has %d bits per pixel, not supported\"&#160;% \\\n                    (inpname, self.bits_per_pixel)\n\n        # Read the palette\n        if self.bits_per_pixel &lt;= 8:\n            if self.num_colors == 0:\n                self.num_colors = 1 &lt;&lt; self.bits_per_pixel\n            self.palette = [ None ] * self.num_colors\n            for i in xrange(0, self.num_colors):\n                b, g, r, z = struct.unpack(\"&lt;4B\", fp.read(4))\n                self.palette[i] = (b, g, r)\n        else:\n            self.palette = None\n\n        # Read the pixels\n        fp.seek(self.image_offset)\n        self.image = [ None ] * self.height\n        row_size = ((self.bits_per_pixel * self.width + 31) / 32) * 4\n        if self.bits_per_pixel &lt;= 8:\n            # Palettized image; convert to 24 bit\n            pixels_per_byte = 8 / self.bits_per_pixel\n            mask = (1 &lt;&lt; self.bits_per_pixel) - 1\n            for y in xrange(0, self.height):\n                row_bytes = fp.read(row_size)\n                row_bytes = map(\n                        lambda x&#160;: struct.unpack('&lt;1B', x)[0],\n                        row_bytes)\n                row = [ None ] * self.width\n                self.image[self.height - 1 - y] = row\n                shift = 8\n                for x in xrange(0, self.width):\n                    if shift &lt;= 0:\n                        shift = 8\n                    shift -= self.bits_per_pixel\n                    x_hi = x / pixels_per_byte\n                    i = (row_bytes[x_hi] &gt;&gt; shift) &amp; mask\n                    row[x] = self.palette[i]\n        else:\n            # 24 or 32 bits per pixel\n            bytes_per_pixel = self.bits_per_pixel / 8\n            for y in xrange(0, self.height):\n                row_bytes = fp.read(row_size)\n                row_bytes = map(\n                        lambda x&#160;: struct.unpack('&lt;1B', x)[0],\n                        row_bytes)\n                row = [ None ] * self.width\n                self.image[self.height - 1 - y] = row\n                for x in xrange(0, self.width):\n                    x2 = x * bytes_per_pixel\n                    row[x] = tuple(row_bytes[x2&#160;: x2 + 3])\n        self.bits_per_pixel = 24\n\n        # These are yet unknown\n        self.tile_width = None\n        self.tile_height = None\n        self.tiles_per_row = None\n        self.tile_rows = None\n        self.tiles = None\n\n    # Split the image into tiles\n    def split(self, tile_width, tile_height):\n        self.tile_width = tile_width\n        self.tile_height = tile_height\n        self.tiles_per_row = self.width / tile_width\n        self.tile_rows = self.height / tile_height\n        num_tiles = self.tiles_per_row * self.tile_rows\n        self.tiles = [ None ] * num_tiles\n\n        for t in xrange(0, num_tiles):\n            tile = [ None ] * tile_height\n            self.tiles[t] = tile\n            t_col = t&#160;% self.tiles_per_row\n            t_row = t / self.tiles_per_row\n            t_x = t_col * tile_width\n            t_y = t_row * tile_height\n            for y in xrange(0, tile_height):\n                tile[y] = self.image[t_y + y][t_x&#160;: t_x + tile_width]\n\n    # Rearrange the tiles to match the NetHack 3.6.0 order\n    def remap(self, no_statues):\n        # If tile_map[X] = Y, the tile in position X for 3.6.0 comes from\n        # position Y for 3.4.3. Negative numbers indicate tiles that cannot\n        # be directly mapped.\n        tile_map = [\n            # Monsters\n               0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n              10,   11,   12,   13,   14,   15,   16,\n            # dingo (19) placed before dog (17)\n              19,   17,   18,\n              20,   21,\n            # winter wolf cub (23) placed before warg (22)\n              23,   22,\n              24,   25,   26,   27,   28,   29,\n              30,   31,   32,   33,   34,   35,   36,   37,   38,   39,\n              40,   41,   42,   43,   44,   45,   46,   47,   48,   49,\n              50,   51,   52,   53,   54,   55,   56,   57,   58,   59,\n              60,   61,   62,   63,   64,   65,   66,   67,   68,   69,\n              70,   71,   72,   73,   74,   75,   76,   77,   78,   79,\n              80,   81,   82,   83,   84,   85,   86,   87,   88,   89,\n              90,   91,   92,   93,   94,   95,   96,   97,   98,   99,\n             100,\n            # pony (104) placed before white unicorn (101)\n             104,  101,  102,  103,\n             105,  106,  107,  108,  109,\n             110,  111,  112,  113,  114,  115,  116,  117,  118,  119,\n             120,  121,  122,  123,  124,  125,  126,  127,  128,  129,\n             130,  131,  132,  133,  134,  135,  136,  137,  138,  139,\n             140,  141,  142,  143,  144,  145,  146,  147,  148,  149,\n             150,  151,  152,  153,  154,  155,  156,  157,  158,  159,\n             160,  161,  162,  163,  164,  165,  166,  167,  168,  169,\n             170,  171,  172,  173,  174,\n            # ettin (176) placed before storm giant (175)\n             176,  175,\n             177,  178,  179,\n             180,  181,  182,  183,  184,  185,  186,  187,  188,  189,\n             190,  191,  192,  193,  194,  195,  196,  197,  198,  199,\n             200,  201,  202,  203,  204,  205,  206,  207,  208,  209,\n            # green slime (211) placed before black pudding (210)\n             211,  210,\n             212,  213,  214,  215,  216,  217,\n            # python (219) placed before pit viper (218)\n             219,  218,\n             220,  221,  222,  223,  224,  225,  226,  227,  228,  229,\n             230,  231,  232,  233,  234,  235,  236,  237,  238,  239,\n             240,  241,  242,  243,  244,  245,  246,  247,\n            # ghoul (249) placed before giant zombie (248)\n             249,  248,\n             250,  251,  252,  253,  254,  255,  256,  257,  258,  259,\n             260,  261,  262,  263,  264,  265,  266,  267,  268,  269,\n             270,  271,  272,\n            # nurse (273) placed after sergeant (281)\n             274,  275,  276,  277,  278,  279,  280,  281,  273,\n             282,  283,  284,  285,  286,  287,  288,  289,\n             290,  291,  292,\n            # succubus (294) placed before horned devil (293)\n             294,  293,\n             295,  296,  297,  298,  299,\n             300,  301,  302,  303,  304,\n            # sandestin (319) placed before balrog (305)\n             319,  305,  306,  307,  308,  309,  310,  311,  312,  313,\n             314,  315,  316,  317,  318,\n             320,  321,  322,  323,  324,  325,  326,  327,  328,  329,\n             330,  331,  332,  333,  334,  335,  336,  337,  338,  339,\n             340,  341,  342,  343,  344,  345,  346,  347,  348,  349,\n             350,  351,  352,  353,  354,  355,  356,  357,  358,  359,\n             360,  361,  362,  363,  364,  365,  366,  367,  368,  369,\n             370,  371,  372,  373,  374,  375,  376,  377,  378,  379,\n             380,  381,  382,  383,  384,  385,  386,  387,  388,  389,\n             390,  391,  392,  393,\n\n            # Objects:\n                                     394,  395,  396,  397,  398,  399,\n             400,  401,  402,  403,  404,  405,  406,  407,  408,  409,\n             410,  411,  412,  413,  414,  415,  416,  417,  418,  419,\n             420,  421,  422,  423,  424,  425,  426,  427,  428,  429,\n             430,  431,  432,  433,  434,  435,  436,  437,  438,  439,\n             440,  441,  442,  443,  444,  445,  446,  447,  448,  449,\n             450,  451,  452,  453,  454,  455,  456,  457,  458,  459,\n             460,  461,  462,  463,  464,  465,  466,  467,  468,  469,\n             470,  471,  472,  473,  474,  475,  476,  477,  478,  479,\n             480,  481,  482,  483,  484,  485,  486,  487,  488,  489,\n             490,  491,  492,  493,  494,  495,  496,  497,  498,  499,\n             500,  501,  502,  503,  504,  505,  506,  507,  508,  509,\n             510,  511,  512,  513,  514,  515,  516,  517,  518,  519,\n             520,  521,  522,  523,  524,  525,  526,  527,  528,  529,\n             530,  531,  532,  533,  534,  535,  536,  537,  538,  539,\n             540,  541,  542,  543,  544,  545,  546,  547,  548,  549,\n             550,  551,  552,  553,  554,  555,  556,  557,  558,  559,\n             560,  561,  562,  563,  564,  565,  566,  567,  568,  569,\n             570,  571,  572,  573,  574,  575,  576,  577,  578,  579,\n             580,  581,  582,  583,  584,  585,  586,  587,  588,  589,\n             590,  591,  592,  593,  594,  595,  596,  597,  598,  599,\n             600,  601,  602,  603,  604,  605,  606,  607,  608,  609,\n             610,  611,  612,  613,  614,  615,  616,  617,  618,  619,\n             620,  621,  622,  623,  624,  625,  626,  627,  628,  629,\n             630,  631,  632,  633,  634,  635,  636,  637,  638,  639,\n             640,  641,\n              -1, # glob of gray ooze\n              -1, # glob of brown pudding\n              -1, # glob of green slime\n              -1, # glob of black pudding\n             642,  643,  644,  645,  646,  647,  648,  649,\n             650,  651,  652,  653,  654,  655,  656,  657,  658,  659,\n             660,  661,  662,  663,  664,  665,  666,  667,  668,  669,\n             670,  671,  672,  673,  674,  675,  676,  677,  678,  679,\n             680,  681,  682,  683,  684,  685,  686,  687,  688,  689,\n            # Random scroll appearances begin here\n             690,  691,  692,  693,  694,  695,  696,  697,  698,  699,\n             700,  701,  702,  703,  704,  705,  706,  707,  708,  709,\n             710,  711,  712,  713,  714,\n            # New random scroll appearances. Repeat the first 16 above\n             690,  691,  692,  693,  694,  695,  696,  697,  698,  699,\n             700,  701,  702,  703,  704,  705,\n            # Random scroll appearances end here\n             715,  716,  717,  718,  719,\n             720,  721,  722,  723,  724,  725,  726,  727,  728,  729,\n             730,  731,  732,  733,  734,  735,  736,  737,  738,  739,\n             740,  741,  742,  743,  744,  745,  746,  747,  748,  749,\n             750,  751,  752,  753,  754,  755,  756,  757,\n              -1, # Novel\n             758,  759,\n             760,  761,  762,  763,  764,  765,  766,  767,  768,  769,\n             770,  771,  772,  773,  774,  775,  776,  777,  778,  779,\n             780,  781,  782,  783,  784,  785,  786,  787,  788,  789,\n             790,  791,  792,  793,  794,  795,  796,  797,  798,  799,\n             800,  801,  802,  803,  804,  805,  806,  807,  808,  809,\n             810,  811,  812,  813,  814,  815,  816,  817,  818,  819,\n             820,  821,  822,  823,  824,  825,  826,  827,  828,\n\n            # Dungeon features, missiles, explosions, etc.\n             829,\n             830,  831,  832,  833,  834,  835,  836,  837,  838,  839,\n             840,  841,  842,  843,  844,  845,  846,  847,  848,\n              -2, # darkened part of a room\n             849,\n             850,  851,  852,  853,  854,  855,  856,  857,  858,  859,\n             860,  861,  862,  863,  864,  865,  866,  867,  868,  869,\n             870,  871,  872,  873,  874,  875,  876,  877,  878,  879,\n             880,  881,  882,  883,  884,  885,  886,  887,  888,  889,\n             890,  891,\n              -1, # vibrating square\n             892,  893,  894,  895,  896,  897,  898,  899,\n             900,  901,  902,  903,\n              -1, # poison cloud\n              -1, # valid position\n             904,  905,  906,  907,  908,  909,\n             910,  911,  912,  913,  914,  915,  916,  917,  918,  919,\n             920,  921,  922,  923,  924,  925,  926,  927,  928,  929,\n             930,  931,  932,  933,  934,  935,  936,  937,  938,  939,\n             940,  941,  942,  943,  944,  945,  946,  947,  948,  949,\n             950,  951,  952,  953,  954,  955,  956,  957,  958,  959,\n             960,  961,  962,  963,  964,  965,  966,  967,  968,  969,\n             970,  971,  972,  973,  974,  975,  976,  977,  978,  979,\n             980,  981,  982,  983,  984,  985,  986,  987,  988,  989,\n             990,  991,  992,  993,  994,  995,  996,  997,  998,  999,\n            1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,\n            1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,\n            1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,\n            1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,\n            1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,\n            1050, 1051, 1052, 1053, 1054, 1055, 1056\n            # then repeat the monster glyphs to make statues\n        ]\n\n        # Map monsters, objects and dungeon features\n        map_size = len(tile_map)\n        new_tiles = [ None ] * (map_size + 394)\n        for i in xrange(0, map_size):\n            m = tile_map[i]\n            if m &gt;= 0:\n                new_tiles[i] = self.tiles[m]\n            elif m == -2:\n                new_tiles[i] = self.darkenedTile(self.tiles[m - 1])\n            else:\n                new_tiles[i] = self.placeHolderTile()\n\n        # Generate statue tiles\n        if no_statues:\n            for i in xrange(0, 394):\n                new_tiles[i + map_size] = self.tiles[824] # statue\n        else:\n            for i in xrange(0, 394):\n                new_tiles[i + map_size] = self.makeStatue(\n                        new_tiles[i], self.tiles[848])\n\n        # Update the number of tile rows\n        self.tile_rows = (len(new_tiles) + self.tiles_per_row - 1) \\\n                / self.tiles_per_row\n\n        # Add some blank tiles to fill out the last row\n        num_tiles = self.tile_rows * self.tiles_per_row\n        if len(new_tiles) &lt; num_tiles:\n            blank_tile = self.blankTile()\n            while len(new_tiles) &lt; num_tiles:\n                new_tiles.append(blank_tile)\n        self.tiles = new_tiles\n\n    # Rejoin the tiles into a new image\n    def join(self):\n        # New image dimensions; normally width will be unchanged\n        self.width = self.tiles_per_row * self.tile_width\n        self.height = self.tile_rows * self.tile_height\n\n        # Create blank image\n        self.image = [ None ] * self.height\n        for i in xrange(0, self.height):\n            self.image[i] = []\n\n        # Add each tile to the end of its row\n        for i in xrange(0, len(self.tiles)):\n            t_row = i / self.tiles_per_row\n            t_y = t_row * self.tile_height\n            tile = self.tiles[i]\n            for j in xrange(0, self.tile_height):\n                self.image[t_y + j].extend(tile[j])\n\n    # Write the image to the output file\n    def write(self, outname):\n        fp = open(outname, \"wb\")\n\n        # Write a palettized image if possible without degradation\n        self.buildPalette()\n        palette_map = {}\n        if self.bits_per_pixel &lt;= 8:\n            for i in xrange(0, len(self.palette)):\n                palette_map[self.palette[i]] = i\n\n        # Write the header, with placeholders for some fields\n        self.writeHeader(fp)\n\n        # Write the palette if any\n        if self.bits_per_pixel &lt;= 8:\n            for i in xrange(0, self.num_colors):\n                fp.write(struct.pack(\"&lt;4B\",\n                        self.palette[i][0],\n                        self.palette[i][1],\n                        self.palette[i][2],\n                        0))\n        self.image_offset = fp.tell()\n\n        # Write the pixels\n        row_size = ((self.bits_per_pixel * self.width + 31) / 32) * 4\n        if self.bits_per_pixel &lt;= 8:\n            for y in xrange(0, self.height):\n                row = self.image[self.height - 1 - y]\n                bits = 0\n                byte = 0\n                count = 0\n                for x in xrange(0, self.width):\n                    index = palette_map[row[x]]\n                    byte = (byte &lt;&lt; self.bits_per_pixel) | index\n                    bits += self.bits_per_pixel\n                    if bits &gt;= 8:\n                        fp.write(struct.pack(\"&lt;1B\", byte))\n                        byte = 0\n                        bits = 0\n                        count += 1\n                if bits&#160;!= 0:\n                    byte &lt;&lt;= 8 - bits\n                    fp.write(struct.pack(\"&lt;1B\", byte))\n                    count += 1\n                while count &lt; row_size:\n                    fp.write(struct.pack(\"&lt;1B\", 0))\n                    count += 1\n        else:\n            for y in xrange(0, self.height):\n                row = self.image[self.height - 1 - y]\n                for x in xrange(0, self.width):\n                    for byte in row[x]:\n                        fp.write(struct.pack(\"&lt;1B\", byte))\n                count = len(row) * len(row[0])\n                while count &lt; row_size:\n                    fp.write(struct.pack(\"&lt;1B\", 0))\n                    count += 1\n\n        # Write the header with the correct offsets\n        self.bmp_size = fp.tell()\n        fp.seek(0)\n        self.writeHeader(fp)\n\n    # Given the existing image, build a palette if possible\n    # If there are more than 256 unique colors, build no palette; we will\n    # write a 24 bit bitmap\n    def buildPalette(self):\n        # Collect all colors present in the image\n        color_count = {}\n        for row in self.image:\n            for pixel in row:\n                if pixel not in color_count:\n                    color_count[pixel] = 0\n                color_count[pixel] += 1\n\n        # Get the list of unique colors; this will be the palette\n        palette = color_count.keys()\n        self.num_colors = len(palette)\n        if self.num_colors &gt; 256:\n            # We will write a 24 bit bitmap\n            self.bits_per_pixel = 24\n            self.palette = None\n            return\n\n        # Arrange in descending order of occurrence\n        palette.sort(lambda a, b&#160;: color_count[b] - color_count[a])\n\n        # Set a valid bit-per-pixel count, with the fewest bits that will\n        # encompass the palette\n        self.palette = palette\n        if self.num_colors &lt; 2:\n            self.bits_per_pixel = 1\n        elif self.num_colors &lt; 4:\n            self.bits_per_pixel = 2\n        elif self.num_colors &lt; 16:\n            self.bits_per_pixel = 4\n        else:\n            self.bits_per_pixel = 8\n\n    # A black tile, to fill the last row\n    def blankTile(self):\n        return [ [ (0, 0, 0) ] * self.tile_width ] * self.tile_height\n\n    # A placeholder tile, for the tiles that cannot otherwise be derived\n    # This will appear as a red block with a black X through it\n    def placeHolderTile(self):\n        red   = ( 0x00, 0x00, 0xFF )\n        black = ( 0x00, 0x00, 0x00 )\n        tile = [ None ] * self.tile_height\n        for y in xrange(0, self.tile_height):\n            tile[y] = [ red ] * self.tile_width\n        m = min(self.tile_width, self.tile_height)\n        for x in xrange(0, m):\n            tile[x][x] = black\n            tile[x][m - 1 - x] = black\n        return tile\n\n    # A tile at half brightness to the input\n    def darkenedTile(self, inptile):\n        outtile = [ None ] * len(inptile)\n        for y in xrange(0, len(outtile)):\n            inprow = inptile[y]\n            outrow = [ None ] * len(inprow)\n            outtile[y] = outrow\n            for x in xrange(0, len(inprow)):\n                inp = inprow[x]\n                out = ( inp[0] &gt;&gt; 1, inp[1] &gt;&gt; 1, inp[2] &gt;&gt; 1 )\n                outrow[x] = out\n        return outtile\n\n    # A statue tile.\n    # To assist in transforming tile sets that do not use a black background,\n    # this accepts the floor tile. A pixel that is different from the floor\n    # tile is considered to be foreground, and converted to grayscale.\n    def makeStatue(self, inptile, floor):\n        outtile = [ None ] * len(inptile)\n        for y in xrange(0, len(outtile)):\n            inprow = inptile[y]\n            floor_row = floor[y]\n            outrow = [ None ] * len(inprow)\n            outtile[y] = outrow\n            for x in xrange(0, len(inprow)):\n                inp = inprow[x]\n                fl = floor_row[x]\n                if inp == fl:\n                    # background\n                    out = inp\n                else:\n                    # foreground\n                    gray = (inp[0] + inp[1] + inp[2]) / 3\n                    out = ( gray, gray, gray )\n                outrow[x] = out\n        return outtile\n\n    # Write a BITMAPINFOHEADER-type header for a BMP file\n    def writeHeader(self, fp):\n        fp.write(struct.pack(\"&lt;2s6L2H6L\",\n                \"BM\",\n                self.bmp_size,\n                0,\n                self.image_offset,\n                self.header_size,\n                self.width,\n                self.height,\n                self.num_planes,\n                self.bits_per_pixel,\n                self.compression,\n                self.image_size,\n                self.horiz_res,\n                self.vert_res,\n                self.num_colors,\n                self.num_important_colors))\n\n# Convert one bitmap file\n# inpname is the name of the file to be converted; args contains the arguments\n# as parsed by the ArgumentParser object\ndef convertBitmap(inpname, args):\n    # Collect arguments from args\n    tile_width = args.tile_width\n    tile_height = args.tile_height\n    no_statues = args.no_statues\n    outname = args.output\n\n    # Provide default output file name\n    if outname is None:\n        d, n = os.path.split(inpname)\n        dot = n.rfind('.')\n        if dot&#160;!= -1:\n            n = n[:dot]\n        n += '-360.bmp'\n        outname = os.path.join(d, n)\n\n    # Read the bitmap image\n    bmp = Bitmap(inpname)\n\n    # Provide default tile dimensions\n    if tile_width is None:\n        tile_width = bmp.width / 40\n    if tile_height is None:\n        tile_height = tile_width\n\n    # Split the bitmap into tiles\n    bmp.split(tile_width, tile_height)\n\n    # Remap into 3.6.0 arrangement\n    bmp.remap(no_statues)\n\n    # Rejoin into a single image\n    bmp.join()\n\n    # Write to disk\n    bmp.write(outname)\n\n# Define command line arguments for this program\nparser = argparse.ArgumentParser(\n            formatter_class=argparse.RawDescriptionHelpFormatter,\n            description='Convert NetHack 3.4.3 tile sets for use with 3.6.0',\n            epilog=\"\"\"\nIf --tile-width is not specified, it is the image width divided by 40.\nIf --tile-height is not specified, it is equal to the tile width.\nIf --no-statues is specified, statue glyphs are copied from the 3.4.3 statue\n   glyph; if not, statue glyphs are generated by converting the monster glyphs\n   to grayscale.\n\nImages must be in BMP format.\n\nIf --output is not specified, the output file name is &lt;input-name&gt;-360.bmp.\nMultiple images can be converted, but only if --output is not specified.\n\"\"\")\nparser.add_argument('images', metavar='image', type=str, nargs='+',\n            help='Name of a tile set image for NetHack 3.4.3')\nparser.add_argument('--tile-width', '-x', dest='tile_width', type=int,\n            help='Width of a single tile in pixels')\nparser.add_argument('--tile-height', '-y', dest='tile_height', type=int,\n            help='Height of a single tile in pixels')\nparser.add_argument('--no-statues', '-s', dest='no_statues',\n            action='store_true',\n            help='Do not derive statues from monsters')\nparser.add_argument('--output', '-o', dest='output', type=str,\n            help='Name of output image')\n\nargs = parser.parse_args()\nif len(args.images) &gt; 1 and args.output is not None:\n    sys.stderr.write(\"Cannot specify --output with more than one image name\\n\")\n    sys.exit(1)\n\n# Process each image in turn\nrc = 0\nfor image in args.images:\n    if not convertBitmap(image, args):\n        rc = 1\nsys.exit(rc)\n</pre>\n<!-- \nNewPP limit report\nCached time: 20240926190929\nCache expiry: 604800\nDynamic content: false\nCPU time usage: 0.012 seconds\nReal time usage: 0.027 seconds\nPreprocessor visited node count: 1/1000000\nPreprocessor generated node count: 4/1000000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 1/40\nExpensive parser function count: 0/100\nUnstrip recursion depth: 0/20\nUnstrip post‐expand size: 0/5000000 bytes\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%    0.000      1 -total\n-->\n\n<!-- Saved in parser cache with key wikihackdb:pcache:idhash:24336-0!canonical and timestamp 20240926190929 and revision id 131499\n -->\n</div></div>\t\t\t\t\t<div class=\"printfooter\">\n\t\t\t\t\t\tRetrieved from \"<a dir=\"ltr\" href=\"https://nethackwiki.com/index.php?title=Tileset/tile2360.py&amp;oldid=131499\">https://nethackwiki.com/index.php?title=Tileset/tile2360.py&amp;oldid=131499</a>\"\t\t\t\t\t</div>\n\t\t\t\t<div id=\"catlinks\" class=\"catlinks\" data-mw=\"interface\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/wiki/Special:Categories\" title=\"Special:Categories\">Category</a>: <ul><li><a href=\"/wiki/Category:Development\" title=\"Category:Development\">Development</a></li></ul></div></div>\t\t\t\t<div class=\"visualClear\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"mw-navigation\">\n\t\t\t<h2>Navigation menu</h2>\n\t\t\t<div id=\"mw-head\">\n\t\t\t\t\t\t\t\t\t<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">\n\t\t\t\t\t\t<h3 id=\"p-personal-label\">Personal tools</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"pt-createaccount\"><a href=\"/index.php?title=Special:CreateAccount&amp;returnto=Tileset%2Ftile2360.py\" title=\"You are encouraged to create an account and log in; however, it is not mandatory\">Create account</a></li><li id=\"pt-login\"><a href=\"/index.php?title=Special:UserLogin&amp;returnto=Tileset%2Ftile2360.py\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div id=\"left-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">\n\t\t\t\t\t\t<h3 id=\"p-namespaces-label\">Namespaces</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/wiki/Tileset/tile2360.py\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li><li id=\"ca-talk\"><span><a href=\"/wiki/Talk:Tileset/tile2360.py\" rel=\"discussion\" title=\"Discussion about the content page [t]\" accesskey=\"t\">Discussion</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-variants-label\" />\n\t\t\t\t\t\t<h3 id=\"p-variants-label\">\n\t\t\t\t\t\t\t<span>Variants</span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t<div id=\"right-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">\n\t\t\t\t\t\t<h3 id=\"p-views-label\">Views</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-view\" class=\"collapsible selected\"><span><a href=\"/wiki/Tileset/tile2360.py\">Read</a></span></li><li id=\"ca-viewsource\" class=\"collapsible\"><span><a href=\"/index.php?title=Tileset/tile2360.py&amp;action=edit\" title=\"This page is protected.&#10;You can view its source [e]\" accesskey=\"e\">View source</a></span></li><li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/index.php?title=Tileset/tile2360.py&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-cactions-label\" />\n\t\t\t\t\t\t<h3 id=\"p-cactions-label\"><span>More</span></h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-search\" role=\"search\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t<label for=\"searchInput\">Search</label>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<form action=\"/index.php\" id=\"searchform\">\n\t\t\t\t\t\t\t<div id=\"simpleSearch\">\n\t\t\t\t\t\t\t\t<input type=\"search\" name=\"search\" placeholder=\"Search NetHackWiki\" title=\"Search NetHackWiki [f]\" accesskey=\"f\" id=\"searchInput\"/><input type=\"hidden\" value=\"Special:Search\" name=\"title\"/><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"/><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\"/>\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"mw-panel\">\n\t\t\t\t<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/wiki/Main_Page\"  title=\"Visit the main page\"></a></div>\n\t\t\t\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">\n\t\t\t<h3 id=\"p-navigation-label\">Navigation</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-NetHack-Wiki\"><a href=\"/wiki/Main_Page\">NetHack Wiki</a></li><li id=\"n-Forum\"><a href=\"/wiki/Forum:Watercooler\">Forum</a></li><li id=\"n-portal\"><a href=\"/wiki/NetHackWiki:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li><li id=\"n-recentchanges\"><a href=\"/wiki/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/wiki/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-Popular_pages\" aria-labelledby=\"p-Popular_pages-label\">\n\t\t\t<h3 id=\"p-Popular_pages-label\">Popular pages</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Dungeon-features\"><a href=\"/wiki/Dungeon_feature\">Dungeon features</a></li><li id=\"n-Monsters\"><a href=\"/wiki/Monster#Canonical_list_of_monsters\">Monsters</a></li><li id=\"n-In.2FExtrinsics\"><a href=\"/wiki/Property#Intrinsic_properties\">In/Extrinsics</a></li><li id=\"n-Items\"><a href=\"/wiki/Item\">Items</a></li><li id=\"n-Spells\"><a href=\"/wiki/Spellbook#List_of_spellbooks\">Spells</a></li><li id=\"n-Game-options\"><a href=\"/wiki/Options\">Game options</a></li><li id=\"n-Websites\"><a href=\"/wiki/Websites\">Websites</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-contributing\" aria-labelledby=\"p-contributing-label\">\n\t\t\t<h3 id=\"p-contributing-label\">Contributing</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Style-guide\"><a href=\"/wiki/NetHackWiki:Style_guide\">Style guide</a></li><li id=\"n-help\"><a href=\"/wiki/NetHackWiki:How_to_help\" title=\"The place to find out\">How to help</a></li><li id=\"n-Current-projects\"><a href=\"/wiki/NetHackWiki:Current_projects\">Current projects</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">\n\t\t\t<h3 id=\"p-tb-label\">Tools</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"t-whatlinkshere\"><a href=\"/wiki/Special:WhatLinksHere/Tileset/tile2360.py\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/wiki/Special:RecentChangesLinked/Tileset/tile2360.py\" rel=\"nofollow\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-specialpages\"><a href=\"/wiki/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-print\"><a href=\"/index.php?title=Tileset/tile2360.py&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li><li id=\"t-permalink\"><a href=\"/index.php?title=Tileset/tile2360.py&amp;oldid=131499\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/index.php?title=Tileset/tile2360.py&amp;action=info\" title=\"More information about this page\">Page information</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t<div id=\"footer\" role=\"contentinfo\">\n\t\t\t\t\t\t<ul id=\"footer-info\">\n\t\t\t\t\t\t\t\t<li id=\"footer-info-lastmod\"> This page was last edited on 26 January 2020, at 06:17.</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<ul id=\"footer-places\">\n\t\t\t\t\t\t\t\t<li id=\"footer-places-about\"><a href=\"/wiki/NetHackWiki:About\" title=\"NetHackWiki:About\">About NetHackWiki</a></li>\n\t\t\t\t\t\t\t\t<li id=\"footer-places-disclaimer\"><a href=\"/wiki/NetHackWiki:General_disclaimer\" title=\"NetHackWiki:General disclaimer\">Disclaimers</a></li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t<ul id=\"footer-icons\" class=\"noprint\">\n\t\t\t\t\t\t\t\t\t\t<li id=\"footer-poweredbyico\">\n\t\t\t\t\t\t<a href=\"//www.mediawiki.org/\"><img src=\"/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"/></a>\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div style=\"clear: both;\"></div>\n\t\t</div>\n\t\t\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.012\",\"walltime\":\"0.027\",\"ppvisitednodes\":{\"value\":1,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":4,\"limit\":1000000},\"postexpandincludesize\":{\"value\":0,\"limit\":2097152},\"templateargumentsize\":{\"value\":0,\"limit\":2097152},\"expansiondepth\":{\"value\":1,\"limit\":40},\"expensivefunctioncount\":{\"value\":0,\"limit\":100},\"unstrip-depth\":{\"value\":0,\"limit\":20},\"unstrip-size\":{\"value\":0,\"limit\":5000000},\"timingprofile\":[\"100.00%    0.000      1 -total\"]},\"cachereport\":{\"timestamp\":\"20240926190929\",\"ttl\":604800,\"transientcontent\":false}}});mw.config.set({\"wgBackendResponseTime\":99});});</script>\n\t</body>\n</html>\n","rawPage":"<!DOCTYPE html>\n<html><head><title>Forbidden</title></head>\n<body><h1>Forbidden</h1><p>Invalid file extension found in the path info or query string.</p></body></html>\n"}
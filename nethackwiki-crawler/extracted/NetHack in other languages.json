{"title":"NetHack in other languages","url":"https://nethackwiki.com/wiki/NetHack_in_other_languages","type":"markdown","data":"[![RogueBasin](/images/thumb/d/d9/RogueBasin_logo.png/50px-RogueBasin_logo.png)](/wiki/File:RogueBasin_logo.png \"RogueBasin\")\n\n[RogueBasin](/wiki/RogueBasin \"RogueBasin\") has a wiki page about:\n\n***[Translation](https://roguebasin.com?title=Translation)***\n\n[NetHack](/wiki/NetHack \"NetHack\")'s text output is in English. Although the program's structure does not easily lend itself to [localization](http://en.wikipedia.org/wiki/Internationalization_and_localization \"wikipedia:Internationalization and localization\") because English [morphology](http://en.wikipedia.org/wiki/Morphology_\\(linguistics\\) \"wikipedia:Morphology (linguistics)\") and [syntax](http://en.wikipedia.org/wiki/Syntax \"wikipedia:Syntax\") are hard-wired into the [source code](/wiki/Source_code \"Source code\") on all levels, several localization projects currently exist.\n\n[ ]\n\n## Contents\n\n- [1 German](#German)\n\n- [2 Japanese](#Japanese)\n\n- [3 Spanish](#Spanish)\n\n- [4 Korean](#Korean)\n\n- [5 Chinese](#Chinese)\n\n- [6 Incomplete or stalled translations](#Incomplete_or_stalled_translations)\n\n- [7 Internationalization](#Internationalization)\n\n- [8 Current NetHack localization strategies](#Current_NetHack_localization_strategies)\n\n  - [8.1 The problem](#The_problem)\n\n  - [8.2 Localization approaches](#Localization_approaches)\n\n    - [8.2.1 NetHack-i18n](#NetHack-i18n)\n    - [8.2.2 Spanish NetHack](#Spanish_NetHack)\n    - [8.2.3 NetzHack](#NetzHack)\n\n  - [8.3 Monster and object names](#Monster_and_object_names)\n\n  - [8.4 Input parsing](#Input_parsing)\n\n  - [8.5 Character sets](#Character_sets)\n\n## German\n\n[Tony Crawford](/wiki/User:Netzhack \"User:Netzhack\") and Karl Breuer have completed a German-localized version called [NetzHack](http://www.netzhack.de/) (note the 'z'), which runs on GNU/Linux, \\*BSD, and OS X (console and X11), and on Win32 (console and Windows graphics). Early versions up to NetzHack v1, released in 2017, were based on NetHack 3.4.3; NetzHack v2.0, released in December 2021, is based on NetHack 3.6. Source and binaries available [here](http://www.netzhack.de/download/).\n\nA different German translation attempt by [Patric Mueller](/wiki/User:Bhaak \"User:Bhaak\") called [NetHack-De](http://nethack-de.sourceforge.net/) was released as a playable, although incomplete, alpha release on 11 October 2007. The [latest release](https://sourceforge.net/projects/nethack-de/files/nethack-de/3.4.3-20120127a/) (2012) includes source code, a [Debian](/wiki/Debian \"Debian\") package and a graphical Windows binary.\n\n## Japanese\n\n[JNetHack](https://web.archive.org/web/20221220005450/http://nethack-users.sourceforge.jp/) by Issei Numata has been in existence for several years. The older version (based on *NetHack *3.2.2) by Issei Numata is [here](http://www.jnethack.org/). In addition, beta versions of [*JSLASH'EM*](https://web.archive.org/web/20200222122336/http://jslashem.osdn.jp/) is also available now.\n\nSourceforge.jp also carries a [JSlash'em](https://sourceforge.jp/projects/jslashem/), [JSporkHack](https://sourceforge.jp/projects/jsporkhack/) and [JUnNetHack](https://sourceforge.jp/projects/junnethack/) as well as a Japanese [NetHack Resources Project](https://sourceforge.jp/projects/nethack-users/).\n\n[NetHack brass](/wiki/NetHack_brass \"NetHack brass\") can be compiled as an English or Japanese version.\n\n## Spanish\n\nRay Chason has published [Internationalized NetHack](https://sourceforge.net/projects/nethack-i18n/) as a work in progress. It presently supports English and Spanish, and will eventually supersede [Spanish NetHack](https://spanish-nethack.sourceforge.net/).\n\n## Korean\n\nSeveral starts have been made to produce a Korean version of NetHack:\n\n- [nethack-ko](https://wiki.kldp.org/wiki.php/nethack-ko). The last update was on May 29th, 2007.\n- Another Korean translation is in progress, based on jnethack, at [KRNethack](https://github.com/teabarley/KRNethack).\n\nKorean articles can also be accessed on [NetHackWiki](/wiki/NetHackWiki \"NetHackWiki\") via the /ko subpages.\n\n## Chinese\n\nOn January 28th 2009 a Chinese translation called [nethack-cn](https://code.google.com/p/nethack-cn/) was begun on Google Code, but the last update was on June 25th 2009.\n\nSimplified Chinese-language articles can also be accessed on [NetHackWiki](/wiki/NetHackWiki \"NetHackWiki\") via the /zh-CN subpages.\n\n## Incomplete or stalled translations\n\nA SourceForge project for a French translation called [nethack-fr](https://sourceforge.net/projects/nethack-fr/) was registered on August 6th 2009. The last update was on August 15 2014.\n\nThere is a French translation of the [guidebook](https://web.archive.org/web/20070110033355/www.eleves.ens.fr/home/grasland/nethack/tutoriel/) and some [spoilers](https://web.archive.org/web/20080404185030/www.eleves.ens.fr/home/grasland/nethack/tutoriel/spoilers/liste.html).\n\nA GitHub project for an Italian translation called [nethack-it](https://github.com/Dargor87/nethack-it) had its first commit on December 4th 2009 and its last commit on December 7th 2009.\n\n## Internationalization\n\nRay Chason has launched the [NetHack-i18n](https://sourceforge.net/projects/nethack-i18n/) project, also called Internationalized NetHack, which is aimed at adapting NetHack for easier translation to other languages. The last activity was November 2016.\n\n## Current NetHack localization strategies\n\nThe existing NetHack localization projects differ in their approaches to the task.\n\n### The problem\n\nBecause NetHack has output text in the form of string literals scattered throughout the code, the customary approach is for the translator to go through the source code and substitute translations for the string literals. What complicates this process is the fact that many messages are composed of elements that can vary with the runtime context. For example, an output statement like \"the dagger hits your little dog\" would be generated by a line of code more or less like this:\n\n```\npline(\"%s hits %s.\", objectname, monstername);\n```\n\nwhere the variables \"objectname\" and \"monstername\" may be singular or plural, masculine or feminine, and may be introduced by \"a\" or \"the\", or sometimes \"your\". The words to be inserted must be formed appropriately before the output function call.\n\nAt various points in the program, NetHack's output messages vary with second and third person verb forms, singular and plural verb forms, and noun inflections by case, gender, and number.\n\nIn English, this is easy: word forms do not change with grammatical gender or case, and most nouns change from singular to plural simply by the addition of a trailing 's'. There is only one form of the definite article (\"the\"), and there are two forms of the indefinite article (\"a\" and \"an\") which are grammatically equivalent. In other languages, morphology can be much more complex: Spanish, for example, has four forms of the definite article, depending on whether a noun is singular or plural, masculine or feminine; German has six, depending on number, gender, and case.\n\nFurthermore, some languages have mandatory contractions (Spanish contracts the preposition and article \"a\"+\"el\" into \"al\"; French contracts the preposition and article \"de\"+\"le\" into \"du\", etc.).\n\nSome examples of word and sentence morphology in Spanish:\n\n- \"¡Idefix golpea al orco!\" (subject and object are both nouns)\n- \"¡Idefix lo golpea!\" (object is a pronoun, and goes before the verb)\n- \"¡Golpeas al orco!\" (subject is a pronoun (\"tú\") and is omitted; verb changes to second person singular)\n- \"¡Lo golpeas!\" (both modifications apply)\n\n(As it happens, monsters in NetHack always act or are acted upon singly, not collectively, which simplifies matters sometimes. On the other hand, [stackable](/wiki/Stackable \"Stackable\") objects can be singular or plural, and a pair of gloves or shoes is, in the game's logic, a single object, but may call for a plural verb form. Furthermore, many objects are named differently at different times – by name, by description, or by class – and so an object name or a pronoun that replaces \"it\" can vary even for the same object.)\n\nWord order can also change depending on certain conditions, such as whether the subject is a common noun, a proper noun or a pronoun. The message generation routine must also provide sentence capitalization (in languages that require it) after such rules have been applied.\n\nOriginal NetHack contains a few functions to modify linguistic elements for output, such as [vtense](/wiki/Source:Objnam.c#vtense \"Source:Objnam.c\") and [makeplural](/wiki/Source:Objnam.c#makeplural \"Source:Objnam.c\") in [objnam.c](/wiki/Source:Objnam.c \"Source:Objnam.c\"), and [s\\_suffix](/wiki/Source:Hacklib.c#s_suffix \"Source:Hacklib.c\") in [hacklib.c](/wiki/Source:Hacklib.c \"Source:Hacklib.c\"). But since English is not a highly inflected language, even these do not actually operate on grammatical categories, but tend to manipulate words by superficial characteristics: [an](/wiki/Source:Objnam.c#an \"Source:Objnam.c\") for example chooses between the indefinite article forms \"a\" and \"an\" merely on the basis of the following word's first letter, and has no concept even of subject or object case. NetHack's function [the](/wiki/Source:Objnam.c#the \"Source:Objnam.c\") prefixes a definite article to any noun, but it becomes useless in German, for example, because the form of the definite article depends on the noun's gender and number, and on the grammatical case in which it is used.\n\nThese technical and grammatical problems are all in addition to the fundamental problems inherent in any translation. NetHack in particular is famous for the humor it incorporates, much of which depends on English wordplay (jokes about pit vipers in pits, for example), idiomatic expressions (\"everything but the kitchen sink\"), and American cultural references (\"core dumped\", Keystone Kops, ...). The stock in trade of a translator is to achieve an equivalent tone and mood in the target language. For NetHack, that means translating wordplay where possible, compensating for untranslatable [puns](/wiki/Pun \"Pun\") with new target-language jokes as the opportunity arises, and generally choosing similarly humorous (or menacing or archaicizing) wording in the target language in keeping with the spirit of the original game. Conceivably, references to the target culture could be added in analogy to the original game's references – a German version of the Castle level might contain some allusion to the Kafka story, for example.\n\n### Localization approaches\n\n#### NetHack-i18n\n\nInternationalized NetHack aims to systematize the process of string replacement using [Gettext](https://www.gnu.org/software/gettext/) together with a scriptable [printf](http://en.wikipedia.org/wiki/printf_format_string \"wikipedia:printf format string\")-like system to handle the grammar bits.\n\nGettext's grammar support is minimal. It [supports plurals](https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms). NetHack-i18n needs such things as support for changing word order and noun cases, and encodes them in two ways:\n\n- by extending the printf-like syntax to include formatters such as %3${g/handsome/beautiful}, where the number after the % is a parameter number (this is a POSIX extension to printf) and the part between the braces is interpreted by a [Ruby](http://www.ruby-lang.org/) script; and\n- by defining \"joining rules\" at the start and end of each substitution, to handle mandatory contractions and such rules as \"a/an\".\n\nFor example, the output statement in [mthrowu.c#line227](/wiki/Mthrowu.c#line227 \"Mthrowu.c\"),\n\n```\npline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n```\n\nbecomes in NetHack-i18n:\n\n```\npline(NHFormat(T_(\"%1${Nt$} is blinded by %2${nt}.\")) << mtmp << otmp);\n```\n\nThis is C++ rather than C, and the NHFormat class overloads the << operator and the cast to std::string to make this work; it's rather similar to [Boost Format](http://www.boost.org/doc/libs/1_55_0/libs/format/). \"%1${Nt$}\" means substitute the first parameter, and use a locale-specific formatting with \"Nt$\" to indicate the specific formatting.\n\nThe code for the English locale interprets \"Nt$\" with a monster parameter as follows:\n\n- Initial \"n\" means the name of the monster;\n- The \"n\" is made capital, to indicate the output should be capitalized;\n- \"t\" means prefix \"the\" if appropriate; and\n- \"$\" means show the saddle if the monster does not have a name. (\"s\" would mean \"always show the saddle.\")\n\nWith an object parameter, initial \"n\" means show the name, and \"t\" again means use \"the\" if appropriate.\n\nT\\_() consults the message catalog, which uses the gettext syntax, but does not support plurals. The message catalog for the Spanish locale has this entry:\n\n```\nmsgid \"%1${Nt$} is blinded by %2${nt}.\"\nmsgstr \"%1${:es_intrans,Nl$,es} cegad%1${oa} por %2${nl}.\"\n```\n\nNote that the first parameter is substituted twice. This is permitted, and indeed very frequent. The substitutions are as follows:\n\n- %1${:es\\_intrans,Nl$,es}: Both the English and the Spanish locales adopt the convention that a format string beginning with a colon names a method in the Ruby code. Thus \":es\\_intrans,Nl$,es\" invokes a method called es\\_intrans. (The name is a misnomer: you use :es\\_trans if the direct object is a monster, and :es\\_intrans otherwise.) The commas (any non-alphanumeric character may be used) delimit parameters to es\\_intrans. \"Nl$\" is the formatter for the monster, with \"l\" indicating the definite article, and \"es\" is the verb. If the monster cannot be seen, the format routine returns \"él\" or \"Él\", and es\\_intrans omits it and capitalizes the verb if appropriate. (This pattern is overkill for the particular case, as the message does not appear if the monster isn't visible, but it frequently appears elsewhere.)\n- %1${oa}: \"oa\" means substitute \"o\" if the parameter is a masculine noun, or \"a\" if feminine. There are several other such substitutions, and they may be used with strings or objects – or the hero (\"¡Destruid a %0${el} ladr%0${ón}, mi%1${p} mascota%1${p}!\").\n- %2${nl}: Show the name of the object with the definite article.\n\n#### Spanish NetHack\n\nSpanish NetHack handles grammar rules by coding special routines to handle them, much as the unpatched NetHack does. For example, the output statement in [mthrowu.c#line227](/wiki/Mthrowu.c#line227 \"Mthrowu.c\"),\n\n```\npline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n```\n\nbecomes in Spanish NetHack:\n\n```\npline(\"%s es cegad%c por %s.\", Monnam(mtmp),\n    mon_gender(mtmp)? 'a' : 'o', the(xname(otmp)));\n```\n\nMonnam, the, and xname retain their names from the original code, though \"the\" in fact uses the appropriate Spanish article. mon\\_gender returns nonzero if the monster's name is a feminine noun.\n\n#### NetzHack\n\nNetzHack began with the idea that the developers just wanted to translate, not to rewrite the program. Or, in other words: NetHack is a prime example of how you *don't* code for localization, and trying to fix that was pretty near hopeless. So the localization strategy was as follows:\n\n- Translate string literals in the source code\n- Create a new data type, usage\\_t, to contain the usage information of a context in which a noun, adjective or pronoun appears: number (singular or plural), case (nominative, genitive, dative or accusative), gender (masculine, feminine or neuter), and determiner (the, a/an, this, your, or none).\n- Write a new module, german.c, with the functions necessary to inflect German nouns and adjectives for a specified usage, and add a dictionary, nouns\\_de.h, which associates each German noun in the game with a reference to its declension paradigm.\n- Replace functions that produce an object or monster name, such as [doname](/wiki/Source:Objnam.c#doname \"Source:Objnam.c\") in [objnam.c](/wiki/Source:Objnam.c \"Source:Objnam.c\") or [mon\\_nam](/wiki/Source:Do_name.c#mon_nam \"Source:Do name.c\") in [do\\_name.c](/wiki/Source:Do_name.c \"Source:Do name.c\"), with expanded versions that take a usage\\_t argument and inflect the output noun phrase for the usage indicated.\n- Write human-readable macros in a new header, german.h, to call those functions with specific values of the usage parameters, then use these macros as drop-in replacements for the original functions to provide German grammar throughout the code. For example, the output statement in [line 227 of mthrowu.c](/wiki/Source:NetHack_3.4.3/src/mthrowu.c#line227 \"Source:NetHack 3.4.3/src/mthrowu.c\"),\n\n```\npline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n```\n\nbecomes in NetzHack:\n\n```\npline(\"%s wird von %s geblendet.\", Monnam_nomsing(mtmp), the_xname_dat(otmp));\n```\n\nMonnam\\_nomsing and the\\_xname\\_dat are macros that call German grammar-sensitive versions of [mon\\_nam](/wiki/Source:Do_name.c#mon_nam \"Source:Do name.c\") in [do\\_name.c](/wiki/Source:Do_name.c \"Source:Do name.c\") and [xname](/wiki/Source:Objnam.c#xname \"Source:Objnam.c\") in [objnam.c](/wiki/Source:Objnam.c \"Source:Objnam.c\"), passing them the appropriate usage parameters for this message. The macro definitions (in german.h) look like this:\n\n```\n#define Monnam_nomsing(m) Monnamg((m), (usage_t){SINGULAR, GENDER_UNKNOWN, CASE_NOMINATIVE, ARTICLE_DEFINITE})\n...\n#define the_xname_dat(o) xnameg((o), (usage_t){(o)->quan>1L?PLURAL:SINGULAR, GENDER_UNKNOWN, CASE_DATIVE, ARTICLE_DEFINITE})\n```\n\nThe replacement functions, with names ending in 'g' for German, take the same arguments as the original naming functions (in this case, a pointer to a monster or object structure), plus a usage argument that specifies number, gender, case and determiner. In our example, the noun phrase that designates the monster must be in the nominative case, singular, and capitalized; the noun phrase for the thrown object must be in the dative case and have a definite article. The grammatical gender depends on the exact word that ends up being used to designate the monster or object, so it is indicated as \"unknown\" in these function calls. (Actually, NetzHack also hijacks the names of the original functions in [extern.h](/wiki/Extern.h \"Extern.h\") to make them point to the nominative-singular macros, so that the original [Monnam](/wiki/Source:Do_name.c#Monnam \"Source:Do name.c\")(mtmp) call above doesn't really need to be edited at all.) Since the determiner is a necessary part of the usage parameter – that is, it influences the form of any adjective preceding the noun – the nested call [the](/wiki/Source:Objnam.c#the \"Source:Objnam.c\")([xname](/wiki/Source:Objnam.c#xname \"Source:Objnam.c\")(...)), a frequent occurrence in NetHack, is always replaced (as in the example) with a single function call via one of the macros the\\_xname\\_{nom, gen, dat, acc} (for nominative, genitive, dative or accusative case).\n\nThe frequent dictionary look-ups to determine the necessary declension pattern for each monster or object noun used might be a drawback if computing power had not grown tremendously since NetHack was young. NetzHack caches recent look-ups, though, which is especially helpful since nouns are often repeated in output in a given game context. There are 1796 nouns in the dictionary.\n\nNetzHack, like the original, is written entirely in [C](/wiki/ANSI_C \"ANSI C\").\n\nThe minimal-effort strategy does not bring the game any closer to [UTF-8](http://en.wikipedia.org/wiki/UTF-8 \"wikipedia:UTF-8\") compatibility; however, since the changes from the original program structure are limited, there might be hope of patching in a future UTF-8 port of NetHack without too much adaptation. In fact, since recent versions of Windows have at last gone the way of other operating systems and use UTF-8 internally, the adaptation will probably consist of undoing the changes required to support German letters in ISO 8859-x encoding.\n\n### Monster and object names\n\nThe English names of monsters and objects are string literals in [monst.c](/wiki/Monst.c \"Monst.c\") and [objects.c](/wiki/Objects.c \"Objects.c\"). The NetHack build process compiles and invokes the utility makedefs to convert these names into preprocessor symbols, contained in the files include/pm.h and include/onames.h. The program then identifies objects and monsters by the numeric constants associated with those preprocesor symbols. The problem for translation is therefore that changing the names in [monst.c](/wiki/Monst.c \"Monst.c\") and [objects.c](/wiki/Objects.c \"Objects.c\") would change the preprocessor symbols, and almost every other part of NetHack would then have to be edited accordingly.\n\nSpanish NetHack and NetHack-de solve this problem by replacing each string in monst.c and objects.c with a preprocessor symbol, and providing new headers to substitute either the original English or translated names for these symbols. In this way, distinct versions of objects.o and monst.o are built with the names in English and in the target language.\n\nNetzHack, on the other hand, adds an element to the object and monster data types, struct obj and struct mon, so that each kind of monster and object has both its translated German name and, invisibly to the user, its original English name too. Thus pm.h and onames.h are generated using the original names as before.\n\nNetHack-i18n, because it has Gettext available, leaves the monster and object tables in English and converts them at run time.\n\nAnother approach might be to bite the bullet and replace the preprocessor symbols in pm.h and onames.h with their translated versions. No known translation takes this approach.\n\n### Input parsing\n\nThe largest problem here is support for [wishes](/wiki/Wish \"Wish\"). Every translation must rewrite the [readobjnam](/wiki/Source:Objnam.c#readobjnam \"Source:Objnam.c\") function to parse an object name according to the rules of the target language.\n\nNetHack-i18n first removes the dungeon feature wishes, replacing them with a new [extended command](/wiki/Extended_command \"Extended command\"), called \"dfeature\" in the English locale; and then splits the rest into a parser, which is placed in the Ruby script, and a rule-enforcer, which remains in the core code.\n\n### Character sets\n\n[ASCII](/wiki/ASCII \"ASCII\") is inadequate for most languages other than English. All translations use a larger character set for messages. Case mappings and fuzzy matches for wishes and other inputs must take the character set into account; if the Spanish-language user wishes for \"cota de escamas de dragon gris\", he should get a [gray dragon scale mail](/wiki/Gray_dragon_scale_mail \"Gray dragon scale mail\"), even though the correct spelling is \"dragón\".\n\n**JNetHack** uses [EUC-JP](http://en.wikipedia.org/wiki/EUC-JP \"wikipedia:EUC-JP\"), with tests in the code to detect if the source has been converted to [Shift-JIS](http://en.wikipedia.org/wiki/Shift-JIS \"wikipedia:Shift-JIS\"); EUC-JP is adapted for [Unix](/wiki/Unix \"Unix\")-like environments, and Shift-JIS for [Microsoft Windows](/wiki/Microsoft_Windows \"Microsoft Windows\").\n\n**Spanish NetHack** encodes all messages in [ISO-8859-1](http://en.wikipedia.org/wiki/ISO-8859-1 \"wikipedia:ISO-8859-1\"), while leaving the map symbols in [code page 437](http://en.wikipedia.org/wiki/code_page_437 \"wikipedia:code page 437\"). Reduced [IBMgraphics](/wiki/IBMgraphics \"IBMgraphics\") modes are available for users who do not have code page 437 configured. Slight hackery is needed to support the different character sets, because map symbols can appear outside the map in three places:\n\n- in the response to the '/' command;\n- in the [options](/wiki/Options \"Options\") list, where [bouldersym](/wiki/Boulder \"Boulder\") is listed; and\n- in the status line of the [TTY](/wiki/TTY \"TTY\") and [Win32](/index.php?title=Win32\\&action=edit\\&redlink=1 \"Win32 (page does not exist)\") [user interfaces](/wiki/User_interface \"User interface\").\n\nAs **NetHack-i18n** is meant to be language-neutral, it uses [Unicode](http://en.wikipedia.org/wiki/Unicode \"wikipedia:Unicode\") throughout. Any user input is encoded in Unicode, and user interfaces are expected to support it. The TTY interface is abandoned in favor of a modified [Curses](/wiki/Curses_interface \"Curses interface\") interface, and the Curses library must support wide characters.\n\n**NetHack-De** encodes all messages in ISO 8859-1. As a result, IBMgraphics doesn't work (because it uses a different character set), although DECgraphics does. User wishes are normalized before being parsed so that the user can enter wishes in any charset: to wish for \"Rüstung\" (\"armor\"), for example, the user may type \"ruestung\" in ASCII (the German letter ü originated as a combination of 'u' and 'e', hence \"ue\" is a [conventional alternative](http://en.wikipedia.org/wiki/Umlaut_\\(diacritic\\)#Printing_conventions_in_German \"wikipedia:Umlaut (diacritic)\") where ü is not available), or \"Rüstung\" in ISO-8859-1, or \"RÃ¤stung\" in [UTF-8](http://en.wikipedia.org/wiki/UTF-8 \"wikipedia:UTF-8\"). (This feature is part of a preliminary UTF-8 support: a UTF-8 capable terminal would show \"Rüstung\", but be unable to display umlauts in the rest of Nethack-De's ISO 8859-1-encoded messages.)\n\n**NetzHack** is also in ISO-8859-x. The MS Windows console version actually uses two charsets (or \"code pages\" in Microspeak): the dungeon map is drawn in the system's default code page, while the Windows 1252 code page, containing the German characters ÄÖÜäöüß, is used for text messages.\n\nIn recent updates of Windows 10, Microsoft has finally begun to offer some support for UTF-8 output, which has been standard for some time now in the Unix world. Future versions of NetHack in other languages can therefore be expected to use UTF-8 encoding.\n\nUTF-8, the ISO-8859-x encodings, and Shift-JIS are all supersets of the 7-bit ASCII used by original NetHack, but they are all mutually exclusive. Only UTF-8 is designed to encode the writing systems of all languages in one scheme. Hence a fundamental port to UTF-8 encoding might facilitate other translation projects.\n","html":"<!DOCTYPE html>\n<html class=\"client-nojs\" lang=\"en\" dir=\"ltr\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>NetHack in other languages - NetHack Wiki</title>\n<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"NetHack_in_other_languages\",\"wgTitle\":\"NetHack in other languages\",\"wgCurRevisionId\":176647,\"wgRevisionId\":176647,\"wgArticleId\":8799,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[\"Pages with unversioned Function templates\",\"Variants\"],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"NetHack_in_other_languages\",\"wgRelevantArticleId\":8799,\"wgRequestId\":\"ecbab406e000d5fe4bb1615b\",\"wgCSPNonce\":false,\"wgIsProbablyEditable\":false,\"wgRelevantPageIsProbablyEditable\":false,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"wgWikiEditorEnabledModules\":[],\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.state({\"site.styles\":\"ready\",\"noscript\":\"ready\",\"user.styles\":\"ready\",\"user\":\"ready\",\"user.options\":\"ready\",\"user.tokens\":\"loading\",\"mediawiki.legacy.shared\":\"ready\",\"mediawiki.legacy.commonPrint\":\"ready\",\"mediawiki.toc.styles\":\"ready\",\"mediawiki.skinning.interface\":\"ready\",\"skins.vector.styles\":\"ready\"});mw.loader.implement(\"user.tokens@0tffind\",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\",\"csrfToken\":\"+\\\\\"});\n});RLPAGEMODULES=[\"site\",\"mediawiki.page.startup\",\"mediawiki.user\",\"mediawiki.page.ready\",\"mediawiki.toc\",\"mediawiki.searchSuggest\",\"skins.vector.js\"];mw.loader.load(RLPAGEMODULES);});</script>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\"/>\n<script async=\"\" src=\"/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>\n<meta name=\"ResourceLoaderDynamicStyles\" content=\"\"/>\n<link rel=\"stylesheet\" href=\"/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector\"/>\n<meta name=\"generator\" content=\"MediaWiki 1.32.5\"/>\n<meta name=\"description\" content=\"NetHack&#039;s text output is in English. Although the program&#039;s structure does not easily lend itself to localization because English morphology and syntax are hard-wired into the source code on all levels, several localization projects currently exist.\"/>\n<link rel=\"image_src\" href=\"/images/6/65/Nethackwiki-logo.png\"/>\n<link rel=\"shortcut icon\" href=\"/images/6/64/Favicon.ico\"/>\n<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/opensearch_desc.php\" title=\"NetHackWiki\"/>\n<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://nethackwiki.com/api.php?action=rsd\"/>\n<link rel=\"canonical\" href=\"/wiki/NetHack_in_other_languages\"/>\n<!--[if lt IE 9]><script src=\"/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1\"></script><![endif]-->\n</head>\n<body class=\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-NetHack_in_other_languages rootpage-NetHack_in_other_languages skin-vector action-view\">\t\t<div id=\"mw-page-base\" class=\"noprint\"></div>\n\t\t<div id=\"mw-head-base\" class=\"noprint\"></div>\n\t\t<div id=\"content\" class=\"mw-body\" role=\"main\">\n\t\t\t<a id=\"top\"></a>\n\t\t\t<div class=\"mw-indicators mw-body-content\">\n</div>\n<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">NetHack in other languages</h1>\t\t\t<div id=\"bodyContent\" class=\"mw-body-content\">\n\t\t\t\t<div id=\"siteSub\" class=\"noprint\">From NetHackWiki</div>\t\t\t\t<div id=\"contentSub\"></div>\n\t\t\t\t<div id=\"jump-to-nav\"></div>\t\t\t\t<a class=\"mw-jump-link\" href=\"#mw-head\">Jump to navigation</a>\n\t\t\t\t<a class=\"mw-jump-link\" href=\"#p-search\">Jump to search</a>\n\t\t\t\t<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><div class=\"mw-parser-output\"><div class=\"noprint sidebox\">\n<div style=\"float: left;\"><div class=\"floatnone\"><a href=\"/wiki/File:RogueBasin_logo.png\" class=\"image\" title=\"RogueBasin\"><img alt=\"RogueBasin\" src=\"/images/thumb/d/d9/RogueBasin_logo.png/50px-RogueBasin_logo.png\" width=\"50\" height=\"45\" srcset=\"/images/thumb/d/d9/RogueBasin_logo.png/75px-RogueBasin_logo.png 1.5x, /images/thumb/d/d9/RogueBasin_logo.png/100px-RogueBasin_logo.png 2x\" /></a></div></div>\n<div style=\"margin-left: 60px;\"><a href=\"/wiki/RogueBasin\" title=\"RogueBasin\">RogueBasin</a> has a wiki page about:\n<div style=\"margin-left: 10px;\"><i><b><a class=\"external text\" href=\"https://roguebasin.com?title=Translation\">Translation</a></b></i></div>\n</div>\n</div>\n<p><a href=\"/wiki/NetHack\" title=\"NetHack\">NetHack</a>'s text output is in English. Although the program's structure does not easily lend itself to <a href=\"http://en.wikipedia.org/wiki/Internationalization_and_localization\" class=\"extiw\" title=\"wikipedia:Internationalization and localization\">localization</a> because English <a href=\"http://en.wikipedia.org/wiki/Morphology_(linguistics)\" class=\"extiw\" title=\"wikipedia:Morphology (linguistics)\">morphology</a> and <a href=\"http://en.wikipedia.org/wiki/Syntax\" class=\"extiw\" title=\"wikipedia:Syntax\">syntax</a> are hard-wired into the <a href=\"/wiki/Source_code\" title=\"Source code\">source code</a> on all levels, several localization projects currently exist.\n</p>\n<div id=\"toc\" class=\"toc\"><input type=\"checkbox\" role=\"button\" id=\"toctogglecheckbox\" class=\"toctogglecheckbox\" style=\"display:none\" /><div class=\"toctitle\" lang=\"en\" dir=\"ltr\"><h2>Contents</h2><span class=\"toctogglespan\"><label class=\"toctogglelabel\" for=\"toctogglecheckbox\"></label></span></div>\n<ul>\n<li class=\"toclevel-1 tocsection-1\"><a href=\"#German\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">German</span></a></li>\n<li class=\"toclevel-1 tocsection-2\"><a href=\"#Japanese\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Japanese</span></a></li>\n<li class=\"toclevel-1 tocsection-3\"><a href=\"#Spanish\"><span class=\"tocnumber\">3</span> <span class=\"toctext\">Spanish</span></a></li>\n<li class=\"toclevel-1 tocsection-4\"><a href=\"#Korean\"><span class=\"tocnumber\">4</span> <span class=\"toctext\">Korean</span></a></li>\n<li class=\"toclevel-1 tocsection-5\"><a href=\"#Chinese\"><span class=\"tocnumber\">5</span> <span class=\"toctext\">Chinese</span></a></li>\n<li class=\"toclevel-1 tocsection-6\"><a href=\"#Incomplete_or_stalled_translations\"><span class=\"tocnumber\">6</span> <span class=\"toctext\">Incomplete or stalled translations</span></a></li>\n<li class=\"toclevel-1 tocsection-7\"><a href=\"#Internationalization\"><span class=\"tocnumber\">7</span> <span class=\"toctext\">Internationalization</span></a></li>\n<li class=\"toclevel-1 tocsection-8\"><a href=\"#Current_NetHack_localization_strategies\"><span class=\"tocnumber\">8</span> <span class=\"toctext\">Current NetHack localization strategies</span></a>\n<ul>\n<li class=\"toclevel-2 tocsection-9\"><a href=\"#The_problem\"><span class=\"tocnumber\">8.1</span> <span class=\"toctext\">The problem</span></a></li>\n<li class=\"toclevel-2 tocsection-10\"><a href=\"#Localization_approaches\"><span class=\"tocnumber\">8.2</span> <span class=\"toctext\">Localization approaches</span></a>\n<ul>\n<li class=\"toclevel-3 tocsection-11\"><a href=\"#NetHack-i18n\"><span class=\"tocnumber\">8.2.1</span> <span class=\"toctext\">NetHack-i18n</span></a></li>\n<li class=\"toclevel-3 tocsection-12\"><a href=\"#Spanish_NetHack\"><span class=\"tocnumber\">8.2.2</span> <span class=\"toctext\">Spanish NetHack</span></a></li>\n<li class=\"toclevel-3 tocsection-13\"><a href=\"#NetzHack\"><span class=\"tocnumber\">8.2.3</span> <span class=\"toctext\">NetzHack</span></a></li>\n</ul>\n</li>\n<li class=\"toclevel-2 tocsection-14\"><a href=\"#Monster_and_object_names\"><span class=\"tocnumber\">8.3</span> <span class=\"toctext\">Monster and object names</span></a></li>\n<li class=\"toclevel-2 tocsection-15\"><a href=\"#Input_parsing\"><span class=\"tocnumber\">8.4</span> <span class=\"toctext\">Input parsing</span></a></li>\n<li class=\"toclevel-2 tocsection-16\"><a href=\"#Character_sets\"><span class=\"tocnumber\">8.5</span> <span class=\"toctext\">Character sets</span></a></li>\n</ul>\n</li>\n</ul>\n</div>\n\n<h2><span class=\"mw-headline\" id=\"German\">German</span></h2>\n<p><a href=\"/wiki/User:Netzhack\" title=\"User:Netzhack\">Tony Crawford</a> and Karl Breuer have completed a German-localized version called <a class=\"external text\" href=\"http://www.netzhack.de/\">NetzHack</a> (note the 'z'), which runs on GNU/Linux, *BSD, and OS X (console and X11), and on Win32 (console and Windows graphics). Early versions up to NetzHack v1, released in 2017, were based on NetHack 3.4.3; NetzHack v2.0, released in December 2021, is based on NetHack 3.6. Source and binaries available <a class=\"external text\" href=\"http://www.netzhack.de/download/\">here</a>.\n</p><p>A different German translation attempt by <a href=\"/wiki/User:Bhaak\" title=\"User:Bhaak\">Patric Mueller</a> called <a class=\"external text\" href=\"http://nethack-de.sourceforge.net/\">NetHack-De</a> was released as a playable, although incomplete, alpha release on 11 October 2007. The <a class=\"external text\" href=\"https://sourceforge.net/projects/nethack-de/files/nethack-de/3.4.3-20120127a/\">latest release</a> (2012) includes source code, a <a href=\"/wiki/Debian\" title=\"Debian\">Debian</a> package and a graphical Windows binary.\n</p>\n<h2><span class=\"mw-headline\" id=\"Japanese\">Japanese</span></h2>\n<p><a class=\"external text\" href=\"https://web.archive.org/web/20221220005450/http://nethack-users.sourceforge.jp/\">JNetHack</a> by Issei Numata has been in existence for several years.  The older version (based on <i>NetHack </i>3.2.2) by Issei Numata is <a class=\"external text\" href=\"http://www.jnethack.org/\">here</a>. In addition, beta versions of <a class=\"external text\" href=\"https://web.archive.org/web/20200222122336/http://jslashem.osdn.jp/\"><i>JSLASH'EM</i></a> is also available now.\n</p><p>Sourceforge.jp also carries a <a class=\"external text\" href=\"https://sourceforge.jp/projects/jslashem/\">JSlash'em</a>, <a class=\"external text\" href=\"https://sourceforge.jp/projects/jsporkhack/\">JSporkHack</a> and <a class=\"external text\" href=\"https://sourceforge.jp/projects/junnethack/\">JUnNetHack</a> as well as a Japanese <a class=\"external text\" href=\"https://sourceforge.jp/projects/nethack-users/\">NetHack Resources Project</a>.\n</p><p><a href=\"/wiki/NetHack_brass\" title=\"NetHack brass\">NetHack brass</a> can be compiled as an English or Japanese version.\n</p>\n<h2><span class=\"mw-headline\" id=\"Spanish\">Spanish</span></h2>\n<p>Ray Chason has published <a class=\"external text\" href=\"https://sourceforge.net/projects/nethack-i18n/\">Internationalized NetHack</a> as a work in progress.  It presently supports English and Spanish, and will eventually supersede <a class=\"external text\" href=\"https://spanish-nethack.sourceforge.net/\">Spanish NetHack</a>.\n</p>\n<h2><span class=\"mw-headline\" id=\"Korean\">Korean</span></h2>\n<p>Several starts have been made to produce a Korean version of NetHack:\n</p>\n<ul><li><a class=\"external text\" href=\"https://wiki.kldp.org/wiki.php/nethack-ko\">nethack-ko</a>. The last update was on May 29th, 2007.</li>\n<li>Another Korean translation is in progress, based on jnethack, at <a class=\"external text\" href=\"https://github.com/teabarley/KRNethack\">KRNethack</a>.</li></ul>\n<p>Korean articles can also be accessed on <a href=\"/wiki/NetHackWiki\" class=\"mw-redirect\" title=\"NetHackWiki\">NetHackWiki</a> via the /ko subpages.\n</p>\n<h2><span class=\"mw-headline\" id=\"Chinese\">Chinese</span></h2>\n<p>On January 28th 2009 a Chinese translation called <a class=\"external text\" href=\"https://code.google.com/p/nethack-cn/\">nethack-cn</a> was begun on Google Code, but the last update was on June 25th 2009.\n</p><p>Simplified Chinese-language articles can also be accessed on <a href=\"/wiki/NetHackWiki\" class=\"mw-redirect\" title=\"NetHackWiki\">NetHackWiki</a> via the /zh-CN subpages.\n</p>\n<h2><span class=\"mw-headline\" id=\"Incomplete_or_stalled_translations\">Incomplete or stalled translations</span></h2>\n<p>A SourceForge project for a French translation called <a class=\"external text\" href=\"https://sourceforge.net/projects/nethack-fr/\">nethack-fr</a> was registered on August 6th 2009. The last update was on August 15 2014.\n</p><p>There is a French translation of the <a class=\"external text\" href=\"https://web.archive.org/web/20070110033355/www.eleves.ens.fr/home/grasland/nethack/tutoriel/\">guidebook</a> and some <a class=\"external text\" href=\"https://web.archive.org/web/20080404185030/www.eleves.ens.fr/home/grasland/nethack/tutoriel/spoilers/liste.html\">spoilers</a>.\n</p><p>A GitHub project for an Italian translation called <a class=\"external text\" href=\"https://github.com/Dargor87/nethack-it\">nethack-it</a> had its first commit on December 4th 2009 and its last commit on December 7th 2009.\n</p>\n<h2><span class=\"mw-headline\" id=\"Internationalization\">Internationalization</span></h2>\n<p>Ray Chason has launched the <a class=\"external text\" href=\"https://sourceforge.net/projects/nethack-i18n/\">NetHack-i18n</a> project, also called Internationalized NetHack, which is aimed at adapting NetHack for easier translation to other languages. The last activity was November 2016.\n</p>\n<h2><span class=\"mw-headline\" id=\"Current_NetHack_localization_strategies\">Current NetHack localization strategies</span></h2>\n<p>The existing NetHack localization projects differ in their approaches to the task.\n</p>\n<h3><span class=\"mw-headline\" id=\"The_problem\">The problem</span></h3>\n<p>Because NetHack has output text in the form of string literals scattered throughout the code, the customary approach is for the translator to go through the source code and substitute translations for the string literals. What complicates this process is the fact that many messages are composed of elements that can vary with the runtime context. For example, an output statement like \"the dagger hits your little dog\" would be generated by a line of code more or less like this:\n</p>\n<pre>pline(\"%s hits %s.\", objectname, monstername);\n</pre>\n<p>where the variables \"objectname\" and \"monstername\" may be singular or plural, masculine or feminine, and may be introduced by \"a\" or \"the\", or sometimes \"your\". The words to be inserted must be formed appropriately before the output function call.\n</p><p>At various points in the program, NetHack's output messages vary with second and third person verb forms, singular and plural verb forms, and noun inflections by case, gender, and number.\n</p><p>In English, this is easy: word forms do not change with grammatical gender or case, and most nouns change from singular to plural simply by the addition of a trailing 's'. There is only one form of the definite article (\"the\"), and there are two forms of the indefinite article (\"a\" and \"an\") which are grammatically equivalent. In other languages, morphology can be much more complex: Spanish, for example, has four forms of the definite article, depending on whether a noun is singular or plural, masculine or feminine; German has six, depending on number, gender, and case.\n</p><p>Furthermore, some languages have mandatory contractions (Spanish contracts the preposition and article \"a\"+\"el\" into \"al\"; French contracts the preposition and article \"de\"+\"le\" into \"du\", etc.).\n</p><p>Some examples of word and sentence morphology in Spanish:\n</p>\n<ul><li>\"¡Idefix golpea al orco!\" (subject and object are both nouns)</li>\n<li>\"¡Idefix lo golpea!\" (object is a pronoun, and goes before the verb)</li>\n<li>\"¡Golpeas al orco!\" (subject is a pronoun (\"tú\") and is omitted; verb changes to second person singular)</li>\n<li>\"¡Lo golpeas!\" (both modifications apply)</li></ul>\n<p>(As it happens, monsters in NetHack always act or are acted upon singly, not collectively, which simplifies matters sometimes. On the other hand, <a href=\"/wiki/Stackable\" title=\"Stackable\">stackable</a> objects can be singular or plural, and a pair of gloves or shoes is, in the game's logic, a single object, but may call for a plural verb form. Furthermore, many objects are named differently at different times – by name, by description, or by class – and so an object name or a pronoun that replaces \"it\" can vary even for the same object.)\n</p><p>Word order can also change depending on certain conditions, such as whether the subject is a common noun, a proper noun or a pronoun. The message generation routine must also provide sentence capitalization (in languages that require it) after such rules have been applied.\n</p><p>Original NetHack contains a few functions to modify linguistic elements for output, such as <a href=\"/wiki/Source:Objnam.c#vtense\" class=\"mw-redirect\" title=\"Source:Objnam.c\">vtense</a> and <a href=\"/wiki/Source:Objnam.c#makeplural\" class=\"mw-redirect\" title=\"Source:Objnam.c\">makeplural</a> in <a href=\"/wiki/Source:Objnam.c\" class=\"mw-redirect\" title=\"Source:Objnam.c\">objnam.c</a>, and <a href=\"/wiki/Source:Hacklib.c#s_suffix\" class=\"mw-redirect\" title=\"Source:Hacklib.c\">s_suffix</a> in <a href=\"/wiki/Source:Hacklib.c\" class=\"mw-redirect\" title=\"Source:Hacklib.c\">hacklib.c</a>. But since English is not a highly inflected language, even these do not actually operate on grammatical categories, but tend to manipulate words by superficial characteristics: <a href=\"/wiki/Source:Objnam.c#an\" class=\"mw-redirect\" title=\"Source:Objnam.c\">an</a> for example chooses between the indefinite article forms \"a\" and \"an\" merely on the basis of the following word's first letter, and has no concept even of subject or object case. NetHack's function <a href=\"/wiki/Source:Objnam.c#the\" class=\"mw-redirect\" title=\"Source:Objnam.c\">the</a> prefixes a definite article to any noun, but it becomes useless in German, for example, because the form of the definite article depends on the noun's gender and number, and on the grammatical case in which it is used.\n</p><p>These technical and grammatical problems are all in addition to the fundamental problems inherent in any translation. NetHack in particular is famous for the humor it incorporates, much of which depends on English wordplay (jokes about pit vipers in pits, for example), idiomatic expressions (\"everything but the kitchen sink\"), and American cultural references (\"core dumped\", Keystone Kops, ...). The stock in trade of a translator is to achieve an equivalent tone and mood in the target language. For NetHack, that means translating wordplay where possible, compensating for untranslatable <a href=\"/wiki/Pun\" title=\"Pun\">puns</a> with new target-language jokes as the opportunity arises, and generally choosing similarly humorous (or menacing or archaicizing) wording in the target language in keeping with the spirit of the original game. Conceivably, references to the target culture could be added in analogy to the original game's references – a German version of the Castle level might contain some allusion to the Kafka story, for example.\n</p>\n<h3><span class=\"mw-headline\" id=\"Localization_approaches\">Localization approaches</span></h3>\n<h4><span class=\"mw-headline\" id=\"NetHack-i18n\">NetHack-i18n</span></h4>\n<p>Internationalized NetHack aims to systematize the process of string replacement using <a class=\"external text\" href=\"https://www.gnu.org/software/gettext/\">Gettext</a> together with a scriptable <a href=\"http://en.wikipedia.org/wiki/printf_format_string\" class=\"extiw\" title=\"wikipedia:printf format string\">printf</a>-like system to handle the grammar bits.\n</p><p>Gettext's grammar support is minimal. It <a class=\"external text\" href=\"https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms\">supports plurals</a>.  NetHack-i18n needs such things as support for changing word order and noun cases, and encodes them in two ways:\n</p>\n<ul><li>by extending the printf-like syntax to include formatters such as %3${g/handsome/beautiful}, where the number after the&#160;% is a parameter number (this is a POSIX extension to printf) and the part between the braces is interpreted by a <a class=\"external text\" href=\"http://www.ruby-lang.org/\">Ruby</a> script; and</li>\n<li>by defining \"joining rules\" at the start and end of each substitution, to handle mandatory contractions and such rules as \"a/an\".</li></ul>\n<p>For example, the output statement in <a href=\"/wiki/Mthrowu.c#line227\" class=\"mw-redirect\" title=\"Mthrowu.c\">mthrowu.c#line227</a>,\n</p>\n<pre>pline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n</pre>\n<p>becomes in NetHack-i18n:\n</p>\n<pre>pline(NHFormat(T_(\"%1${Nt$} is blinded by %2${nt}.\")) &lt;&lt; mtmp &lt;&lt; otmp);\n</pre>\n<p>This is C++ rather than C, and the NHFormat class overloads the &lt;&lt; operator and the cast to std::string to make this work; it's rather similar to <a class=\"external text\" href=\"http://www.boost.org/doc/libs/1_55_0/libs/format/\">Boost Format</a>.  \"%1${Nt$}\" means substitute the first parameter, and use a locale-specific formatting with \"Nt$\" to indicate the specific formatting.\n</p><p>The code for the English locale interprets \"Nt$\" with a monster parameter as follows:\n</p>\n<ul><li>Initial \"n\" means the name of the monster;</li>\n<li>The \"n\" is made capital, to indicate the output should be capitalized;</li>\n<li>\"t\" means prefix \"the\" if appropriate; and</li>\n<li>\"$\" means show the saddle if the monster does not have a name.  (\"s\" would mean \"always show the saddle.\")</li></ul>\n<p>With an object parameter, initial \"n\" means show the name, and \"t\" again means use \"the\" if appropriate.\n</p><p>T_() consults the message catalog, which uses the gettext syntax, but does not support plurals.  The message catalog for the Spanish locale has this entry:\n</p>\n<pre>msgid \"%1${Nt$} is blinded by %2${nt}.\"\nmsgstr \"%1${:es_intrans,Nl$,es} cegad%1${oa} por %2${nl}.\"\n</pre>\n<p>Note that the first parameter is substituted twice.  This is permitted, and indeed very frequent.  The substitutions are as follows:\n</p>\n<ul><li>%1${:es_intrans,Nl$,es}: Both the English and the Spanish locales adopt the convention that a format string beginning with a colon names a method in the Ruby code.  Thus \":es_intrans,Nl$,es\" invokes a method called es_intrans.  (The name is a misnomer:  you use :es_trans if the direct object is a monster, and :es_intrans otherwise.)  The commas (any non-alphanumeric character may be used) delimit parameters to es_intrans.  \"Nl$\" is the formatter for the monster, with \"l\" indicating the definite article, and \"es\" is the verb. If the monster cannot be seen, the format routine returns \"él\" or \"Él\", and es_intrans omits it and capitalizes the verb if appropriate.  (This pattern is overkill for the particular case, as the message does not appear if the monster isn't visible, but it frequently appears elsewhere.)</li>\n<li>%1${oa}: \"oa\" means substitute \"o\" if the parameter is a masculine noun, or \"a\" if feminine.  There are several other such substitutions, and they may be used with strings or objects – or the hero (\"¡Destruid a %0${el} ladr%0${ón}, mi%1${p} mascota%1${p}!\").</li>\n<li>%2${nl}: Show the name of the object with the definite article.</li></ul>\n<h4><span class=\"mw-headline\" id=\"Spanish_NetHack\">Spanish NetHack</span></h4>\n<p>Spanish NetHack handles grammar rules by coding special routines to handle them, much as the unpatched NetHack does.  For example, the output statement in <a href=\"/wiki/Mthrowu.c#line227\" class=\"mw-redirect\" title=\"Mthrowu.c\">mthrowu.c#line227</a>,\n</p>\n<pre>pline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n</pre>\n<p>becomes in Spanish NetHack:\n</p>\n<pre>pline(\"%s es cegad%c por %s.\", Monnam(mtmp),\n    mon_gender(mtmp)? 'a'&#160;: 'o', the(xname(otmp)));\n</pre>\n<p>Monnam, the, and xname retain their names from the original code, though \"the\" in fact uses the appropriate Spanish article.  mon_gender returns nonzero if the monster's name is a feminine noun.\n</p>\n<h4><span class=\"mw-headline\" id=\"NetzHack\">NetzHack</span></h4>\n<p>NetzHack began with the idea that the developers just wanted to translate, not to rewrite the program. Or, in other words: NetHack is a prime example of how you <i>don't</i> code for localization, and trying to fix that was pretty near hopeless. So the localization strategy was as follows:\n</p>\n<ul><li>Translate string literals in the source code</li>\n<li>Create a new data type, usage_t, to contain the usage information of a context in which a noun, adjective or pronoun appears: number (singular or plural), case (nominative, genitive, dative or accusative), gender (masculine, feminine or neuter), and determiner (the, a/an, this, your, or none).</li>\n<li>Write a new module, german.c, with the functions necessary to inflect German nouns and adjectives for a specified usage, and add a dictionary, nouns_de.h, which associates each German noun in the game with a reference to its declension paradigm.</li>\n<li>Replace functions that produce an object or monster name, such as <a href=\"/wiki/Source:Objnam.c#doname\" class=\"mw-redirect\" title=\"Source:Objnam.c\">doname</a> in <a href=\"/wiki/Source:Objnam.c\" class=\"mw-redirect\" title=\"Source:Objnam.c\">objnam.c</a> or <a href=\"/wiki/Source:Do_name.c#mon_nam\" class=\"mw-redirect\" title=\"Source:Do name.c\">mon_nam</a> in <a href=\"/wiki/Source:Do_name.c\" class=\"mw-redirect\" title=\"Source:Do name.c\">do_name.c</a>, with expanded versions that take a usage_t argument and inflect the output noun phrase for the usage indicated.</li>\n<li>Write human-readable macros in a new header, german.h, to call those functions with specific values of the usage parameters, then use these macros as drop-in replacements for the original functions to provide German grammar throughout the code. For example, the output statement in <a href=\"/wiki/Source:NetHack_3.4.3/src/mthrowu.c#line227\" title=\"Source:NetHack 3.4.3/src/mthrowu.c\">line 227 of mthrowu.c</a>,</li></ul>\n<pre>pline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n</pre>\n<p>becomes in NetzHack:\n</p>\n<pre>pline(\"%s wird von %s geblendet.\", Monnam_nomsing(mtmp), the_xname_dat(otmp));\n</pre>\n<p>Monnam_nomsing and the_xname_dat are macros that call German grammar-sensitive versions of <a href=\"/wiki/Source:Do_name.c#mon_nam\" class=\"mw-redirect\" title=\"Source:Do name.c\">mon_nam</a> in <a href=\"/wiki/Source:Do_name.c\" class=\"mw-redirect\" title=\"Source:Do name.c\">do_name.c</a> and <a href=\"/wiki/Source:Objnam.c#xname\" class=\"mw-redirect\" title=\"Source:Objnam.c\">xname</a> in <a href=\"/wiki/Source:Objnam.c\" class=\"mw-redirect\" title=\"Source:Objnam.c\">objnam.c</a>, passing them the appropriate usage parameters for this message. The macro definitions (in german.h) look like this:\n</p>\n<pre>#define Monnam_nomsing(m) Monnamg((m), (usage_t){SINGULAR, GENDER_UNKNOWN, CASE_NOMINATIVE, ARTICLE_DEFINITE})\n...\n#define the_xname_dat(o) xnameg((o), (usage_t){(o)-&gt;quan&gt;1L?PLURAL:SINGULAR, GENDER_UNKNOWN, CASE_DATIVE, ARTICLE_DEFINITE})\n</pre>\n<p>The replacement functions, with names ending in 'g' for German, take the same arguments as the original naming functions (in this case, a pointer to a monster or object structure), plus a usage argument that specifies number, gender, case and determiner. In our example, the noun phrase that designates the monster must be in the nominative case, singular, and capitalized; the noun phrase for the thrown object must be in the dative case and have a definite article. The grammatical gender depends on the exact word that ends up being used to designate the monster or object, so it is indicated as \"unknown\" in these function calls. (Actually, NetzHack also hijacks the names of the original functions in <a href=\"/wiki/Extern.h\" class=\"mw-redirect\" title=\"Extern.h\">extern.h</a> to make them point to the nominative-singular macros, so that the original <a href=\"/wiki/Source:Do_name.c#Monnam\" class=\"mw-redirect\" title=\"Source:Do name.c\">Monnam</a>(mtmp) call above doesn't really need to be edited at all.) Since the determiner is a necessary part of the usage parameter – that is, it influences the form of any adjective preceding the noun – the nested call <a href=\"/wiki/Source:Objnam.c#the\" class=\"mw-redirect\" title=\"Source:Objnam.c\">the</a>(<a href=\"/wiki/Source:Objnam.c#xname\" class=\"mw-redirect\" title=\"Source:Objnam.c\">xname</a>(...)), a frequent occurrence in NetHack, is always replaced (as in the example) with a single function call via one of the macros the_xname_{nom, gen, dat, acc} (for nominative, genitive, dative or accusative case).\n</p><p>The frequent dictionary look-ups to determine the necessary declension pattern for each monster or object noun used might be a drawback if computing power had not grown tremendously since NetHack was young. NetzHack caches recent look-ups, though, which is especially helpful since nouns are often repeated in output in a given game context. There are 1796 nouns in the dictionary.\n</p><p>NetzHack, like the original, is written entirely in <a href=\"/wiki/ANSI_C\" title=\"ANSI C\">C</a>.\n</p><p>The minimal-effort strategy does not bring the game any closer to <a href=\"http://en.wikipedia.org/wiki/UTF-8\" class=\"extiw\" title=\"wikipedia:UTF-8\">UTF-8</a> compatibility; however, since the changes from the original program structure are limited, there might be hope of patching in a future UTF-8 port of NetHack without too much adaptation. In fact, since recent versions of Windows have at last gone the way of other operating systems and use UTF-8 internally, the adaptation will probably consist of undoing the changes required to support German letters in ISO 8859-x encoding.\n</p>\n<h3><span class=\"mw-headline\" id=\"Monster_and_object_names\">Monster and object names</span></h3>\n<p>The English names of monsters and objects are string literals in <a href=\"/wiki/Monst.c\" class=\"mw-redirect\" title=\"Monst.c\">monst.c</a> and <a href=\"/wiki/Objects.c\" class=\"mw-redirect\" title=\"Objects.c\">objects.c</a>. The NetHack build process compiles and invokes the utility makedefs to convert these names into preprocessor symbols, contained in the files include/pm.h and include/onames.h. The program then identifies objects and monsters by the numeric constants associated with those preprocesor symbols. The problem for translation is therefore that changing the names in <a href=\"/wiki/Monst.c\" class=\"mw-redirect\" title=\"Monst.c\">monst.c</a> and <a href=\"/wiki/Objects.c\" class=\"mw-redirect\" title=\"Objects.c\">objects.c</a> would change the preprocessor symbols, and almost every other part of NetHack would then have to be edited accordingly.\n</p><p>Spanish NetHack and NetHack-de solve this problem by replacing each string in monst.c and objects.c with a preprocessor symbol, and providing new headers to substitute either the original English or translated names for these symbols. In this way, distinct versions of objects.o and monst.o are built with the names in English and in the target language.\n</p><p>NetzHack, on the other hand, adds an element to the object and monster data types, struct obj and struct mon, so that each kind of monster and object has both its translated German name and, invisibly to the user, its original English name too. Thus pm.h and onames.h are generated using the original names as before.\n</p><p>NetHack-i18n, because it has Gettext available, leaves the monster and object tables in English and converts them at run time.\n</p><p>Another approach might be to bite the bullet and replace the preprocessor symbols in pm.h and onames.h with their translated versions.  No known translation takes this approach.\n</p>\n<h3><span class=\"mw-headline\" id=\"Input_parsing\">Input parsing</span></h3>\n<p>The largest problem here is support for <a href=\"/wiki/Wish\" title=\"Wish\">wishes</a>. Every translation must rewrite the <a href=\"/wiki/Source:Objnam.c#readobjnam\" class=\"mw-redirect\" title=\"Source:Objnam.c\">readobjnam</a> function to parse an object name according to the rules of the target language.\n</p><p>NetHack-i18n first removes the dungeon feature wishes, replacing them with a new <a href=\"/wiki/Extended_command\" class=\"mw-redirect\" title=\"Extended command\">extended command</a>, called \"dfeature\" in the English locale; and then splits the rest into a parser, which is placed in the Ruby script, and a rule-enforcer, which remains in the core code.\n</p>\n<h3><span class=\"mw-headline\" id=\"Character_sets\">Character sets</span></h3>\n<p><a href=\"/wiki/ASCII\" class=\"mw-redirect\" title=\"ASCII\">ASCII</a> is inadequate for most languages other than English.  All translations use a larger character set for messages.  Case mappings and fuzzy matches for wishes and other inputs must take the character set into account; if the Spanish-language user wishes for \"cota de escamas de dragon gris\", he should get a <a href=\"/wiki/Gray_dragon_scale_mail\" title=\"Gray dragon scale mail\">gray dragon scale mail</a>, even though the correct spelling is \"dragón\".\n</p><p><b>JNetHack</b> uses <a href=\"http://en.wikipedia.org/wiki/EUC-JP\" class=\"extiw\" title=\"wikipedia:EUC-JP\">EUC-JP</a>, with tests in the code to detect if the source has been converted to <a href=\"http://en.wikipedia.org/wiki/Shift-JIS\" class=\"extiw\" title=\"wikipedia:Shift-JIS\">Shift-JIS</a>; EUC-JP is adapted for <a href=\"/wiki/Unix\" title=\"Unix\">Unix</a>-like environments, and Shift-JIS for <a href=\"/wiki/Microsoft_Windows\" title=\"Microsoft Windows\">Microsoft Windows</a>.\n</p><p><b>Spanish NetHack</b> encodes all messages in <a href=\"http://en.wikipedia.org/wiki/ISO-8859-1\" class=\"extiw\" title=\"wikipedia:ISO-8859-1\">ISO-8859-1</a>, while leaving the map symbols in <a href=\"http://en.wikipedia.org/wiki/code_page_437\" class=\"extiw\" title=\"wikipedia:code page 437\">code page 437</a>.  Reduced <a href=\"/wiki/IBMgraphics\" title=\"IBMgraphics\">IBMgraphics</a> modes are available for users who do not have code page 437 configured.  Slight hackery is needed to support the different character sets, because map symbols can appear outside the map in three places:\n</p>\n<ul><li>in the response to the '/' command;</li>\n<li>in the <a href=\"/wiki/Options\" title=\"Options\">options</a> list, where <a href=\"/wiki/Boulder\" title=\"Boulder\">bouldersym</a> is listed; and</li>\n<li>in the status line of the <a href=\"/wiki/TTY\" title=\"TTY\">TTY</a> and <a href=\"/index.php?title=Win32&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Win32 (page does not exist)\">Win32</a> <a href=\"/wiki/User_interface\" title=\"User interface\">user interfaces</a>.</li></ul>\n<p>As <b>NetHack-i18n</b> is meant to be language-neutral, it uses <a href=\"http://en.wikipedia.org/wiki/Unicode\" class=\"extiw\" title=\"wikipedia:Unicode\">Unicode</a> throughout. Any user input is encoded in Unicode, and user interfaces are expected to support it. The TTY interface is abandoned in favor of a modified <a href=\"/wiki/Curses_interface\" title=\"Curses interface\">Curses</a> interface, and the Curses library must support wide characters.\n</p><p><b>NetHack-De</b> encodes all messages in ISO 8859-1. As a result, IBMgraphics doesn't work (because it uses a different character set), although DECgraphics does. User wishes are normalized before being parsed so that the user can enter wishes in any charset: to wish for \"Rüstung\" (\"armor\"), for example, the user may type \"ruestung\" in ASCII (the German letter ü originated as a combination of 'u' and 'e', hence \"ue\" is a <a href=\"http://en.wikipedia.org/wiki/Umlaut_(diacritic)#Printing_conventions_in_German\" class=\"extiw\" title=\"wikipedia:Umlaut (diacritic)\">conventional alternative</a> where ü is not available), or \"Rüstung\" in ISO-8859-1, or \"RÃ¤stung\" in <a href=\"http://en.wikipedia.org/wiki/UTF-8\" class=\"extiw\" title=\"wikipedia:UTF-8\">UTF-8</a>. (This feature is part of a preliminary UTF-8 support: a UTF-8 capable terminal would show \"Rüstung\", but be unable to display umlauts in the rest of Nethack-De's ISO 8859-1-encoded messages.)\n</p><p><b>NetzHack</b> is also in ISO-8859-x. The MS Windows console version actually uses two charsets (or \"code pages\" in Microspeak): the dungeon map is drawn in the system's default code page, while the Windows 1252 code page, containing the German characters ÄÖÜäöüß, is used for text messages.\n</p><p>In recent updates of Windows 10, Microsoft has finally begun to offer some support for UTF-8 output, which has been standard for some time now in the Unix world. Future versions of NetHack in other languages can therefore be expected to use UTF-8 encoding.\n</p><p>UTF-8, the ISO-8859-x encodings, and Shift-JIS are all supersets of the 7-bit ASCII used by original NetHack, but they are all mutually exclusive. Only UTF-8 is designed to encode the writing systems of all languages in one scheme. Hence a fundamental port to UTF-8 encoding might facilitate other translation projects.\n</p>\n<!-- \nNewPP limit report\nCached time: 20240926185410\nCache expiry: 604800\nDynamic content: false\nCPU time usage: 0.024 seconds\nReal time usage: 0.030 seconds\nPreprocessor visited node count: 342/1000000\nPreprocessor generated node count: 749/1000000\nPost‐expand include size: 2813/2097152 bytes\nTemplate argument size: 535/2097152 bytes\nHighest expansion depth: 4/40\nExpensive parser function count: 0/100\nUnstrip recursion depth: 0/20\nUnstrip post‐expand size: 6/5000000 bytes\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%    7.100      1 -total\n 51.50%    3.656     13 Template:Function\n 37.37%    2.653      1 Template:RogueBasin\n 18.41%    1.307      1 Template:Generic_project_link\n-->\n\n<!-- Saved in parser cache with key wikihackdb:pcache:idhash:8799-0!canonical and timestamp 20240926185410 and revision id 176647\n -->\n</div></div>\t\t\t\t\t<div class=\"printfooter\">\n\t\t\t\t\t\tRetrieved from \"<a dir=\"ltr\" href=\"https://nethackwiki.com/index.php?title=NetHack_in_other_languages&amp;oldid=176647\">https://nethackwiki.com/index.php?title=NetHack_in_other_languages&amp;oldid=176647</a>\"\t\t\t\t\t</div>\n\t\t\t\t<div id=\"catlinks\" class=\"catlinks\" data-mw=\"interface\"><div id=\"mw-normal-catlinks\" class=\"mw-normal-catlinks\"><a href=\"/wiki/Special:Categories\" title=\"Special:Categories\">Categories</a>: <ul><li><a href=\"/wiki/Category:Pages_with_unversioned_Function_templates\" title=\"Category:Pages with unversioned Function templates\">Pages with unversioned Function templates</a></li><li><a href=\"/wiki/Category:Variants\" title=\"Category:Variants\">Variants</a></li></ul></div></div>\t\t\t\t<div class=\"visualClear\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"mw-navigation\">\n\t\t\t<h2>Navigation menu</h2>\n\t\t\t<div id=\"mw-head\">\n\t\t\t\t\t\t\t\t\t<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">\n\t\t\t\t\t\t<h3 id=\"p-personal-label\">Personal tools</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"pt-createaccount\"><a href=\"/index.php?title=Special:CreateAccount&amp;returnto=NetHack+in+other+languages\" title=\"You are encouraged to create an account and log in; however, it is not mandatory\">Create account</a></li><li id=\"pt-login\"><a href=\"/index.php?title=Special:UserLogin&amp;returnto=NetHack+in+other+languages\" title=\"You are encouraged to log in; however, it is not mandatory [o]\" accesskey=\"o\">Log in</a></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div id=\"left-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">\n\t\t\t\t\t\t<h3 id=\"p-namespaces-label\">Namespaces</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/wiki/NetHack_in_other_languages\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li><li id=\"ca-talk\"><span><a href=\"/wiki/Talk:NetHack_in_other_languages\" rel=\"discussion\" title=\"Discussion about the content page [t]\" accesskey=\"t\">Discussion</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-variants-label\" />\n\t\t\t\t\t\t<h3 id=\"p-variants-label\">\n\t\t\t\t\t\t\t<span>Variants</span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t<div id=\"right-navigation\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">\n\t\t\t\t\t\t<h3 id=\"p-views-label\">Views</h3>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li id=\"ca-view\" class=\"collapsible selected\"><span><a href=\"/wiki/NetHack_in_other_languages\">Read</a></span></li><li id=\"ca-viewsource\" class=\"collapsible\"><span><a href=\"/index.php?title=NetHack_in_other_languages&amp;action=edit\" title=\"This page is protected.&#10;You can view its source [e]\" accesskey=\"e\">View source</a></span></li><li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/index.php?title=NetHack_in_other_languages&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-cactions-label\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"vectorMenuCheckbox\" aria-labelledby=\"p-cactions-label\" />\n\t\t\t\t\t\t<h3 id=\"p-cactions-label\"><span>More</span></h3>\n\t\t\t\t\t\t<div class=\"menu\">\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div id=\"p-search\" role=\"search\">\n\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t<label for=\"searchInput\">Search</label>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<form action=\"/index.php\" id=\"searchform\">\n\t\t\t\t\t\t\t<div id=\"simpleSearch\">\n\t\t\t\t\t\t\t\t<input type=\"search\" name=\"search\" placeholder=\"Search NetHackWiki\" title=\"Search NetHackWiki [f]\" accesskey=\"f\" id=\"searchInput\"/><input type=\"hidden\" value=\"Special:Search\" name=\"title\"/><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"/><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\"/>\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"mw-panel\">\n\t\t\t\t<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/wiki/Main_Page\"  title=\"Visit the main page\"></a></div>\n\t\t\t\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">\n\t\t\t<h3 id=\"p-navigation-label\">Navigation</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-NetHack-Wiki\"><a href=\"/wiki/Main_Page\">NetHack Wiki</a></li><li id=\"n-Forum\"><a href=\"/wiki/Forum:Watercooler\">Forum</a></li><li id=\"n-portal\"><a href=\"/wiki/NetHackWiki:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li><li id=\"n-recentchanges\"><a href=\"/wiki/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-randompage\"><a href=\"/wiki/Special:Random\" title=\"Load a random page [x]\" accesskey=\"x\">Random page</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-Popular_pages\" aria-labelledby=\"p-Popular_pages-label\">\n\t\t\t<h3 id=\"p-Popular_pages-label\">Popular pages</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Dungeon-features\"><a href=\"/wiki/Dungeon_feature\">Dungeon features</a></li><li id=\"n-Monsters\"><a href=\"/wiki/Monster#Canonical_list_of_monsters\">Monsters</a></li><li id=\"n-In.2FExtrinsics\"><a href=\"/wiki/Property#Intrinsic_properties\">In/Extrinsics</a></li><li id=\"n-Items\"><a href=\"/wiki/Item\">Items</a></li><li id=\"n-Spells\"><a href=\"/wiki/Spellbook#List_of_spellbooks\">Spells</a></li><li id=\"n-Game-options\"><a href=\"/wiki/Options\">Game options</a></li><li id=\"n-Websites\"><a href=\"/wiki/Websites\">Websites</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-contributing\" aria-labelledby=\"p-contributing-label\">\n\t\t\t<h3 id=\"p-contributing-label\">Contributing</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"n-Style-guide\"><a href=\"/wiki/NetHackWiki:Style_guide\">Style guide</a></li><li id=\"n-help\"><a href=\"/wiki/NetHackWiki:How_to_help\" title=\"The place to find out\">How to help</a></li><li id=\"n-Current-projects\"><a href=\"/wiki/NetHackWiki:Current_projects\">Current projects</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">\n\t\t\t<h3 id=\"p-tb-label\">Tools</h3>\n\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t<li id=\"t-whatlinkshere\"><a href=\"/wiki/Special:WhatLinksHere/NetHack_in_other_languages\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/wiki/Special:RecentChangesLinked/NetHack_in_other_languages\" rel=\"nofollow\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-specialpages\"><a href=\"/wiki/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-print\"><a href=\"/index.php?title=NetHack_in_other_languages&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li><li id=\"t-permalink\"><a href=\"/index.php?title=NetHack_in_other_languages&amp;oldid=176647\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/index.php?title=NetHack_in_other_languages&amp;action=info\" title=\"More information about this page\">Page information</a></li>\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n\t\t\t\t<div id=\"footer\" role=\"contentinfo\">\n\t\t\t\t\t\t<ul id=\"footer-info\">\n\t\t\t\t\t\t\t\t<li id=\"footer-info-lastmod\"> This page was last edited on 28 August 2024, at 12:12.</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<ul id=\"footer-places\">\n\t\t\t\t\t\t\t\t<li id=\"footer-places-about\"><a href=\"/wiki/NetHackWiki:About\" title=\"NetHackWiki:About\">About NetHackWiki</a></li>\n\t\t\t\t\t\t\t\t<li id=\"footer-places-disclaimer\"><a href=\"/wiki/NetHackWiki:General_disclaimer\" title=\"NetHackWiki:General disclaimer\">Disclaimers</a></li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t<ul id=\"footer-icons\" class=\"noprint\">\n\t\t\t\t\t\t\t\t\t\t<li id=\"footer-poweredbyico\">\n\t\t\t\t\t\t<a href=\"//www.mediawiki.org/\"><img src=\"/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"/></a>\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div style=\"clear: both;\"></div>\n\t\t</div>\n\t\t\n<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.024\",\"walltime\":\"0.030\",\"ppvisitednodes\":{\"value\":342,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":749,\"limit\":1000000},\"postexpandincludesize\":{\"value\":2813,\"limit\":2097152},\"templateargumentsize\":{\"value\":535,\"limit\":2097152},\"expansiondepth\":{\"value\":4,\"limit\":40},\"expensivefunctioncount\":{\"value\":0,\"limit\":100},\"unstrip-depth\":{\"value\":0,\"limit\":20},\"unstrip-size\":{\"value\":6,\"limit\":5000000},\"timingprofile\":[\"100.00%    7.100      1 -total\",\" 51.50%    3.656     13 Template:Function\",\" 37.37%    2.653      1 Template:RogueBasin\",\" 18.41%    1.307      1 Template:Generic_project_link\"]},\"cachereport\":{\"timestamp\":\"20240926185410\",\"ttl\":604800,\"transientcontent\":false}}});mw.config.set({\"wgBackendResponseTime\":83});});</script>\n\t</body>\n</html>\n","rawPage":"{{RogueBasin|Translation}}\n[[NetHack]]'s text output is in English. Although the program's structure does not easily lend itself to [[Wikipedia:Internationalization and localization|localization]] because English [[wikipedia:Morphology_(linguistics)|morphology]] and [[wikipedia:Syntax|syntax]] are hard-wired into the [[source code]] on all levels, several localization projects currently exist.\n\n== German ==\n\n[[User:Netzhack|Tony Crawford]] and Karl Breuer have completed a German-localized version called [http://www.netzhack.de/ NetzHack] (note the 'z'), which runs on GNU/Linux, *BSD, and OS X (console and X11), and on Win32 (console and Windows graphics). Early versions up to NetzHack v1, released in 2017, were based on NetHack 3.4.3; NetzHack v2.0, released in December 2021, is based on NetHack 3.6. Source and binaries available [http://www.netzhack.de/download/ here].\n\nA different German translation attempt by [[User:Bhaak|Patric Mueller]] called [http://nethack-de.sourceforge.net/ NetHack-De] was released as a playable, although incomplete, alpha release on 11 October 2007. The [https://sourceforge.net/projects/nethack-de/files/nethack-de/3.4.3-20120127a/ latest release] (2012) includes source code, a [[Debian]] package and a graphical Windows binary.\n\n== Japanese ==\n\n[https://web.archive.org/web/20221220005450/http://nethack-users.sourceforge.jp/ JNetHack] by Issei Numata has been in existence for several years.  The older version (based on ''NetHack ''3.2.2) by Issei Numata is [http://www.jnethack.org/ here]. In addition, beta versions of [https://web.archive.org/web/20200222122336/http://jslashem.osdn.jp/ ''JSLASH'EM''] is also available now.\n\nSourceforge.jp also carries a [https://sourceforge.jp/projects/jslashem/ JSlash'em], [https://sourceforge.jp/projects/jsporkhack/ JSporkHack] and [https://sourceforge.jp/projects/junnethack/ JUnNetHack] as well as a Japanese [https://sourceforge.jp/projects/nethack-users/ NetHack Resources Project].\n\n[[NetHack brass]] can be compiled as an English or Japanese version.\n\n== Spanish ==\n\nRay Chason has published [https://sourceforge.net/projects/nethack-i18n/ Internationalized NetHack] as a work in progress.  It presently supports English and Spanish, and will eventually supersede [https://spanish-nethack.sourceforge.net/ Spanish NetHack].\n\n==Korean==\nSeveral starts have been made to produce a Korean version of NetHack:\n\n* [https://wiki.kldp.org/wiki.php/nethack-ko nethack-ko]. The last update was on May 29th, 2007.\n* Another Korean translation is in progress, based on jnethack, at [https://github.com/teabarley/KRNethack KRNethack].\n\nKorean articles can also be accessed on [[NetHackWiki]] via the /ko subpages.\n\n==Chinese==\nOn January 28th 2009 a Chinese translation called [https://code.google.com/p/nethack-cn/ nethack-cn] was begun on Google Code, but the last update was on June 25th 2009.\n\nSimplified Chinese-language articles can also be accessed on [[NetHackWiki]] via the /zh-CN subpages.\n\n== Incomplete or stalled translations ==\nA SourceForge project for a French translation called [https://sourceforge.net/projects/nethack-fr/ nethack-fr] was registered on August 6th 2009. The last update was on August 15 2014.\n\nThere is a French translation of the [https://web.archive.org/web/20070110033355/www.eleves.ens.fr/home/grasland/nethack/tutoriel/ guidebook] and some [https://web.archive.org/web/20080404185030/www.eleves.ens.fr/home/grasland/nethack/tutoriel/spoilers/liste.html spoilers].\n\nA GitHub project for an Italian translation called [https://github.com/Dargor87/nethack-it nethack-it] had its first commit on December 4th 2009 and its last commit on December 7th 2009.\n\n==Internationalization==\n\nRay Chason has launched the [https://sourceforge.net/projects/nethack-i18n/ NetHack-i18n] project, also called Internationalized NetHack, which is aimed at adapting NetHack for easier translation to other languages. The last activity was November 2016.\n\n==Current NetHack localization strategies==\n\nThe existing NetHack localization projects differ in their approaches to the task.\n\n===The problem===\n\n<!-- Dear editors: from here down, be wary of updating source code refs!\nThe various localized versions are based on specific original NetHack\nversions, and shifting the source refs to other versions may result in\nmis-, dis-, or dysinformation! --> \n\n\nBecause NetHack has output text in the form of string literals scattered throughout the code, the customary approach is for the translator to go through the source code and substitute translations for the string literals. What complicates this process is the fact that many messages are composed of elements that can vary with the runtime context. For example, an output statement like \"the dagger hits your little dog\" would be generated by a line of code more or less like this:\n\n pline(\"%s hits %s.\", objectname, monstername);\n\nwhere the variables \"objectname\" and \"monstername\" may be singular or plural, masculine or feminine, and may be introduced by \"a\" or \"the\", or sometimes \"your\". The words to be inserted must be formed appropriately before the output function call.\n\nAt various points in the program, NetHack's output messages vary with second and third person verb forms, singular and plural verb forms, and noun inflections by case, gender, and number.\n\nIn English, this is easy: word forms do not change with grammatical gender or case, and most nouns change from singular to plural simply by the addition of a trailing 's'. There is only one form of the definite article (\"the\"), and there are two forms of the indefinite article (\"a\" and \"an\") which are grammatically equivalent. In other languages, morphology can be much more complex: Spanish, for example, has four forms of the definite article, depending on whether a noun is singular or plural, masculine or feminine; German has six, depending on number, gender, and case.\n\nFurthermore, some languages have mandatory contractions (Spanish contracts the preposition and article \"a\"+\"el\" into \"al\"; French contracts the preposition and article \"de\"+\"le\" into \"du\", etc.).\n\nSome examples of word and sentence morphology in Spanish:\n\n* \"¡Idefix golpea al orco!\" (subject and object are both nouns)\n* \"¡Idefix lo golpea!\" (object is a pronoun, and goes before the verb)\n* \"¡Golpeas al orco!\" (subject is a pronoun (\"tú\") and is omitted; verb changes to second person singular)\n* \"¡Lo golpeas!\" (both modifications apply)\n\n(As it happens, monsters in NetHack always act or are acted upon singly, not collectively, which simplifies matters sometimes. On the other hand, [[stackable]] objects can be singular or plural, and a pair of gloves or shoes is, in the game's logic, a single object, but may call for a plural verb form. Furthermore, many objects are named differently at different times – by name, by description, or by class – and so an object name or a pronoun that replaces \"it\" can vary even for the same object.)\n\nWord order can also change depending on certain conditions, such as whether the subject is a common noun, a proper noun or a pronoun. The message generation routine must also provide sentence capitalization (in languages that require it) after such rules have been applied.\n\nOriginal NetHack contains a few functions to modify linguistic elements for output, such as {{function|objnam.c|vtense|x}} and {{function|objnam.c|makeplural}}, and {{function|hacklib.c|s_suffix}}. But since English is not a highly inflected language, even these do not actually operate on grammatical categories, but tend to manipulate words by superficial characteristics: {{function|objnam.c|an|x}} for example chooses between the indefinite article forms \"a\" and \"an\" merely on the basis of the following word's first letter, and has no concept even of subject or object case. NetHack's function {{function|objnam.c|the|x}} prefixes a definite article to any noun, but it becomes useless in German, for example, because the form of the definite article depends on the noun's gender and number, and on the grammatical case in which it is used.\n\nThese technical and grammatical problems are all in addition to the fundamental problems inherent in any translation. NetHack in particular is famous for the humor it incorporates, much of which depends on English wordplay (jokes about pit vipers in pits, for example), idiomatic expressions (\"everything but the kitchen sink\"), and American cultural references (\"core dumped\", Keystone Kops, ...). The stock in trade of a translator is to achieve an equivalent tone and mood in the target language. For NetHack, that means translating wordplay where possible, compensating for untranslatable [[pun]]s with new target-language jokes as the opportunity arises, and generally choosing similarly humorous (or menacing or archaicizing) wording in the target language in keeping with the spirit of the original game. Conceivably, references to the target culture could be added in analogy to the original game's references – a German version of the Castle level might contain some allusion to the Kafka story, for example.\n\n===Localization approaches===\n\n====NetHack-i18n====\nInternationalized NetHack aims to systematize the process of string replacement using [https://www.gnu.org/software/gettext/ Gettext] together with a scriptable [[wikipedia:printf format string|printf]]-like system to handle the grammar bits.\n\nGettext's grammar support is minimal. It [https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms supports plurals].  NetHack-i18n needs such things as support for changing word order and noun cases, and encodes them in two ways:\n\n* by extending the printf-like syntax to include formatters such as %3${g/handsome/beautiful}, where the number after the % is a parameter number (this is a POSIX extension to printf) and the part between the braces is interpreted by a [http://www.ruby-lang.org/ Ruby] script; and\n* by defining \"joining rules\" at the start and end of each substitution, to handle mandatory contractions and such rules as \"a/an\".\n\nFor example, the output statement in [[mthrowu.c#line227]],\n\n pline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n\nbecomes in NetHack-i18n:\n\n pline(NHFormat(T_(\"%1${Nt$} is blinded by %2${nt}.\")) << mtmp << otmp);\n\nThis is C++ rather than C, and the NHFormat class overloads the << operator and the cast to std::string to make this work; it's rather similar to [http://www.boost.org/doc/libs/1_55_0/libs/format/ Boost Format].  \"%1${Nt$}\" means substitute the first parameter, and use a locale-specific formatting with \"Nt$\" to indicate the specific formatting.\n\nThe code for the English locale interprets \"Nt$\" with a monster parameter as follows:\n\n* Initial \"n\" means the name of the monster;\n* The \"n\" is made capital, to indicate the output should be capitalized;\n* \"t\" means prefix \"the\" if appropriate; and\n* \"$\" means show the saddle if the monster does not have a name.  (\"s\" would mean \"always show the saddle.\")\n\nWith an object parameter, initial \"n\" means show the name, and \"t\" again means use \"the\" if appropriate.\n\nT_() consults the message catalog, which uses the gettext syntax, but does not support plurals.  The message catalog for the Spanish locale has this entry:\n\n msgid \"%1${Nt$} is blinded by %2${nt}.\"\n msgstr \"%1${:es_intrans,Nl$,es} cegad%1${oa} por %2${nl}.\"\n\nNote that the first parameter is substituted twice.  This is permitted, and indeed very frequent.  The substitutions are as follows:\n\n* %1${:es_intrans,Nl$,es}: Both the English and the Spanish locales adopt the convention that a format string beginning with a colon names a method in the Ruby code.  Thus \":es_intrans,Nl$,es\" invokes a method called es_intrans.  (The name is a misnomer:  you use :es_trans if the direct object is a monster, and :es_intrans otherwise.)  The commas (any non-alphanumeric character may be used) delimit parameters to es_intrans.  \"Nl$\" is the formatter for the monster, with \"l\" indicating the definite article, and \"es\" is the verb. If the monster cannot be seen, the format routine returns \"él\" or \"Él\", and es_intrans omits it and capitalizes the verb if appropriate.  (This pattern is overkill for the particular case, as the message does not appear if the monster isn't visible, but it frequently appears elsewhere.)\n* %1${oa}: \"oa\" means substitute \"o\" if the parameter is a masculine noun, or \"a\" if feminine.  There are several other such substitutions, and they may be used with strings or objects – or the hero (\"¡Destruid a %0${el} ladr%0${ón}, mi%1${p} mascota%1${p}!\").\n* %2${nl}: Show the name of the object with the definite article.\n\n====Spanish NetHack====\nSpanish NetHack handles grammar rules by coding special routines to handle them, much as the unpatched NetHack does.  For example, the output statement in [[mthrowu.c#line227]],\n\n pline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n\nbecomes in Spanish NetHack:\n\n pline(\"%s es cegad%c por %s.\", Monnam(mtmp),\n     mon_gender(mtmp)? 'a' : 'o', the(xname(otmp)));\n\nMonnam, the, and xname retain their names from the original code, though \"the\" in fact uses the appropriate Spanish article.  mon_gender returns nonzero if the monster's name is a feminine noun.\n\n====NetzHack====\nNetzHack began with the idea that the developers just wanted to translate, not to rewrite the program. Or, in other words: NetHack is a prime example of how you ''don't'' code for localization, and trying to fix that was pretty near hopeless. So the localization strategy was as follows:\n\n* Translate string literals in the source code\n* Create a new data type, usage_t, to contain the usage information of a context in which a noun, adjective or pronoun appears: number (singular or plural), case (nominative, genitive, dative or accusative), gender (masculine, feminine or neuter), and determiner (the, a/an, this, your, or none).\n* Write a new module, german.c, with the functions necessary to inflect German nouns and adjectives for a specified usage, and add a dictionary, nouns_de.h, which associates each German noun in the game with a reference to its declension paradigm.\n* Replace functions that produce an object or monster name, such as {{function|objnam.c|doname|version=3.4.3}} or {{function|do_name.c|mon_nam|version=3.4.3}}, with expanded versions that take a usage_t argument and inflect the output noun phrase for the usage indicated.\n* Write human-readable macros in a new header, german.h, to call those functions with specific values of the usage parameters, then use these macros as drop-in replacements for the original functions to provide German grammar throughout the code. For example, the output statement in [[Source:NetHack 3.4.3/src/mthrowu.c#line227|line 227 of mthrowu.c]],\n\n pline(\"%s is blinded by %s.\", Monnam(mtmp), the(xname(otmp)));\n\nbecomes in NetzHack:\n\n pline(\"%s wird von %s geblendet.\", Monnam_nomsing(mtmp), the_xname_dat(otmp));\n\nMonnam_nomsing and the_xname_dat are macros that call German grammar-sensitive versions of {{function|do_name.c|mon_nam|version=3.6.1}} and {{function|objnam.c|xname|version=3.6.1}}, passing them the appropriate usage parameters for this message. The macro definitions (in german.h) look like this:\n\n #define Monnam_nomsing(m) Monnamg((m), (usage_t){SINGULAR, GENDER_UNKNOWN, CASE_NOMINATIVE, ARTICLE_DEFINITE})\n ...\n #define the_xname_dat(o) xnameg((o), (usage_t){(o)->quan>1L?PLURAL:SINGULAR, GENDER_UNKNOWN, CASE_DATIVE, ARTICLE_DEFINITE})\n\nThe replacement functions, with names ending in 'g' for German, take the same arguments as the original naming functions (in this case, a pointer to a monster or object structure), plus a usage argument that specifies number, gender, case and determiner. In our example, the noun phrase that designates the monster must be in the nominative case, singular, and capitalized; the noun phrase for the thrown object must be in the dative case and have a definite article. The grammatical gender depends on the exact word that ends up being used to designate the monster or object, so it is indicated as \"unknown\" in these function calls. (Actually, NetzHack also hijacks the names of the original functions in [[extern.h]] to make them point to the nominative-singular macros, so that the original {{function|do_name.c|Monnam|x}}(mtmp) call above doesn't really need to be edited at all.) Since the determiner is a necessary part of the usage parameter – that is, it influences the form of any adjective preceding the noun – the nested call {{function|objnam.c|the|x}}({{function|objnam.c|xname|x}}(...)), a frequent occurrence in NetHack, is always replaced (as in the example) with a single function call via one of the macros the_xname_{nom, gen, dat, acc} (for nominative, genitive, dative or accusative case).\n\nThe frequent dictionary look-ups to determine the necessary declension pattern for each monster or object noun used might be a drawback if computing power had not grown tremendously since NetHack was young. NetzHack caches recent look-ups, though, which is especially helpful since nouns are often repeated in output in a given game context. There are 1796 nouns in the dictionary.\n\nNetzHack, like the original, is written entirely in [[ANSI C|C]].\n\nThe minimal-effort strategy does not bring the game any closer to [[wikipedia:UTF-8|UTF-8]] compatibility; however, since the changes from the original program structure are limited, there might be hope of patching in a future UTF-8 port of NetHack without too much adaptation. In fact, since recent versions of Windows have at last gone the way of other operating systems and use UTF-8 internally, the adaptation will probably consist of undoing the changes required to support German letters in ISO 8859-x encoding.\n\n===Monster and object names===\n\nThe English names of monsters and objects are string literals in [[monst.c]] and [[objects.c]]. The NetHack build process compiles and invokes the utility makedefs to convert these names into preprocessor symbols, contained in the files include/pm.h and include/onames.h. The program then identifies objects and monsters by the numeric constants associated with those preprocesor symbols. The problem for translation is therefore that changing the names in [[monst.c]] and [[objects.c]] would change the preprocessor symbols, and almost every other part of NetHack would then have to be edited accordingly.\n\nSpanish NetHack and NetHack-de solve this problem by replacing each string in monst.c and objects.c with a preprocessor symbol, and providing new headers to substitute either the original English or translated names for these symbols. In this way, distinct versions of objects.o and monst.o are built with the names in English and in the target language.\n\nNetzHack, on the other hand, adds an element to the object and monster data types, struct obj and struct mon, so that each kind of monster and object has both its translated German name and, invisibly to the user, its original English name too. Thus pm.h and onames.h are generated using the original names as before.\n\nNetHack-i18n, because it has Gettext available, leaves the monster and object tables in English and converts them at run time.\n\nAnother approach might be to bite the bullet and replace the preprocessor symbols in pm.h and onames.h with their translated versions.  No known translation takes this approach.\n\n===Input parsing===\n\nThe largest problem here is support for [[wish]]es. Every translation must rewrite the {{function|objnam.c|readobjnam|x}} function to parse an object name according to the rules of the target language.\n\nNetHack-i18n first removes the dungeon feature wishes, replacing them with a new [[extended command]], called \"dfeature\" in the English locale; and then splits the rest into a parser, which is placed in the Ruby script, and a rule-enforcer, which remains in the core code.\n\n===Character sets===\n[[ASCII]] is inadequate for most languages other than English.  All translations use a larger character set for messages.  Case mappings and fuzzy matches for wishes and other inputs must take the character set into account; if the Spanish-language user wishes for \"cota de escamas de dragon gris\", he should get a [[gray dragon scale mail]], even though the correct spelling is \"dragón\".\n\n'''JNetHack''' uses [[wikipedia:EUC-JP|EUC-JP]], with tests in the code to detect if the source has been converted to [[wikipedia:Shift-JIS|Shift-JIS]]; EUC-JP is adapted for [[Unix]]-like environments, and Shift-JIS for [[Microsoft Windows]].\n\n'''Spanish NetHack''' encodes all messages in [[wikipedia:ISO-8859-1|ISO-8859-1]], while leaving the map symbols in [[wikipedia:code page 437|code page 437]].  Reduced [[IBMgraphics]] modes are available for users who do not have code page 437 configured.  Slight hackery is needed to support the different character sets, because map symbols can appear outside the map in three places:\n* in the response to the '/' command;\n* in the [[options]] list, where [[boulder]]sym is listed; and\n* in the status line of the [[TTY]] and [[Win32]] [[user interface]]s.\n\nAs '''NetHack-i18n''' is meant to be language-neutral, it uses [[wikipedia:Unicode|Unicode]] throughout. Any user input is encoded in Unicode, and user interfaces are expected to support it. The TTY interface is abandoned in favor of a modified [[Curses interface|Curses]] interface, and the Curses library must support wide characters.\n\n'''NetHack-De''' encodes all messages in ISO 8859-1. As a result, IBMgraphics doesn't work (because it uses a different character set), although DECgraphics does. User wishes are normalized before being parsed so that the user can enter wishes in any charset: to wish for \"Rüstung\" (\"armor\"), for example, the user may type \"ruestung\" in ASCII (the German letter ü originated as a combination of 'u' and 'e', hence \"ue\" is a [[wikipedia:Umlaut_%28diacritic%29#Printing_conventions_in_German|conventional alternative]] where ü is not available), or \"Rüstung\" in ISO-8859-1, or \"RÃ¤stung\" in [[wikipedia:UTF-8|UTF-8]]. (This feature is part of a preliminary UTF-8 support: a UTF-8 capable terminal would show \"Rüstung\", but be unable to display umlauts in the rest of Nethack-De's ISO 8859-1-encoded messages.)\n\n'''NetzHack''' is also in ISO-8859-x. The MS Windows console version actually uses two charsets (or \"code pages\" in Microspeak): the dungeon map is drawn in the system's default code page, while the Windows 1252 code page, containing the German characters ÄÖÜäöüß, is used for text messages.\n\nIn recent updates of Windows 10, Microsoft has finally begun to offer some support for UTF-8 output, which has been standard for some time now in the Unix world. Future versions of NetHack in other languages can therefore be expected to use UTF-8 encoding.\n\nUTF-8, the ISO-8859-x encodings, and Shift-JIS are all supersets of the 7-bit ASCII used by original NetHack, but they are all mutually exclusive. Only UTF-8 is designed to encode the writing systems of all languages in one scheme. Hence a fundamental port to UTF-8 encoding might facilitate other translation projects. \n\n[[Category: Variants]]"}